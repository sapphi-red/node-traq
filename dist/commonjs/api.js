"use strict";
// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * traQ API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const globalImportUrl = require("url");
const axios_1 = require("axios");
const base_1 = require("./base");
/**
    * @export
    * @enum {string}
    */
var HeartbeatResUserStatusesStatusEnum;
(function (HeartbeatResUserStatusesStatusEnum) {
    HeartbeatResUserStatusesStatusEnum["Monitoring"] = "monitoring";
    HeartbeatResUserStatusesStatusEnum["Editing"] = "editing";
    HeartbeatResUserStatusesStatusEnum["None"] = "none";
})(HeartbeatResUserStatusesStatusEnum = exports.HeartbeatResUserStatusesStatusEnum || (exports.HeartbeatResUserStatusesStatusEnum = {}));
/**
 * ActivityApi - axios parameter creator
 * @export
 */
exports.ActivityApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
         * @param {number} [limit] 取得する件数 1-50
         * @param {boolean} [subscribe] 購読チャンネルのみを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLatestMessagesGet(limit, subscribe, options = {}) {
            const localVarPath = `/activity/latest-messages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (subscribe !== undefined) {
                localVarQueryParameter['subscribe'] = subscribe;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ActivityApi - functional programming interface
 * @export
 */
exports.ActivityApiFp = function (configuration) {
    return {
        /**
         * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
         * @param {number} [limit] 取得する件数 1-50
         * @param {boolean} [subscribe] 購読チャンネルのみを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLatestMessagesGet(limit, subscribe, options) {
            const localVarAxiosArgs = exports.ActivityApiAxiosParamCreator(configuration).activityLatestMessagesGet(limit, subscribe, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ActivityApi - factory interface
 * @export
 */
exports.ActivityApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
         * @param {number} [limit] 取得する件数 1-50
         * @param {boolean} [subscribe] 購読チャンネルのみを取得する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activityLatestMessagesGet(limit, subscribe, options) {
            return exports.ActivityApiFp(configuration).activityLatestMessagesGet(limit, subscribe, options)(axios, basePath);
        },
    };
};
/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
class ActivityApi extends base_1.BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    activityLatestMessagesGet(limit, subscribe, options) {
        return exports.ActivityApiFp(this.configuration).activityLatestMessagesGet(limit, subscribe, options)(this.axios, this.basePath);
    }
}
exports.ActivityApi = ActivityApi;
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
exports.AuthenticationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
         * @param {string} [redirect] リダイレクト先
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(redirect, inlineObject, options = {}) {
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
         * @param {string} [redirect] リダイレクト先
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(redirect, options = {}) {
            const localVarPath = `/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (redirect !== undefined) {
                localVarQueryParameter['redirect'] = redirect;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
exports.AuthenticationApiFp = function (configuration) {
    return {
        /**
         * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
         * @param {string} [redirect] リダイレクト先
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(redirect, inlineObject, options) {
            const localVarAxiosArgs = exports.AuthenticationApiAxiosParamCreator(configuration).loginPost(redirect, inlineObject, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
         * @param {string} [redirect] リダイレクト先
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(redirect, options) {
            const localVarAxiosArgs = exports.AuthenticationApiAxiosParamCreator(configuration).logoutPost(redirect, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
exports.AuthenticationApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
         * @param {string} [redirect] リダイレクト先
         * @param {InlineObject} [inlineObject]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(redirect, inlineObject, options) {
            return exports.AuthenticationApiFp(configuration).loginPost(redirect, inlineObject, options)(axios, basePath);
        },
        /**
         * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
         * @param {string} [redirect] リダイレクト先
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(redirect, options) {
            return exports.AuthenticationApiFp(configuration).logoutPost(redirect, options)(axios, basePath);
        },
    };
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
class AuthenticationApi extends base_1.BaseAPI {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    loginPost(redirect, inlineObject, options) {
        return exports.AuthenticationApiFp(this.configuration).loginPost(redirect, inlineObject, options)(this.axios, this.basePath);
    }
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logoutPost(redirect, options) {
        return exports.AuthenticationApiFp(this.configuration).logoutPost(redirect, options)(this.axios, this.basePath);
    }
}
exports.AuthenticationApi = AuthenticationApi;
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
exports.AuthorizationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * OAuth2 認可承諾
         * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeDecidePost(submit, options = {}) {
            // verify required parameter 'submit' is not null or undefined
            if (submit === null || submit === undefined) {
                throw new base_1.RequiredError('submit', 'Required parameter submit was null or undefined when calling oauth2AuthorizeDecidePost.');
            }
            const localVarPath = `/oauth2/authorize/decide`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            // authentication cookieAuth required
            if (submit !== undefined) {
                localVarFormParams.set('submit', submit);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 認可エンドポイント
         * @param {string} [responseType]
         * @param {string} [clientId]
         * @param {string} [redirectUri]
         * @param {string} [scope]
         * @param {string} [state]
         * @param {string} [codeChallenge]
         * @param {string} [codeChallengeMethod]
         * @param {string} [nonce]
         * @param {string} [prompt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options = {}) {
            const localVarPath = `/oauth2/authorize`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }
            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }
            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (codeChallenge !== undefined) {
                localVarQueryParameter['code_challenge'] = codeChallenge;
            }
            if (codeChallengeMethod !== undefined) {
                localVarQueryParameter['code_challenge_method'] = codeChallengeMethod;
            }
            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }
            if (prompt !== undefined) {
                localVarQueryParameter['prompt'] = prompt;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 認可エンドポイント
         * @param {string} [responseType]
         * @param {string} [clientId]
         * @param {string} [redirectUri]
         * @param {string} [scope]
         * @param {string} [state]
         * @param {string} [codeChallenge]
         * @param {string} [codeChallengeMethod]
         * @param {string} [nonce]
         * @param {string} [prompt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options = {}) {
            const localVarPath = `/oauth2/authorize`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (responseType !== undefined) {
                localVarFormParams.set('response_type', responseType);
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (redirectUri !== undefined) {
                localVarFormParams.set('redirect_uri', redirectUri);
            }
            if (scope !== undefined) {
                localVarFormParams.set('scope', scope);
            }
            if (state !== undefined) {
                localVarFormParams.set('state', state);
            }
            if (codeChallenge !== undefined) {
                localVarFormParams.set('code_challenge', codeChallenge);
            }
            if (codeChallengeMethod !== undefined) {
                localVarFormParams.set('code_challenge_method', codeChallengeMethod);
            }
            if (nonce !== undefined) {
                localVarFormParams.set('nonce', nonce);
            }
            if (prompt !== undefined) {
                localVarFormParams.set('prompt', prompt);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * OAuth2 トークンエンドポイント
         * @param {string} grantType
         * @param {string} [code]
         * @param {string} [redirectUri]
         * @param {string} [clientId]
         * @param {string} [codeVerifier]
         * @param {string} [username]
         * @param {string} [password]
         * @param {string} [scope]
         * @param {string} [refreshToken]
         * @param {string} [clientSecret]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options = {}) {
            // verify required parameter 'grantType' is not null or undefined
            if (grantType === null || grantType === undefined) {
                throw new base_1.RequiredError('grantType', 'Required parameter grantType was null or undefined when calling oauth2TokenPost.');
            }
            const localVarPath = `/oauth2/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new URLSearchParams();
            if (grantType !== undefined) {
                localVarFormParams.set('grant_type', grantType);
            }
            if (code !== undefined) {
                localVarFormParams.set('code', code);
            }
            if (redirectUri !== undefined) {
                localVarFormParams.set('redirect_uri', redirectUri);
            }
            if (clientId !== undefined) {
                localVarFormParams.set('client_id', clientId);
            }
            if (codeVerifier !== undefined) {
                localVarFormParams.set('code_verifier', codeVerifier);
            }
            if (username !== undefined) {
                localVarFormParams.set('username', username);
            }
            if (password !== undefined) {
                localVarFormParams.set('password', password);
            }
            if (scope !== undefined) {
                localVarFormParams.set('scope', scope);
            }
            if (refreshToken !== undefined) {
                localVarFormParams.set('refresh_token', refreshToken);
            }
            if (clientSecret !== undefined) {
                localVarFormParams.set('client_secret', clientSecret);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams.toString();
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AuthorizationApi - functional programming interface
 * @export
 */
exports.AuthorizationApiFp = function (configuration) {
    return {
        /**
         * OAuth2 認可承諾
         * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeDecidePost(submit, options) {
            const localVarAxiosArgs = exports.AuthorizationApiAxiosParamCreator(configuration).oauth2AuthorizeDecidePost(submit, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OAuth2 認可エンドポイント
         * @param {string} [responseType]
         * @param {string} [clientId]
         * @param {string} [redirectUri]
         * @param {string} [scope]
         * @param {string} [state]
         * @param {string} [codeChallenge]
         * @param {string} [codeChallengeMethod]
         * @param {string} [nonce]
         * @param {string} [prompt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
            const localVarAxiosArgs = exports.AuthorizationApiAxiosParamCreator(configuration).oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OAuth2 認可エンドポイント
         * @param {string} [responseType]
         * @param {string} [clientId]
         * @param {string} [redirectUri]
         * @param {string} [scope]
         * @param {string} [state]
         * @param {string} [codeChallenge]
         * @param {string} [codeChallengeMethod]
         * @param {string} [nonce]
         * @param {string} [prompt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
            const localVarAxiosArgs = exports.AuthorizationApiAxiosParamCreator(configuration).oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OAuth2 トークンエンドポイント
         * @param {string} grantType
         * @param {string} [code]
         * @param {string} [redirectUri]
         * @param {string} [clientId]
         * @param {string} [codeVerifier]
         * @param {string} [username]
         * @param {string} [password]
         * @param {string} [scope]
         * @param {string} [refreshToken]
         * @param {string} [clientSecret]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options) {
            const localVarAxiosArgs = exports.AuthorizationApiAxiosParamCreator(configuration).oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * AuthorizationApi - factory interface
 * @export
 */
exports.AuthorizationApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * OAuth2 認可承諾
         * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeDecidePost(submit, options) {
            return exports.AuthorizationApiFp(configuration).oauth2AuthorizeDecidePost(submit, options)(axios, basePath);
        },
        /**
         * OAuth2 認可エンドポイント
         * @param {string} [responseType]
         * @param {string} [clientId]
         * @param {string} [redirectUri]
         * @param {string} [scope]
         * @param {string} [state]
         * @param {string} [codeChallenge]
         * @param {string} [codeChallengeMethod]
         * @param {string} [nonce]
         * @param {string} [prompt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
            return exports.AuthorizationApiFp(configuration).oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options)(axios, basePath);
        },
        /**
         * OAuth2 認可エンドポイント
         * @param {string} [responseType]
         * @param {string} [clientId]
         * @param {string} [redirectUri]
         * @param {string} [scope]
         * @param {string} [state]
         * @param {string} [codeChallenge]
         * @param {string} [codeChallengeMethod]
         * @param {string} [nonce]
         * @param {string} [prompt]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
            return exports.AuthorizationApiFp(configuration).oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options)(axios, basePath);
        },
        /**
         * OAuth2 トークンエンドポイント
         * @param {string} grantType
         * @param {string} [code]
         * @param {string} [redirectUri]
         * @param {string} [clientId]
         * @param {string} [codeVerifier]
         * @param {string} [username]
         * @param {string} [password]
         * @param {string} [scope]
         * @param {string} [refreshToken]
         * @param {string} [clientSecret]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options) {
            return exports.AuthorizationApiFp(configuration).oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options)(axios, basePath);
        },
    };
};
/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
class AuthorizationApi extends base_1.BaseAPI {
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeDecidePost(submit, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2AuthorizeDecidePost(submit, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options)(this.axios, this.basePath);
    }
}
exports.AuthorizationApi = AuthorizationApi;
/**
 * BotApi - axios parameter creator
 * @export
 */
exports.BotApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Botが参加しているチャンネルのUUIDの配列を取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDChannelsGet(botID, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDChannelsGet.');
            }
            const localVarPath = `/bots/{botID}/channels`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botを削除します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDDelete(botID, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDDelete.');
            }
            const localVarPath = `/bots/{botID}`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botの詳細を取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDDetailGet(botID, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDDetailGet.');
            }
            const localVarPath = `/bots/{botID}/detail`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botの購読イベントを変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject35} [inlineObject35]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDEventsPut(botID, inlineObject35, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDEventsPut.');
            }
            const localVarPath = `/bots/{botID}/events`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject35" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject35 !== undefined ? inlineObject35 : {}) : (inlineObject35 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botを取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDGet(botID, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDGet.');
            }
            const localVarPath = `/bots/{botID}`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したBotのアイコンを取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDIconGet(botID, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDIconGet.');
            }
            const localVarPath = `/bots/{botID}/icon`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したBotのアイコンを変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDIconPut(botID, file, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDIconPut.');
            }
            const localVarPath = `/bots/{botID}/icon`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Bot情報を変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject34} [inlineObject34]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDPatch(botID, inlineObject34, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDPatch.');
            }
            const localVarPath = `/bots/{botID}`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject34" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject34 !== undefined ? inlineObject34 : {}) : (inlineObject34 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botの各種トークンを再発行します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDReissuePost(botID, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDReissuePost.');
            }
            const localVarPath = `/bots/{botID}/reissue`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botの状態を変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject36} [inlineObject36]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDStatePut(botID, inlineObject36, options = {}) {
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling botsBotIDStatePut.');
            }
            const localVarPath = `/bots/{botID}/state`
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject36" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject36 !== undefined ? inlineObject36 : {}) : (inlineObject36 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分が作成したBotの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(options = {}) {
            const localVarPath = `/bots`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botを作成します。
         * @param {InlineObject33} [inlineObject33]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost(inlineObject33, options = {}) {
            const localVarPath = `/bots`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject33" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject33 !== undefined ? inlineObject33 : {}) : (inlineObject33 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Botをチャンネルから退出させます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsBotIDDelete(channelID, botID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDBotsBotIDDelete.');
            }
            // verify required parameter 'botID' is not null or undefined
            if (botID === null || botID === undefined) {
                throw new base_1.RequiredError('botID', 'Required parameter botID was null or undefined when calling channelsChannelIDBotsBotIDDelete.');
            }
            const localVarPath = `/channels/{channelID}/bots/{botID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)))
                .replace(`{${"botID"}}`, encodeURIComponent(String(botID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルに参加しているBot一覧を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsGet(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDBotsGet.');
            }
            const localVarPath = `/channels/{channelID}/bots`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルにBotを参加させます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject21} [inlineObject21]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsPost(channelID, inlineObject21, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDBotsPost.');
            }
            const localVarPath = `/channels/{channelID}/bots`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject21" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject21 !== undefined ? inlineObject21 : {}) : (inlineObject21 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BotApi - functional programming interface
 * @export
 */
exports.BotApiFp = function (configuration) {
    return {
        /**
         * Botが参加しているチャンネルのUUIDの配列を取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDChannelsGet(botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDChannelsGet(botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botを削除します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDDelete(botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDDelete(botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botの詳細を取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDDetailGet(botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDDetailGet(botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botの購読イベントを変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject35} [inlineObject35]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDEventsPut(botID, inlineObject35, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDEventsPut(botID, inlineObject35, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botを取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDGet(botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDGet(botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したBotのアイコンを取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDIconGet(botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDIconGet(botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したBotのアイコンを変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDIconPut(botID, file, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDIconPut(botID, file, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Bot情報を変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject34} [inlineObject34]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDPatch(botID, inlineObject34, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDPatch(botID, inlineObject34, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botの各種トークンを再発行します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDReissuePost(botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDReissuePost(botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botの状態を変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject36} [inlineObject36]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDStatePut(botID, inlineObject36, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsBotIDStatePut(botID, inlineObject36, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分が作成したBotの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botを作成します。
         * @param {InlineObject33} [inlineObject33]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost(inlineObject33, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).botsPost(inlineObject33, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Botをチャンネルから退出させます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsBotIDDelete(channelID, botID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).channelsChannelIDBotsBotIDDelete(channelID, botID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルに参加しているBot一覧を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsGet(channelID, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).channelsChannelIDBotsGet(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルにBotを参加させます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject21} [inlineObject21]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsPost(channelID, inlineObject21, options) {
            const localVarAxiosArgs = exports.BotApiAxiosParamCreator(configuration).channelsChannelIDBotsPost(channelID, inlineObject21, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * BotApi - factory interface
 * @export
 */
exports.BotApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Botが参加しているチャンネルのUUIDの配列を取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDChannelsGet(botID, options) {
            return exports.BotApiFp(configuration).botsBotIDChannelsGet(botID, options)(axios, basePath);
        },
        /**
         * Botを削除します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDDelete(botID, options) {
            return exports.BotApiFp(configuration).botsBotIDDelete(botID, options)(axios, basePath);
        },
        /**
         * Botの詳細を取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDDetailGet(botID, options) {
            return exports.BotApiFp(configuration).botsBotIDDetailGet(botID, options)(axios, basePath);
        },
        /**
         * Botの購読イベントを変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject35} [inlineObject35]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDEventsPut(botID, inlineObject35, options) {
            return exports.BotApiFp(configuration).botsBotIDEventsPut(botID, inlineObject35, options)(axios, basePath);
        },
        /**
         * Botを取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDGet(botID, options) {
            return exports.BotApiFp(configuration).botsBotIDGet(botID, options)(axios, basePath);
        },
        /**
         * 指定したBotのアイコンを取得します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDIconGet(botID, options) {
            return exports.BotApiFp(configuration).botsBotIDIconGet(botID, options)(axios, basePath);
        },
        /**
         * 指定したBotのアイコンを変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDIconPut(botID, file, options) {
            return exports.BotApiFp(configuration).botsBotIDIconPut(botID, file, options)(axios, basePath);
        },
        /**
         * Bot情報を変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject34} [inlineObject34]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDPatch(botID, inlineObject34, options) {
            return exports.BotApiFp(configuration).botsBotIDPatch(botID, inlineObject34, options)(axios, basePath);
        },
        /**
         * Botの各種トークンを再発行します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDReissuePost(botID, options) {
            return exports.BotApiFp(configuration).botsBotIDReissuePost(botID, options)(axios, basePath);
        },
        /**
         * Botの状態を変更します。
         * @param {string} botID 操作の対象となるBotのID
         * @param {InlineObject36} [inlineObject36]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsBotIDStatePut(botID, inlineObject36, options) {
            return exports.BotApiFp(configuration).botsBotIDStatePut(botID, inlineObject36, options)(axios, basePath);
        },
        /**
         * 自分が作成したBotの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsGet(options) {
            return exports.BotApiFp(configuration).botsGet(options)(axios, basePath);
        },
        /**
         * Botを作成します。
         * @param {InlineObject33} [inlineObject33]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        botsPost(inlineObject33, options) {
            return exports.BotApiFp(configuration).botsPost(inlineObject33, options)(axios, basePath);
        },
        /**
         * Botをチャンネルから退出させます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {string} botID 操作の対象となるBotのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsBotIDDelete(channelID, botID, options) {
            return exports.BotApiFp(configuration).channelsChannelIDBotsBotIDDelete(channelID, botID, options)(axios, basePath);
        },
        /**
         * チャンネルに参加しているBot一覧を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsGet(channelID, options) {
            return exports.BotApiFp(configuration).channelsChannelIDBotsGet(channelID, options)(axios, basePath);
        },
        /**
         * チャンネルにBotを参加させます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject21} [inlineObject21]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDBotsPost(channelID, inlineObject21, options) {
            return exports.BotApiFp(configuration).channelsChannelIDBotsPost(channelID, inlineObject21, options)(axios, basePath);
        },
    };
};
/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
class BotApi extends base_1.BaseAPI {
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDChannelsGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDChannelsGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDelete(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDDelete(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDetailGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDDetailGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDEventsPut(botID, inlineObject35, options) {
        return exports.BotApiFp(this.configuration).botsBotIDEventsPut(botID, inlineObject35, options)(this.axios, this.basePath);
    }
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDIconGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconPut(botID, file, options) {
        return exports.BotApiFp(this.configuration).botsBotIDIconPut(botID, file, options)(this.axios, this.basePath);
    }
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDPatch(botID, inlineObject34, options) {
        return exports.BotApiFp(this.configuration).botsBotIDPatch(botID, inlineObject34, options)(this.axios, this.basePath);
    }
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDReissuePost(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDReissuePost(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDStatePut(botID, inlineObject36, options) {
        return exports.BotApiFp(this.configuration).botsBotIDStatePut(botID, inlineObject36, options)(this.axios, this.basePath);
    }
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsGet(options) {
        return exports.BotApiFp(this.configuration).botsGet(options)(this.axios, this.basePath);
    }
    /**
     * Botを作成します。
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsPost(inlineObject33, options) {
        return exports.BotApiFp(this.configuration).botsPost(inlineObject33, options)(this.axios, this.basePath);
    }
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsBotIDDelete(channelID, botID, options) {
        return exports.BotApiFp(this.configuration).channelsChannelIDBotsBotIDDelete(channelID, botID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsGet(channelID, options) {
        return exports.BotApiFp(this.configuration).channelsChannelIDBotsGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsPost(channelID, inlineObject21, options) {
        return exports.BotApiFp(this.configuration).channelsChannelIDBotsPost(channelID, inlineObject21, options)(this.axios, this.basePath);
    }
}
exports.BotApi = BotApi;
/**
 * ChannelApi - axios parameter creator
 * @export
 */
exports.ChannelApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 子チャンネルを作成します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject17} [inlineObject17]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDChildrenPost(channelID, inlineObject17, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDChildrenPost.');
            }
            const localVarPath = `/channels/{channelID}/children`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject17" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject17 !== undefined ? inlineObject17 : {}) : (inlineObject17 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルを削除します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDDelete(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDDelete.');
            }
            const localVarPath = `/channels/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルの情報を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDGet(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDGet.');
            }
            const localVarPath = `/channels/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルの親チャンネルを変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject16} [inlineObject16]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDParentPut(channelID, inlineObject16, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDParentPut.');
            }
            const localVarPath = `/channels/{channelID}/parent`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject16" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject16 !== undefined ? inlineObject16 : {}) : (inlineObject16 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルの情報を変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDPatch(channelID, inlineObject15, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDPatch.');
            }
            const localVarPath = `/channels/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject15" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject15 !== undefined ? inlineObject15 : {}) : (inlineObject15 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルの説明を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDTopicGet(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDTopicGet.');
            }
            const localVarPath = `/channels/{channelID}/topic`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルの説明を変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject18} [inlineObject18]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDTopicPut(channelID, inlineObject18, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDTopicPut.');
            }
            const localVarPath = `/channels/{channelID}/topic`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject18" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject18 !== undefined ? inlineObject18 : {}) : (inlineObject18 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * (すべての)チャンネルのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsGet(options = {}) {
            const localVarPath = `/channels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルを作成します。
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPost(inlineObject14, options = {}) {
            const localVarPath = `/channels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject14" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject14 !== undefined ? inlineObject14 : {}) : (inlineObject14 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
exports.ChannelApiFp = function (configuration) {
    return {
        /**
         * 子チャンネルを作成します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject17} [inlineObject17]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDChildrenPost(channelID, inlineObject17, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDChildrenPost(channelID, inlineObject17, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルを削除します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDDelete(channelID, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDDelete(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルの情報を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDGet(channelID, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDGet(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルの親チャンネルを変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject16} [inlineObject16]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDParentPut(channelID, inlineObject16, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDParentPut(channelID, inlineObject16, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルの情報を変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDPatch(channelID, inlineObject15, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDPatch(channelID, inlineObject15, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルの説明を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDTopicGet(channelID, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDTopicGet(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルの説明を変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject18} [inlineObject18]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDTopicPut(channelID, inlineObject18, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsChannelIDTopicPut(channelID, inlineObject18, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * (すべての)チャンネルのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsGet(options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルを作成します。
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPost(inlineObject14, options) {
            const localVarAxiosArgs = exports.ChannelApiAxiosParamCreator(configuration).channelsPost(inlineObject14, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ChannelApi - factory interface
 * @export
 */
exports.ChannelApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 子チャンネルを作成します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject17} [inlineObject17]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDChildrenPost(channelID, inlineObject17, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDChildrenPost(channelID, inlineObject17, options)(axios, basePath);
        },
        /**
         * チャンネルを削除します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDDelete(channelID, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDDelete(channelID, options)(axios, basePath);
        },
        /**
         * チャンネルの情報を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDGet(channelID, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDGet(channelID, options)(axios, basePath);
        },
        /**
         * チャンネルの親チャンネルを変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject16} [inlineObject16]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDParentPut(channelID, inlineObject16, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDParentPut(channelID, inlineObject16, options)(axios, basePath);
        },
        /**
         * チャンネルの情報を変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject15} [inlineObject15]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDPatch(channelID, inlineObject15, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDPatch(channelID, inlineObject15, options)(axios, basePath);
        },
        /**
         * チャンネルの説明を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDTopicGet(channelID, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDTopicGet(channelID, options)(axios, basePath);
        },
        /**
         * チャンネルの説明を変更します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject18} [inlineObject18]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDTopicPut(channelID, inlineObject18, options) {
            return exports.ChannelApiFp(configuration).channelsChannelIDTopicPut(channelID, inlineObject18, options)(axios, basePath);
        },
        /**
         * (すべての)チャンネルのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsGet(options) {
            return exports.ChannelApiFp(configuration).channelsGet(options)(axios, basePath);
        },
        /**
         * チャンネルを作成します。
         * @param {InlineObject14} [inlineObject14]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsPost(inlineObject14, options) {
            return exports.ChannelApiFp(configuration).channelsPost(inlineObject14, options)(axios, basePath);
        },
    };
};
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
class ChannelApi extends base_1.BaseAPI {
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDChildrenPost(channelID, inlineObject17, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDChildrenPost(channelID, inlineObject17, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDDelete(channelID, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDGet(channelID, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDParentPut(channelID, inlineObject16, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDParentPut(channelID, inlineObject16, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDPatch(channelID, inlineObject15, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDPatch(channelID, inlineObject15, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicGet(channelID, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDTopicGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicPut(channelID, inlineObject18, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDTopicPut(channelID, inlineObject18, options)(this.axios, this.basePath);
    }
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsGet(options) {
        return exports.ChannelApiFp(this.configuration).channelsGet(options)(this.axios, this.basePath);
    }
    /**
     * チャンネルを作成します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsPost(inlineObject14, options) {
        return exports.ChannelApiFp(this.configuration).channelsPost(inlineObject14, options)(this.axios, this.basePath);
    }
}
exports.ChannelApi = ChannelApi;
/**
 * ClientApi - axios parameter creator
 * @export
 */
exports.ClientApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDDelete(clientID, options = {}) {
            // verify required parameter 'clientID' is not null or undefined
            if (clientID === null || clientID === undefined) {
                throw new base_1.RequiredError('clientID', 'Required parameter clientID was null or undefined when calling clientsClientIDDelete.');
            }
            const localVarPath = `/clients/{clientID}`
                .replace(`{${"clientID"}}`, encodeURIComponent(String(clientID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クライアントの詳細を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDDetailGet(options = {}) {
            const localVarPath = `/clients/{clientID}/detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したクライアントIDのクライアントの情報を取得します。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDGet(clientID, options = {}) {
            // verify required parameter 'clientID' is not null or undefined
            if (clientID === null || clientID === undefined) {
                throw new base_1.RequiredError('clientID', 'Required parameter clientID was null or undefined when calling clientsClientIDGet.');
            }
            const localVarPath = `/clients/{clientID}`
                .replace(`{${"clientID"}}`, encodeURIComponent(String(clientID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したクライアントIDのクライアントの情報を変更します。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDPatch(clientID, inlineObject32, options = {}) {
            // verify required parameter 'clientID' is not null or undefined
            if (clientID === null || clientID === undefined) {
                throw new base_1.RequiredError('clientID', 'Required parameter clientID was null or undefined when calling clientsClientIDPatch.');
            }
            const localVarPath = `/clients/{clientID}`
                .replace(`{${"clientID"}}`, encodeURIComponent(String(clientID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject32" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject32 !== undefined ? inlineObject32 : {}) : (inlineObject32 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分が登録しているクライアントの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGet(options = {}) {
            const localVarPath = `/clients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クライアントを登録します。
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsPost(inlineObject31, options = {}) {
            const localVarPath = `/clients`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject31" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject31 !== undefined ? inlineObject31 : {}) : (inlineObject31 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分が許可しているクライアントの一覧とトークン情報を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeTokensGet(options = {}) {
            const localVarPath = `/users/me/tokens`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したトークンの認可を取り消します。
         * @param {string} oauth2TokenID 操作の対象となるTokenのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options = {}) {
            // verify required parameter 'oauth2TokenID' is not null or undefined
            if (oauth2TokenID === null || oauth2TokenID === undefined) {
                throw new base_1.RequiredError('oauth2TokenID', 'Required parameter oauth2TokenID was null or undefined when calling usersMeTokensOauth2TokenIDDelete.');
            }
            const localVarPath = `/users/me/tokens/{oauth2TokenID}`
                .replace(`{${"oauth2TokenID"}}`, encodeURIComponent(String(oauth2TokenID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ClientApi - functional programming interface
 * @export
 */
exports.ClientApiFp = function (configuration) {
    return {
        /**
         * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDDelete(clientID, options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).clientsClientIDDelete(clientID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * クライアントの詳細を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDDetailGet(options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).clientsClientIDDetailGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したクライアントIDのクライアントの情報を取得します。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDGet(clientID, options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).clientsClientIDGet(clientID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したクライアントIDのクライアントの情報を変更します。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDPatch(clientID, inlineObject32, options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).clientsClientIDPatch(clientID, inlineObject32, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分が登録しているクライアントの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGet(options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).clientsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * クライアントを登録します。
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsPost(inlineObject31, options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).clientsPost(inlineObject31, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分が許可しているクライアントの一覧とトークン情報を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeTokensGet(options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).usersMeTokensGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したトークンの認可を取り消します。
         * @param {string} oauth2TokenID 操作の対象となるTokenのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options) {
            const localVarAxiosArgs = exports.ClientApiAxiosParamCreator(configuration).usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ClientApi - factory interface
 * @export
 */
exports.ClientApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDDelete(clientID, options) {
            return exports.ClientApiFp(configuration).clientsClientIDDelete(clientID, options)(axios, basePath);
        },
        /**
         * クライアントの詳細を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDDetailGet(options) {
            return exports.ClientApiFp(configuration).clientsClientIDDetailGet(options)(axios, basePath);
        },
        /**
         * 指定したクライアントIDのクライアントの情報を取得します。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDGet(clientID, options) {
            return exports.ClientApiFp(configuration).clientsClientIDGet(clientID, options)(axios, basePath);
        },
        /**
         * 指定したクライアントIDのクライアントの情報を変更します。
         * @param {string} clientID 操作の対象となるclientのID
         * @param {InlineObject32} [inlineObject32]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsClientIDPatch(clientID, inlineObject32, options) {
            return exports.ClientApiFp(configuration).clientsClientIDPatch(clientID, inlineObject32, options)(axios, basePath);
        },
        /**
         * 自分が登録しているクライアントの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsGet(options) {
            return exports.ClientApiFp(configuration).clientsGet(options)(axios, basePath);
        },
        /**
         * クライアントを登録します。
         * @param {InlineObject31} [inlineObject31]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clientsPost(inlineObject31, options) {
            return exports.ClientApiFp(configuration).clientsPost(inlineObject31, options)(axios, basePath);
        },
        /**
         * 自分が許可しているクライアントの一覧とトークン情報を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeTokensGet(options) {
            return exports.ClientApiFp(configuration).usersMeTokensGet(options)(axios, basePath);
        },
        /**
         * 指定したトークンの認可を取り消します。
         * @param {string} oauth2TokenID 操作の対象となるTokenのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options) {
            return exports.ClientApiFp(configuration).usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options)(axios, basePath);
        },
    };
};
/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
class ClientApi extends base_1.BaseAPI {
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDelete(clientID, options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDDelete(clientID, options)(this.axios, this.basePath);
    }
    /**
     * クライアントの詳細を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDetailGet(options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDDetailGet(options)(this.axios, this.basePath);
    }
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDGet(clientID, options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDGet(clientID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDPatch(clientID, inlineObject32, options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDPatch(clientID, inlineObject32, options)(this.axios, this.basePath);
    }
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsGet(options) {
        return exports.ClientApiFp(this.configuration).clientsGet(options)(this.axios, this.basePath);
    }
    /**
     * クライアントを登録します。
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsPost(inlineObject31, options) {
        return exports.ClientApiFp(this.configuration).clientsPost(inlineObject31, options)(this.axios, this.basePath);
    }
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensGet(options) {
        return exports.ClientApiFp(this.configuration).usersMeTokensGet(options)(this.axios, this.basePath);
    }
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options) {
        return exports.ClientApiFp(this.configuration).usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options)(this.axios, this.basePath);
    }
}
exports.ClientApi = ClientApi;
/**
 * ClipApi - axios parameter creator
 * @export
 */
exports.ClipApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定したクリップを削除します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDDelete(clipID, options = {}) {
            // verify required parameter 'clipID' is not null or undefined
            if (clipID === null || clipID === undefined) {
                throw new base_1.RequiredError('clipID', 'Required parameter clipID was null or undefined when calling usersMeClipsClipIDDelete.');
            }
            const localVarPath = `/users/me/clips/{clipID}`
                .replace(`{${"clipID"}}`, encodeURIComponent(String(clipID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したクリップのフォルダ情報を取得します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDFolderGet(clipID, options = {}) {
            // verify required parameter 'clipID' is not null or undefined
            if (clipID === null || clipID === undefined) {
                throw new base_1.RequiredError('clipID', 'Required parameter clipID was null or undefined when calling usersMeClipsClipIDFolderGet.');
            }
            const localVarPath = `/users/me/clips/{clipID}/folder`
                .replace(`{${"clipID"}}`, encodeURIComponent(String(clipID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したクリップのフォルダを変更します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {InlineObject8} [inlineObject8]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDFolderPut(clipID, inlineObject8, options = {}) {
            // verify required parameter 'clipID' is not null or undefined
            if (clipID === null || clipID === undefined) {
                throw new base_1.RequiredError('clipID', 'Required parameter clipID was null or undefined when calling usersMeClipsClipIDFolderPut.');
            }
            const localVarPath = `/users/me/clips/{clipID}/folder`
                .replace(`{${"clipID"}}`, encodeURIComponent(String(clipID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject8" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject8 !== undefined ? inlineObject8 : {}) : (inlineObject8 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したクリップのメッセージを取得します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDGet(clipID, options = {}) {
            // verify required parameter 'clipID' is not null or undefined
            if (clipID === null || clipID === undefined) {
                throw new base_1.RequiredError('clipID', 'Required parameter clipID was null or undefined when calling usersMeClipsClipIDGet.');
            }
            const localVarPath = `/users/me/clips/{clipID}`
                .replace(`{${"clipID"}}`, encodeURIComponent(String(clipID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDDelete(folderID, options = {}) {
            // verify required parameter 'folderID' is not null or undefined
            if (folderID === null || folderID === undefined) {
                throw new base_1.RequiredError('folderID', 'Required parameter folderID was null or undefined when calling usersMeClipsFoldersFolderIDDelete.');
            }
            const localVarPath = `/users/me/clips/folders/{folderID}`
                .replace(`{${"folderID"}}`, encodeURIComponent(String(folderID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * フォルダ内のクリップ一覧を取得します。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDGet(folderID, options = {}) {
            // verify required parameter 'folderID' is not null or undefined
            if (folderID === null || folderID === undefined) {
                throw new base_1.RequiredError('folderID', 'Required parameter folderID was null or undefined when calling usersMeClipsFoldersFolderIDGet.');
            }
            const localVarPath = `/users/me/clips/folders/{folderID}`
                .replace(`{${"folderID"}}`, encodeURIComponent(String(folderID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クリップフォルダ名を変更します。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {InlineObject10} [inlineObject10]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options = {}) {
            // verify required parameter 'folderID' is not null or undefined
            if (folderID === null || folderID === undefined) {
                throw new base_1.RequiredError('folderID', 'Required parameter folderID was null or undefined when calling usersMeClipsFoldersFolderIDPatch.');
            }
            const localVarPath = `/users/me/clips/folders/{folderID}`
                .replace(`{${"folderID"}}`, encodeURIComponent(String(folderID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject10" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject10 !== undefined ? inlineObject10 : {}) : (inlineObject10 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クリップフォルダ一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersGet(options = {}) {
            const localVarPath = `/users/me/clips/folders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * クリップフォルダを作成します。
         * @param {InlineObject9} [inlineObject9]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersPost(inlineObject9, options = {}) {
            const localVarPath = `/users/me/clips/folders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject9" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject9 !== undefined ? inlineObject9 : {}) : (inlineObject9 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全てのクリップを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsGet(options = {}) {
            const localVarPath = `/users/me/clips`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新しくメッセージをクリップします。
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsPost(inlineObject7, options = {}) {
            const localVarPath = `/users/me/clips`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject7" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {}) : (inlineObject7 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ClipApi - functional programming interface
 * @export
 */
exports.ClipApiFp = function (configuration) {
    return {
        /**
         * 指定したクリップを削除します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDDelete(clipID, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsClipIDDelete(clipID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したクリップのフォルダ情報を取得します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDFolderGet(clipID, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsClipIDFolderGet(clipID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したクリップのフォルダを変更します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {InlineObject8} [inlineObject8]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDFolderPut(clipID, inlineObject8, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsClipIDFolderPut(clipID, inlineObject8, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したクリップのメッセージを取得します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDGet(clipID, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsClipIDGet(clipID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDDelete(folderID, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsFoldersFolderIDDelete(folderID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * フォルダ内のクリップ一覧を取得します。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDGet(folderID, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsFoldersFolderIDGet(folderID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * クリップフォルダ名を変更します。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {InlineObject10} [inlineObject10]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * クリップフォルダ一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersGet(options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsFoldersGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * クリップフォルダを作成します。
         * @param {InlineObject9} [inlineObject9]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersPost(inlineObject9, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsFoldersPost(inlineObject9, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 全てのクリップを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsGet(options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 新しくメッセージをクリップします。
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsPost(inlineObject7, options) {
            const localVarAxiosArgs = exports.ClipApiAxiosParamCreator(configuration).usersMeClipsPost(inlineObject7, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ClipApi - factory interface
 * @export
 */
exports.ClipApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定したクリップを削除します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDDelete(clipID, options) {
            return exports.ClipApiFp(configuration).usersMeClipsClipIDDelete(clipID, options)(axios, basePath);
        },
        /**
         * 指定したクリップのフォルダ情報を取得します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDFolderGet(clipID, options) {
            return exports.ClipApiFp(configuration).usersMeClipsClipIDFolderGet(clipID, options)(axios, basePath);
        },
        /**
         * 指定したクリップのフォルダを変更します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {InlineObject8} [inlineObject8]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDFolderPut(clipID, inlineObject8, options) {
            return exports.ClipApiFp(configuration).usersMeClipsClipIDFolderPut(clipID, inlineObject8, options)(axios, basePath);
        },
        /**
         * 指定したクリップのメッセージを取得します。
         * @param {string} clipID 捜査の対象となるクリップのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsClipIDGet(clipID, options) {
            return exports.ClipApiFp(configuration).usersMeClipsClipIDGet(clipID, options)(axios, basePath);
        },
        /**
         * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDDelete(folderID, options) {
            return exports.ClipApiFp(configuration).usersMeClipsFoldersFolderIDDelete(folderID, options)(axios, basePath);
        },
        /**
         * フォルダ内のクリップ一覧を取得します。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDGet(folderID, options) {
            return exports.ClipApiFp(configuration).usersMeClipsFoldersFolderIDGet(folderID, options)(axios, basePath);
        },
        /**
         * クリップフォルダ名を変更します。
         * @param {string} folderID 操作の対象となるクリップフォルダのID
         * @param {InlineObject10} [inlineObject10]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options) {
            return exports.ClipApiFp(configuration).usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options)(axios, basePath);
        },
        /**
         * クリップフォルダ一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersGet(options) {
            return exports.ClipApiFp(configuration).usersMeClipsFoldersGet(options)(axios, basePath);
        },
        /**
         * クリップフォルダを作成します。
         * @param {InlineObject9} [inlineObject9]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsFoldersPost(inlineObject9, options) {
            return exports.ClipApiFp(configuration).usersMeClipsFoldersPost(inlineObject9, options)(axios, basePath);
        },
        /**
         * 全てのクリップを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsGet(options) {
            return exports.ClipApiFp(configuration).usersMeClipsGet(options)(axios, basePath);
        },
        /**
         * 新しくメッセージをクリップします。
         * @param {InlineObject7} [inlineObject7]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeClipsPost(inlineObject7, options) {
            return exports.ClipApiFp(configuration).usersMeClipsPost(inlineObject7, options)(axios, basePath);
        },
    };
};
/**
 * ClipApi - object-oriented interface
 * @export
 * @class ClipApi
 * @extends {BaseAPI}
 */
class ClipApi extends base_1.BaseAPI {
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDDelete(clipID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDDelete(clipID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderGet(clipID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDFolderGet(clipID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderPut(clipID, inlineObject8, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDFolderPut(clipID, inlineObject8, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDGet(clipID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDGet(clipID, options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDDelete(folderID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersFolderIDDelete(folderID, options)(this.axios, this.basePath);
    }
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDGet(folderID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersFolderIDGet(folderID, options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersGet(options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersGet(options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersPost(inlineObject9, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersPost(inlineObject9, options)(this.axios, this.basePath);
    }
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsGet(options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsGet(options)(this.axios, this.basePath);
    }
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsPost(inlineObject7, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsPost(inlineObject7, options)(this.axios, this.basePath);
    }
}
exports.ClipApi = ClipApi;
/**
 * FileApi - axios parameter creator
 * @export
 */
exports.FileApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定したファイルを削除します。
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDDelete(fileID, options = {}) {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling filesFileIDDelete.');
            }
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したファイルの中身を取得します。
         * @param {string} fileID 操作の対象となるファイルID
         * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDGet(fileID, dl, options = {}) {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling filesFileIDGet.');
            }
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (dl !== undefined) {
                localVarQueryParameter['dl'] = dl;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したファイルのメタデータを取得します
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDMetaGet(fileID, options = {}) {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling filesFileIDMetaGet.');
            }
            const localVarPath = `/files/{fileID}/meta`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したファイルのサムネイルを取得します
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDThumbnailGet(fileID, options = {}) {
            // verify required parameter 'fileID' is not null or undefined
            if (fileID === null || fileID === undefined) {
                throw new base_1.RequiredError('fileID', 'Required parameter fileID was null or undefined when calling filesFileIDThumbnailGet.');
            }
            const localVarPath = `/files/{fileID}/thumbnail`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ファイルをアップロードします
         * @param {any} file ファイル本体
         * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(file, aclReadable, options = {}) {
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new base_1.RequiredError('file', 'Required parameter file was null or undefined when calling filesPost.');
            }
            const localVarPath = `/files`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            if (aclReadable !== undefined) {
                localVarFormParams.append('acl_readable', aclReadable);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * FileApi - functional programming interface
 * @export
 */
exports.FileApiFp = function (configuration) {
    return {
        /**
         * 指定したファイルを削除します。
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDDelete(fileID, options) {
            const localVarAxiosArgs = exports.FileApiAxiosParamCreator(configuration).filesFileIDDelete(fileID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したファイルの中身を取得します。
         * @param {string} fileID 操作の対象となるファイルID
         * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDGet(fileID, dl, options) {
            const localVarAxiosArgs = exports.FileApiAxiosParamCreator(configuration).filesFileIDGet(fileID, dl, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したファイルのメタデータを取得します
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDMetaGet(fileID, options) {
            const localVarAxiosArgs = exports.FileApiAxiosParamCreator(configuration).filesFileIDMetaGet(fileID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したファイルのサムネイルを取得します
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDThumbnailGet(fileID, options) {
            const localVarAxiosArgs = exports.FileApiAxiosParamCreator(configuration).filesFileIDThumbnailGet(fileID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ファイルをアップロードします
         * @param {any} file ファイル本体
         * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(file, aclReadable, options) {
            const localVarAxiosArgs = exports.FileApiAxiosParamCreator(configuration).filesPost(file, aclReadable, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * FileApi - factory interface
 * @export
 */
exports.FileApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定したファイルを削除します。
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDDelete(fileID, options) {
            return exports.FileApiFp(configuration).filesFileIDDelete(fileID, options)(axios, basePath);
        },
        /**
         * 指定したファイルの中身を取得します。
         * @param {string} fileID 操作の対象となるファイルID
         * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDGet(fileID, dl, options) {
            return exports.FileApiFp(configuration).filesFileIDGet(fileID, dl, options)(axios, basePath);
        },
        /**
         * 指定したファイルのメタデータを取得します
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDMetaGet(fileID, options) {
            return exports.FileApiFp(configuration).filesFileIDMetaGet(fileID, options)(axios, basePath);
        },
        /**
         * 指定したファイルのサムネイルを取得します
         * @param {string} fileID 操作の対象となるファイルID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDThumbnailGet(fileID, options) {
            return exports.FileApiFp(configuration).filesFileIDThumbnailGet(fileID, options)(axios, basePath);
        },
        /**
         * ファイルをアップロードします
         * @param {any} file ファイル本体
         * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(file, aclReadable, options) {
            return exports.FileApiFp(configuration).filesPost(file, aclReadable, options)(axios, basePath);
        },
    };
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
class FileApi extends base_1.BaseAPI {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDDelete(fileID, options) {
        return exports.FileApiFp(this.configuration).filesFileIDDelete(fileID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDGet(fileID, dl, options) {
        return exports.FileApiFp(this.configuration).filesFileIDGet(fileID, dl, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDMetaGet(fileID, options) {
        return exports.FileApiFp(this.configuration).filesFileIDMetaGet(fileID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDThumbnailGet(fileID, options) {
        return exports.FileApiFp(this.configuration).filesFileIDThumbnailGet(fileID, options)(this.axios, this.basePath);
    }
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesPost(file, aclReadable, options) {
        return exports.FileApiFp(this.configuration).filesPost(file, aclReadable, options)(this.axios, this.basePath);
    }
}
exports.FileApi = FileApi;
/**
 * HeartbeatApi - axios parameter creator
 * @export
 */
exports.HeartbeatApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * チャンネルを現在見ている人・編集している人を取得します。
         * @param {string} channelId 現在いるチャンネルId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeatGet(channelId, options = {}) {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError('channelId', 'Required parameter channelId was null or undefined when calling heartbeatGet.');
            }
            const localVarPath = `/heartbeat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channelId'] = channelId;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * どのチャンネルを見ているか・編集しているかを送信します。
         * @param {'none' | 'monitoring' | 'editing'} status editing,monitoring,noneでユーザーの状態を指定する
         * @param {string} channelId 現在いるチャンネルId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeatPost(status, channelId, options = {}) {
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new base_1.RequiredError('status', 'Required parameter status was null or undefined when calling heartbeatPost.');
            }
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new base_1.RequiredError('channelId', 'Required parameter channelId was null or undefined when calling heartbeatPost.');
            }
            const localVarPath = `/heartbeat`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }
            if (channelId !== undefined) {
                localVarQueryParameter['channelId'] = channelId;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * HeartbeatApi - functional programming interface
 * @export
 */
exports.HeartbeatApiFp = function (configuration) {
    return {
        /**
         * チャンネルを現在見ている人・編集している人を取得します。
         * @param {string} channelId 現在いるチャンネルId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeatGet(channelId, options) {
            const localVarAxiosArgs = exports.HeartbeatApiAxiosParamCreator(configuration).heartbeatGet(channelId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * どのチャンネルを見ているか・編集しているかを送信します。
         * @param {'none' | 'monitoring' | 'editing'} status editing,monitoring,noneでユーザーの状態を指定する
         * @param {string} channelId 現在いるチャンネルId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeatPost(status, channelId, options) {
            const localVarAxiosArgs = exports.HeartbeatApiAxiosParamCreator(configuration).heartbeatPost(status, channelId, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * HeartbeatApi - factory interface
 * @export
 */
exports.HeartbeatApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * チャンネルを現在見ている人・編集している人を取得します。
         * @param {string} channelId 現在いるチャンネルId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeatGet(channelId, options) {
            return exports.HeartbeatApiFp(configuration).heartbeatGet(channelId, options)(axios, basePath);
        },
        /**
         * どのチャンネルを見ているか・編集しているかを送信します。
         * @param {'none' | 'monitoring' | 'editing'} status editing,monitoring,noneでユーザーの状態を指定する
         * @param {string} channelId 現在いるチャンネルId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        heartbeatPost(status, channelId, options) {
            return exports.HeartbeatApiFp(configuration).heartbeatPost(status, channelId, options)(axios, basePath);
        },
    };
};
/**
 * HeartbeatApi - object-oriented interface
 * @export
 * @class HeartbeatApi
 * @extends {BaseAPI}
 */
class HeartbeatApi extends base_1.BaseAPI {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatGet(channelId, options) {
        return exports.HeartbeatApiFp(this.configuration).heartbeatGet(channelId, options)(this.axios, this.basePath);
    }
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {'none' | 'monitoring' | 'editing'} status editing,monitoring,noneでユーザーの状態を指定する
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatPost(status, channelId, options) {
        return exports.HeartbeatApiFp(this.configuration).heartbeatPost(status, channelId, options)(this.axios, this.basePath);
    }
}
exports.HeartbeatApi = HeartbeatApi;
/**
 * MessageApi - axios parameter creator
 * @export
 */
exports.MessageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * チャンネルに存在するメッセージを取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {number} [limit] 取得する件数 1-200
         * @param {number} [offset] 取得するオフセット
         * @param {Date} [since] 取得する時間範囲の開始日時
         * @param {Date} [until] 取得する時間範囲の終了日時
         * @param {boolean} [inclusive] 範囲の端を含めるかどうか
         * @param {'asc' | 'desc'} [order] 昇順か降順か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDMessagesGet.');
            }
            const localVarPath = `/channels/{channelID}/messages`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['since'] = since.toISOString();
            }
            if (until !== undefined) {
                localVarQueryParameter['until'] = until.toISOString();
            }
            if (inclusive !== undefined) {
                localVarQueryParameter['inclusive'] = inclusive;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルにメッセージを投稿します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject19} [inlineObject19]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDMessagesPost(channelID, inlineObject19, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDMessagesPost.');
            }
            const localVarPath = `/channels/{channelID}/messages`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject19" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject19 !== undefined ? inlineObject19 : {}) : (inlineObject19 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したメッセージを削除します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDDelete(messageID, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDDelete.');
            }
            const localVarPath = `/messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したメッセージを取得します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDGet(messageID, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDGet.');
            }
            const localVarPath = `/messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したメッセージを編集します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {InlineObject23} [inlineObject23]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDPut(messageID, inlineObject23, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDPut.');
            }
            const localVarPath = `/messages/{messageID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject23" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject23 !== undefined ? inlineObject23 : {}) : (inlineObject23 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したメッセージを通報します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {InlineObject24} [inlineObject24]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDReportPost(messageID, inlineObject24, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDReportPost.');
            }
            const localVarPath = `/messages/{messageID}/report`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject24" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject24 !== undefined ? inlineObject24 : {}) : (inlineObject24 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * メッセージ通報を最大50件取得します。
         * @param {number} [p] ページ番号(ゼロオリジン)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesReportsGet(p, options = {}) {
            const localVarPath = `/messages/reports`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            if (p !== undefined) {
                localVarQueryParameter['p'] = p;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DMチャンネルに存在するメッセージを取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {number} [limit] 取得する件数 1-200
         * @param {number} [offset] 取得するオフセット
         * @param {Date} [since] 取得する時間範囲の開始日時
         * @param {Date} [until] 取得する時間範囲の終了日時
         * @param {boolean} [inclusive] 範囲の端を含めるかどうか
         * @param {'asc' | 'desc'} [order] 昇順か降順か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDMessagesGet.');
            }
            const localVarPath = `/users/{userID}/messages`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }
            if (since !== undefined) {
                localVarQueryParameter['since'] = since.toISOString();
            }
            if (until !== undefined) {
                localVarQueryParameter['until'] = until.toISOString();
            }
            if (inclusive !== undefined) {
                localVarQueryParameter['inclusive'] = inclusive;
            }
            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * DMチャンネルにメッセージを投稿します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {InlineObject11} [inlineObject11]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDMessagesPost(userID, inlineObject11, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDMessagesPost.');
            }
            const localVarPath = `/users/{userID}/messages`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject11" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject11 !== undefined ? inlineObject11 : {}) : (inlineObject11 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MessageApi - functional programming interface
 * @export
 */
exports.MessageApiFp = function (configuration) {
    return {
        /**
         * チャンネルに存在するメッセージを取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {number} [limit] 取得する件数 1-200
         * @param {number} [offset] 取得するオフセット
         * @param {Date} [since] 取得する時間範囲の開始日時
         * @param {Date} [until] 取得する時間範囲の終了日時
         * @param {boolean} [inclusive] 範囲の端を含めるかどうか
         * @param {'asc' | 'desc'} [order] 昇順か降順か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルにメッセージを投稿します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject19} [inlineObject19]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDMessagesPost(channelID, inlineObject19, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).channelsChannelIDMessagesPost(channelID, inlineObject19, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したメッセージを削除します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDDelete(messageID, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).messagesMessageIDDelete(messageID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したメッセージを取得します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDGet(messageID, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).messagesMessageIDGet(messageID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したメッセージを編集します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {InlineObject23} [inlineObject23]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDPut(messageID, inlineObject23, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).messagesMessageIDPut(messageID, inlineObject23, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したメッセージを通報します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {InlineObject24} [inlineObject24]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDReportPost(messageID, inlineObject24, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).messagesMessageIDReportPost(messageID, inlineObject24, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * メッセージ通報を最大50件取得します。
         * @param {number} [p] ページ番号(ゼロオリジン)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesReportsGet(p, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).messagesReportsGet(p, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * DMチャンネルに存在するメッセージを取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {number} [limit] 取得する件数 1-200
         * @param {number} [offset] 取得するオフセット
         * @param {Date} [since] 取得する時間範囲の開始日時
         * @param {Date} [until] 取得する時間範囲の終了日時
         * @param {boolean} [inclusive] 範囲の端を含めるかどうか
         * @param {'asc' | 'desc'} [order] 昇順か降順か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * DMチャンネルにメッセージを投稿します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {InlineObject11} [inlineObject11]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDMessagesPost(userID, inlineObject11, options) {
            const localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).usersUserIDMessagesPost(userID, inlineObject11, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MessageApi - factory interface
 * @export
 */
exports.MessageApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * チャンネルに存在するメッセージを取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {number} [limit] 取得する件数 1-200
         * @param {number} [offset] 取得するオフセット
         * @param {Date} [since] 取得する時間範囲の開始日時
         * @param {Date} [until] 取得する時間範囲の終了日時
         * @param {boolean} [inclusive] 範囲の端を含めるかどうか
         * @param {'asc' | 'desc'} [order] 昇順か降順か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options) {
            return exports.MessageApiFp(configuration).channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options)(axios, basePath);
        },
        /**
         * チャンネルにメッセージを投稿します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject19} [inlineObject19]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDMessagesPost(channelID, inlineObject19, options) {
            return exports.MessageApiFp(configuration).channelsChannelIDMessagesPost(channelID, inlineObject19, options)(axios, basePath);
        },
        /**
         * 指定したメッセージを削除します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDDelete(messageID, options) {
            return exports.MessageApiFp(configuration).messagesMessageIDDelete(messageID, options)(axios, basePath);
        },
        /**
         * 指定したメッセージを取得します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDGet(messageID, options) {
            return exports.MessageApiFp(configuration).messagesMessageIDGet(messageID, options)(axios, basePath);
        },
        /**
         * 指定したメッセージを編集します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {InlineObject23} [inlineObject23]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDPut(messageID, inlineObject23, options) {
            return exports.MessageApiFp(configuration).messagesMessageIDPut(messageID, inlineObject23, options)(axios, basePath);
        },
        /**
         * 指定したメッセージを通報します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {InlineObject24} [inlineObject24]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDReportPost(messageID, inlineObject24, options) {
            return exports.MessageApiFp(configuration).messagesMessageIDReportPost(messageID, inlineObject24, options)(axios, basePath);
        },
        /**
         * メッセージ通報を最大50件取得します。
         * @param {number} [p] ページ番号(ゼロオリジン)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesReportsGet(p, options) {
            return exports.MessageApiFp(configuration).messagesReportsGet(p, options)(axios, basePath);
        },
        /**
         * DMチャンネルに存在するメッセージを取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {number} [limit] 取得する件数 1-200
         * @param {number} [offset] 取得するオフセット
         * @param {Date} [since] 取得する時間範囲の開始日時
         * @param {Date} [until] 取得する時間範囲の終了日時
         * @param {boolean} [inclusive] 範囲の端を含めるかどうか
         * @param {'asc' | 'desc'} [order] 昇順か降順か
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options) {
            return exports.MessageApiFp(configuration).usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options)(axios, basePath);
        },
        /**
         * DMチャンネルにメッセージを投稿します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {InlineObject11} [inlineObject11]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDMessagesPost(userID, inlineObject11, options) {
            return exports.MessageApiFp(configuration).usersUserIDMessagesPost(userID, inlineObject11, options)(axios, basePath);
        },
    };
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
class MessageApi extends base_1.BaseAPI {
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options) {
        return exports.MessageApiFp(this.configuration).channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesPost(channelID, inlineObject19, options) {
        return exports.MessageApiFp(this.configuration).channelsChannelIDMessagesPost(channelID, inlineObject19, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDDelete(messageID, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDDelete(messageID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDGet(messageID, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDGet(messageID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDPut(messageID, inlineObject23, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDPut(messageID, inlineObject23, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDReportPost(messageID, inlineObject24, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDReportPost(messageID, inlineObject24, options)(this.axios, this.basePath);
    }
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesReportsGet(p, options) {
        return exports.MessageApiFp(this.configuration).messagesReportsGet(p, options)(this.axios, this.basePath);
    }
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options) {
        return exports.MessageApiFp(this.configuration).usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options)(this.axios, this.basePath);
    }
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesPost(userID, inlineObject11, options) {
        return exports.MessageApiFp(this.configuration).usersUserIDMessagesPost(userID, inlineObject11, options)(this.axios, this.basePath);
    }
}
exports.MessageApi = MessageApi;
/**
 * MuteApi - axios parameter creator
 * @export
 */
exports.MuteApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteChannelIDDelete(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling usersMeMuteChannelIDDelete.');
            }
            const localVarPath = `/users/me/mute/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteChannelIDPost(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling usersMeMuteChannelIDPost.');
            }
            const localVarPath = `/users/me/mute/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ミュートしているチャンネルのIDの配列を返します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteGet(options = {}) {
            const localVarPath = `/users/me/mute`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MuteApi - functional programming interface
 * @export
 */
exports.MuteApiFp = function (configuration) {
    return {
        /**
         * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteChannelIDDelete(channelID, options) {
            const localVarAxiosArgs = exports.MuteApiAxiosParamCreator(configuration).usersMeMuteChannelIDDelete(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteChannelIDPost(channelID, options) {
            const localVarAxiosArgs = exports.MuteApiAxiosParamCreator(configuration).usersMeMuteChannelIDPost(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ミュートしているチャンネルのIDの配列を返します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteGet(options) {
            const localVarAxiosArgs = exports.MuteApiAxiosParamCreator(configuration).usersMeMuteGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MuteApi - factory interface
 * @export
 */
exports.MuteApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteChannelIDDelete(channelID, options) {
            return exports.MuteApiFp(configuration).usersMeMuteChannelIDDelete(channelID, options)(axios, basePath);
        },
        /**
         * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteChannelIDPost(channelID, options) {
            return exports.MuteApiFp(configuration).usersMeMuteChannelIDPost(channelID, options)(axios, basePath);
        },
        /**
         * ミュートしているチャンネルのIDの配列を返します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeMuteGet(options) {
            return exports.MuteApiFp(configuration).usersMeMuteGet(options)(axios, basePath);
        },
    };
};
/**
 * MuteApi - object-oriented interface
 * @export
 * @class MuteApi
 * @extends {BaseAPI}
 */
class MuteApi extends base_1.BaseAPI {
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDDelete(channelID, options) {
        return exports.MuteApiFp(this.configuration).usersMeMuteChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDPost(channelID, options) {
        return exports.MuteApiFp(this.configuration).usersMeMuteChannelIDPost(channelID, options)(this.axios, this.basePath);
    }
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteGet(options) {
        return exports.MuteApiFp(this.configuration).usersMeMuteGet(options)(this.axios, this.basePath);
    }
}
exports.MuteApi = MuteApi;
/**
 * NotificationApi - axios parameter creator
 * @export
 */
exports.NotificationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 通知を点けているユーザーのIDの配列を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDNotificationGet(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDNotificationGet.');
            }
            const localVarPath = `/channels/{channelID}/notification`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject20} [inlineObject20]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDNotificationPut(channelID, inlineObject20, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDNotificationPut.');
            }
            const localVarPath = `/channels/{channelID}/notification`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject20" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject20 !== undefined ? inlineObject20 : {}) : (inlineObject20 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FCMデバイスを登録します。
         * @param {InlineObject22} [inlineObject22]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationDevicePost(inlineObject22, options = {}) {
            const localVarPath = `/notification/device`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject22" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject22 !== undefined ? inlineObject22 : {}) : (inlineObject22 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 通知ストリーム(Server Sent Events)に接続します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationGet(options = {}) {
            const localVarPath = `/notification`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分が通知を入れているチャンネルのリストを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeNotificationGet(options = {}) {
            const localVarPath = `/users/me/notification`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーが通知を入れているチャンネルのリストを取得します
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDNotificationGet(userID, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDNotificationGet.');
            }
            const localVarPath = `/users/{userID}/notification`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
exports.NotificationApiFp = function (configuration) {
    return {
        /**
         * 通知を点けているユーザーのIDの配列を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDNotificationGet(channelID, options) {
            const localVarAxiosArgs = exports.NotificationApiAxiosParamCreator(configuration).channelsChannelIDNotificationGet(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject20} [inlineObject20]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDNotificationPut(channelID, inlineObject20, options) {
            const localVarAxiosArgs = exports.NotificationApiAxiosParamCreator(configuration).channelsChannelIDNotificationPut(channelID, inlineObject20, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * FCMデバイスを登録します。
         * @param {InlineObject22} [inlineObject22]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationDevicePost(inlineObject22, options) {
            const localVarAxiosArgs = exports.NotificationApiAxiosParamCreator(configuration).notificationDevicePost(inlineObject22, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 通知ストリーム(Server Sent Events)に接続します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationGet(options) {
            const localVarAxiosArgs = exports.NotificationApiAxiosParamCreator(configuration).notificationGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分が通知を入れているチャンネルのリストを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeNotificationGet(options) {
            const localVarAxiosArgs = exports.NotificationApiAxiosParamCreator(configuration).usersMeNotificationGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーが通知を入れているチャンネルのリストを取得します
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDNotificationGet(userID, options) {
            const localVarAxiosArgs = exports.NotificationApiAxiosParamCreator(configuration).usersUserIDNotificationGet(userID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * NotificationApi - factory interface
 * @export
 */
exports.NotificationApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 通知を点けているユーザーのIDの配列を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDNotificationGet(channelID, options) {
            return exports.NotificationApiFp(configuration).channelsChannelIDNotificationGet(channelID, options)(axios, basePath);
        },
        /**
         * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {InlineObject20} [inlineObject20]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDNotificationPut(channelID, inlineObject20, options) {
            return exports.NotificationApiFp(configuration).channelsChannelIDNotificationPut(channelID, inlineObject20, options)(axios, basePath);
        },
        /**
         * FCMデバイスを登録します。
         * @param {InlineObject22} [inlineObject22]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationDevicePost(inlineObject22, options) {
            return exports.NotificationApiFp(configuration).notificationDevicePost(inlineObject22, options)(axios, basePath);
        },
        /**
         * 通知ストリーム(Server Sent Events)に接続します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationGet(options) {
            return exports.NotificationApiFp(configuration).notificationGet(options)(axios, basePath);
        },
        /**
         * 自分が通知を入れているチャンネルのリストを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeNotificationGet(options) {
            return exports.NotificationApiFp(configuration).usersMeNotificationGet(options)(axios, basePath);
        },
        /**
         * ユーザーが通知を入れているチャンネルのリストを取得します
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDNotificationGet(userID, options) {
            return exports.NotificationApiFp(configuration).usersUserIDNotificationGet(userID, options)(axios, basePath);
        },
    };
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
class NotificationApi extends base_1.BaseAPI {
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationGet(channelID, options) {
        return exports.NotificationApiFp(this.configuration).channelsChannelIDNotificationGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationPut(channelID, inlineObject20, options) {
        return exports.NotificationApiFp(this.configuration).channelsChannelIDNotificationPut(channelID, inlineObject20, options)(this.axios, this.basePath);
    }
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationDevicePost(inlineObject22, options) {
        return exports.NotificationApiFp(this.configuration).notificationDevicePost(inlineObject22, options)(this.axios, this.basePath);
    }
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationGet(options) {
        return exports.NotificationApiFp(this.configuration).notificationGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersMeNotificationGet(options) {
        return exports.NotificationApiFp(this.configuration).usersMeNotificationGet(options)(this.axios, this.basePath);
    }
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersUserIDNotificationGet(userID, options) {
        return exports.NotificationApiFp(this.configuration).usersUserIDNotificationGet(userID, options)(this.axios, this.basePath);
    }
}
exports.NotificationApi = NotificationApi;
/**
 * PinApi - axios parameter creator
 * @export
 */
exports.PinApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * チャンネルのピン留め一覧を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDPinsGet(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling channelsChannelIDPinsGet.');
            }
            const localVarPath = `/channels/{channelID}/pins`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ピン留めを外します。
         * @param {string} pinID 操作の対象となるピン留めID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPinIDDelete(pinID, options = {}) {
            // verify required parameter 'pinID' is not null or undefined
            if (pinID === null || pinID === undefined) {
                throw new base_1.RequiredError('pinID', 'Required parameter pinID was null or undefined when calling pinsPinIDDelete.');
            }
            const localVarPath = `/pins/{pinID}`
                .replace(`{${"pinID"}}`, encodeURIComponent(String(pinID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ピン留めを取得します。
         * @param {string} pinID 操作の対象となるピン留めID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPinIDGet(pinID, options = {}) {
            // verify required parameter 'pinID' is not null or undefined
            if (pinID === null || pinID === undefined) {
                throw new base_1.RequiredError('pinID', 'Required parameter pinID was null or undefined when calling pinsPinIDGet.');
            }
            const localVarPath = `/pins/{pinID}`
                .replace(`{${"pinID"}}`, encodeURIComponent(String(pinID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * チャンネルにメッセージをピン留めします。
         * @param {InlineObject25} [inlineObject25]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPost(inlineObject25, options = {}) {
            const localVarPath = `/pins`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject25" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject25 !== undefined ? inlineObject25 : {}) : (inlineObject25 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PinApi - functional programming interface
 * @export
 */
exports.PinApiFp = function (configuration) {
    return {
        /**
         * チャンネルのピン留め一覧を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDPinsGet(channelID, options) {
            const localVarAxiosArgs = exports.PinApiAxiosParamCreator(configuration).channelsChannelIDPinsGet(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ピン留めを外します。
         * @param {string} pinID 操作の対象となるピン留めID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPinIDDelete(pinID, options) {
            const localVarAxiosArgs = exports.PinApiAxiosParamCreator(configuration).pinsPinIDDelete(pinID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ピン留めを取得します。
         * @param {string} pinID 操作の対象となるピン留めID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPinIDGet(pinID, options) {
            const localVarAxiosArgs = exports.PinApiAxiosParamCreator(configuration).pinsPinIDGet(pinID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * チャンネルにメッセージをピン留めします。
         * @param {InlineObject25} [inlineObject25]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPost(inlineObject25, options) {
            const localVarAxiosArgs = exports.PinApiAxiosParamCreator(configuration).pinsPost(inlineObject25, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PinApi - factory interface
 * @export
 */
exports.PinApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * チャンネルのピン留め一覧を取得します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        channelsChannelIDPinsGet(channelID, options) {
            return exports.PinApiFp(configuration).channelsChannelIDPinsGet(channelID, options)(axios, basePath);
        },
        /**
         * ピン留めを外します。
         * @param {string} pinID 操作の対象となるピン留めID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPinIDDelete(pinID, options) {
            return exports.PinApiFp(configuration).pinsPinIDDelete(pinID, options)(axios, basePath);
        },
        /**
         * ピン留めを取得します。
         * @param {string} pinID 操作の対象となるピン留めID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPinIDGet(pinID, options) {
            return exports.PinApiFp(configuration).pinsPinIDGet(pinID, options)(axios, basePath);
        },
        /**
         * チャンネルにメッセージをピン留めします。
         * @param {InlineObject25} [inlineObject25]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinsPost(inlineObject25, options) {
            return exports.PinApiFp(configuration).pinsPost(inlineObject25, options)(axios, basePath);
        },
    };
};
/**
 * PinApi - object-oriented interface
 * @export
 * @class PinApi
 * @extends {BaseAPI}
 */
class PinApi extends base_1.BaseAPI {
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    channelsChannelIDPinsGet(channelID, options) {
        return exports.PinApiFp(this.configuration).channelsChannelIDPinsGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDDelete(pinID, options) {
        return exports.PinApiFp(this.configuration).pinsPinIDDelete(pinID, options)(this.axios, this.basePath);
    }
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDGet(pinID, options) {
        return exports.PinApiFp(this.configuration).pinsPinIDGet(pinID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPost(inlineObject25, options) {
        return exports.PinApiFp(this.configuration).pinsPost(inlineObject25, options)(this.axios, this.basePath);
    }
}
exports.PinApi = PinApi;
/**
 * PublicApi - axios parameter creator
 * @export
 */
exports.PublicApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定したユーザーのアイコン画像を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicIconUsernameGet(options = {}) {
            const localVarPath = `/public/icon/{username}`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PublicApi - functional programming interface
 * @export
 */
exports.PublicApiFp = function (configuration) {
    return {
        /**
         * 指定したユーザーのアイコン画像を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicIconUsernameGet(options) {
            const localVarAxiosArgs = exports.PublicApiAxiosParamCreator(configuration).publicIconUsernameGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PublicApi - factory interface
 * @export
 */
exports.PublicApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定したユーザーのアイコン画像を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicIconUsernameGet(options) {
            return exports.PublicApiFp(configuration).publicIconUsernameGet(options)(axios, basePath);
        },
    };
};
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
class PublicApi extends base_1.BaseAPI {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    publicIconUsernameGet(options) {
        return exports.PublicApiFp(this.configuration).publicIconUsernameGet(options)(this.axios, this.basePath);
    }
}
exports.PublicApi = PublicApi;
/**
 * SessionsApi - axios parameter creator
 * @export
 */
exports.SessionsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 自分のログインセッションを全てログアウトします。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsDelete(options = {}) {
            const localVarPath = `/users/me/sessions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のログインセッションリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsGet(options = {}) {
            const localVarPath = `/users/me/sessions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 対象のセッションをログアウトします。
         * @param {string} referenceID 操作の対象となるセッションの参照ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsReferenceIDDelete(referenceID, options = {}) {
            // verify required parameter 'referenceID' is not null or undefined
            if (referenceID === null || referenceID === undefined) {
                throw new base_1.RequiredError('referenceID', 'Required parameter referenceID was null or undefined when calling usersMeSessionsReferenceIDDelete.');
            }
            const localVarPath = `/users/me/sessions/{referenceID}`
                .replace(`{${"referenceID"}}`, encodeURIComponent(String(referenceID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SessionsApi - functional programming interface
 * @export
 */
exports.SessionsApiFp = function (configuration) {
    return {
        /**
         * 自分のログインセッションを全てログアウトします。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsDelete(options) {
            const localVarAxiosArgs = exports.SessionsApiAxiosParamCreator(configuration).usersMeSessionsDelete(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のログインセッションリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsGet(options) {
            const localVarAxiosArgs = exports.SessionsApiAxiosParamCreator(configuration).usersMeSessionsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 対象のセッションをログアウトします。
         * @param {string} referenceID 操作の対象となるセッションの参照ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsReferenceIDDelete(referenceID, options) {
            const localVarAxiosArgs = exports.SessionsApiAxiosParamCreator(configuration).usersMeSessionsReferenceIDDelete(referenceID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SessionsApi - factory interface
 * @export
 */
exports.SessionsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 自分のログインセッションを全てログアウトします。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsDelete(options) {
            return exports.SessionsApiFp(configuration).usersMeSessionsDelete(options)(axios, basePath);
        },
        /**
         * 自分のログインセッションリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsGet(options) {
            return exports.SessionsApiFp(configuration).usersMeSessionsGet(options)(axios, basePath);
        },
        /**
         * 対象のセッションをログアウトします。
         * @param {string} referenceID 操作の対象となるセッションの参照ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeSessionsReferenceIDDelete(referenceID, options) {
            return exports.SessionsApiFp(configuration).usersMeSessionsReferenceIDDelete(referenceID, options)(axios, basePath);
        },
    };
};
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
class SessionsApi extends base_1.BaseAPI {
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsDelete(options) {
        return exports.SessionsApiFp(this.configuration).usersMeSessionsDelete(options)(this.axios, this.basePath);
    }
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsGet(options) {
        return exports.SessionsApiFp(this.configuration).usersMeSessionsGet(options)(this.axios, this.basePath);
    }
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsReferenceIDDelete(referenceID, options) {
        return exports.SessionsApiFp(this.configuration).usersMeSessionsReferenceIDDelete(referenceID, options)(this.axios, this.basePath);
    }
}
exports.SessionsApi = SessionsApi;
/**
 * StampApi - axios parameter creator
 * @export
 */
exports.StampApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定したメッセージに押されているスタンプを全て取得します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsGet(messageID, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDStampsGet.');
            }
            const localVarPath = `/messages/{messageID}/stamps`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したメッセージから指定したスタンプを外します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsStampIDDelete(messageID, stampID, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDStampsStampIDDelete.');
            }
            // verify required parameter 'stampID' is not null or undefined
            if (stampID === null || stampID === undefined) {
                throw new base_1.RequiredError('stampID', 'Required parameter stampID was null or undefined when calling messagesMessageIDStampsStampIDDelete.');
            }
            const localVarPath = `/messages/{messageID}/stamps/{stampID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)))
                .replace(`{${"stampID"}}`, encodeURIComponent(String(stampID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したメッセージに指定したスタンプを押します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsStampIDPost(messageID, stampID, options = {}) {
            // verify required parameter 'messageID' is not null or undefined
            if (messageID === null || messageID === undefined) {
                throw new base_1.RequiredError('messageID', 'Required parameter messageID was null or undefined when calling messagesMessageIDStampsStampIDPost.');
            }
            // verify required parameter 'stampID' is not null or undefined
            if (stampID === null || stampID === undefined) {
                throw new base_1.RequiredError('stampID', 'Required parameter stampID was null or undefined when calling messagesMessageIDStampsStampIDPost.');
            }
            const localVarPath = `/messages/{messageID}/stamps/{stampID}`
                .replace(`{${"messageID"}}`, encodeURIComponent(String(messageID)))
                .replace(`{${"stampID"}}`, encodeURIComponent(String(stampID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 全スタンプのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsGet(options = {}) {
            const localVarPath = `/stamps`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スタンプを新規作成します。
         * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
         * @param {any} file 1MBまでのpng, jpeg, gif, svg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsPost(name, file, options = {}) {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new base_1.RequiredError('name', 'Required parameter name was null or undefined when calling stampsPost.');
            }
            // verify required parameter 'file' is not null or undefined
            if (file === null || file === undefined) {
                throw new base_1.RequiredError('file', 'Required parameter file was null or undefined when calling stampsPost.');
            }
            const localVarPath = `/stamps`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (name !== undefined) {
                localVarFormParams.append('name', name);
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スタンプを削除します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDDelete(stampID, options = {}) {
            // verify required parameter 'stampID' is not null or undefined
            if (stampID === null || stampID === undefined) {
                throw new base_1.RequiredError('stampID', 'Required parameter stampID was null or undefined when calling stampsStampIDDelete.');
            }
            const localVarPath = `/stamps/{stampID}`
                .replace(`{${"stampID"}}`, encodeURIComponent(String(stampID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スタンプの情報を取得します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDGet(stampID, options = {}) {
            // verify required parameter 'stampID' is not null or undefined
            if (stampID === null || stampID === undefined) {
                throw new base_1.RequiredError('stampID', 'Required parameter stampID was null or undefined when calling stampsStampIDGet.');
            }
            const localVarPath = `/stamps/{stampID}`
                .replace(`{${"stampID"}}`, encodeURIComponent(String(stampID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * スタンプを修正します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
         * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDPatch(stampID, name, file, options = {}) {
            // verify required parameter 'stampID' is not null or undefined
            if (stampID === null || stampID === undefined) {
                throw new base_1.RequiredError('stampID', 'Required parameter stampID was null or undefined when calling stampsStampIDPatch.');
            }
            const localVarPath = `/stamps/{stampID}`
                .replace(`{${"stampID"}}`, encodeURIComponent(String(stampID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (name !== undefined) {
                localVarFormParams.append('name', name);
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStampHistoryGet(options = {}) {
            const localVarPath = `/users/me/stamp-history`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StampApi - functional programming interface
 * @export
 */
exports.StampApiFp = function (configuration) {
    return {
        /**
         * 指定したメッセージに押されているスタンプを全て取得します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsGet(messageID, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).messagesMessageIDStampsGet(messageID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したメッセージから指定したスタンプを外します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsStampIDDelete(messageID, stampID, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).messagesMessageIDStampsStampIDDelete(messageID, stampID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したメッセージに指定したスタンプを押します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsStampIDPost(messageID, stampID, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).messagesMessageIDStampsStampIDPost(messageID, stampID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 全スタンプのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsGet(options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).stampsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * スタンプを新規作成します。
         * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
         * @param {any} file 1MBまでのpng, jpeg, gif, svg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsPost(name, file, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).stampsPost(name, file, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * スタンプを削除します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDDelete(stampID, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).stampsStampIDDelete(stampID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * スタンプの情報を取得します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDGet(stampID, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).stampsStampIDGet(stampID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * スタンプを修正します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
         * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDPatch(stampID, name, file, options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).stampsStampIDPatch(stampID, name, file, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStampHistoryGet(options) {
            const localVarAxiosArgs = exports.StampApiAxiosParamCreator(configuration).usersMeStampHistoryGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StampApi - factory interface
 * @export
 */
exports.StampApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定したメッセージに押されているスタンプを全て取得します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsGet(messageID, options) {
            return exports.StampApiFp(configuration).messagesMessageIDStampsGet(messageID, options)(axios, basePath);
        },
        /**
         * 指定したメッセージから指定したスタンプを外します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsStampIDDelete(messageID, stampID, options) {
            return exports.StampApiFp(configuration).messagesMessageIDStampsStampIDDelete(messageID, stampID, options)(axios, basePath);
        },
        /**
         * 指定したメッセージに指定したスタンプを押します。
         * @param {string} messageID 操作の対象となるメッセージID
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        messagesMessageIDStampsStampIDPost(messageID, stampID, options) {
            return exports.StampApiFp(configuration).messagesMessageIDStampsStampIDPost(messageID, stampID, options)(axios, basePath);
        },
        /**
         * 全スタンプのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsGet(options) {
            return exports.StampApiFp(configuration).stampsGet(options)(axios, basePath);
        },
        /**
         * スタンプを新規作成します。
         * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
         * @param {any} file 1MBまでのpng, jpeg, gif, svg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsPost(name, file, options) {
            return exports.StampApiFp(configuration).stampsPost(name, file, options)(axios, basePath);
        },
        /**
         * スタンプを削除します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDDelete(stampID, options) {
            return exports.StampApiFp(configuration).stampsStampIDDelete(stampID, options)(axios, basePath);
        },
        /**
         * スタンプの情報を取得します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDGet(stampID, options) {
            return exports.StampApiFp(configuration).stampsStampIDGet(stampID, options)(axios, basePath);
        },
        /**
         * スタンプを修正します。
         * @param {string} stampID 操作の対象となるスタンプID
         * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
         * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stampsStampIDPatch(stampID, name, file, options) {
            return exports.StampApiFp(configuration).stampsStampIDPatch(stampID, name, file, options)(axios, basePath);
        },
        /**
         * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStampHistoryGet(options) {
            return exports.StampApiFp(configuration).usersMeStampHistoryGet(options)(axios, basePath);
        },
    };
};
/**
 * StampApi - object-oriented interface
 * @export
 * @class StampApi
 * @extends {BaseAPI}
 */
class StampApi extends base_1.BaseAPI {
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsGet(messageID, options) {
        return exports.StampApiFp(this.configuration).messagesMessageIDStampsGet(messageID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDDelete(messageID, stampID, options) {
        return exports.StampApiFp(this.configuration).messagesMessageIDStampsStampIDDelete(messageID, stampID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDPost(messageID, stampID, options) {
        return exports.StampApiFp(this.configuration).messagesMessageIDStampsStampIDPost(messageID, stampID, options)(this.axios, this.basePath);
    }
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsGet(options) {
        return exports.StampApiFp(this.configuration).stampsGet(options)(this.axios, this.basePath);
    }
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsPost(name, file, options) {
        return exports.StampApiFp(this.configuration).stampsPost(name, file, options)(this.axios, this.basePath);
    }
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDDelete(stampID, options) {
        return exports.StampApiFp(this.configuration).stampsStampIDDelete(stampID, options)(this.axios, this.basePath);
    }
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDGet(stampID, options) {
        return exports.StampApiFp(this.configuration).stampsStampIDGet(stampID, options)(this.axios, this.basePath);
    }
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDPatch(stampID, name, file, options) {
        return exports.StampApiFp(this.configuration).stampsStampIDPatch(stampID, name, file, options)(this.axios, this.basePath);
    }
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    usersMeStampHistoryGet(options) {
        return exports.StampApiFp(this.configuration).usersMeStampHistoryGet(options)(this.axios, this.basePath);
    }
}
exports.StampApi = StampApi;
/**
 * StarApi - axios parameter creator
 * @export
 */
exports.StarApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsChannelIDDelete(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling usersMeStarsChannelIDDelete.');
            }
            const localVarPath = `/users/me/stars/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お気に入りチャンネルリストにチャンネルを追加します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsChannelIDPut(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling usersMeStarsChannelIDPut.');
            }
            const localVarPath = `/users/me/stars/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * お気に入りチャンネルリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsGet(options = {}) {
            const localVarPath = `/users/me/stars`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StarApi - functional programming interface
 * @export
 */
exports.StarApiFp = function (configuration) {
    return {
        /**
         * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsChannelIDDelete(channelID, options) {
            const localVarAxiosArgs = exports.StarApiAxiosParamCreator(configuration).usersMeStarsChannelIDDelete(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * お気に入りチャンネルリストにチャンネルを追加します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsChannelIDPut(channelID, options) {
            const localVarAxiosArgs = exports.StarApiAxiosParamCreator(configuration).usersMeStarsChannelIDPut(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * お気に入りチャンネルリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsGet(options) {
            const localVarAxiosArgs = exports.StarApiAxiosParamCreator(configuration).usersMeStarsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StarApi - factory interface
 * @export
 */
exports.StarApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsChannelIDDelete(channelID, options) {
            return exports.StarApiFp(configuration).usersMeStarsChannelIDDelete(channelID, options)(axios, basePath);
        },
        /**
         * お気に入りチャンネルリストにチャンネルを追加します。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsChannelIDPut(channelID, options) {
            return exports.StarApiFp(configuration).usersMeStarsChannelIDPut(channelID, options)(axios, basePath);
        },
        /**
         * お気に入りチャンネルリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeStarsGet(options) {
            return exports.StarApiFp(configuration).usersMeStarsGet(options)(axios, basePath);
        },
    };
};
/**
 * StarApi - object-oriented interface
 * @export
 * @class StarApi
 * @extends {BaseAPI}
 */
class StarApi extends base_1.BaseAPI {
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDDelete(channelID, options) {
        return exports.StarApiFp(this.configuration).usersMeStarsChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDPut(channelID, options) {
        return exports.StarApiFp(this.configuration).usersMeStarsChannelIDPut(channelID, options)(this.axios, this.basePath);
    }
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsGet(options) {
        return exports.StarApiFp(this.configuration).usersMeStarsGet(options)(this.axios, this.basePath);
    }
}
exports.StarApi = StarApi;
/**
 * UnreadApi - axios parameter creator
 * @export
 */
exports.UnreadApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUnreadChannelsChannelIDDelete(channelID, options = {}) {
            // verify required parameter 'channelID' is not null or undefined
            if (channelID === null || channelID === undefined) {
                throw new base_1.RequiredError('channelID', 'Required parameter channelID was null or undefined when calling usersMeUnreadChannelsChannelIDDelete.');
            }
            const localVarPath = `/users/me/unread/channels/{channelID}`
                .replace(`{${"channelID"}}`, encodeURIComponent(String(channelID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 未読チャンネル情報のリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUnreadChannelsGet(options = {}) {
            const localVarPath = `/users/me/unread/channels`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UnreadApi - functional programming interface
 * @export
 */
exports.UnreadApiFp = function (configuration) {
    return {
        /**
         * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUnreadChannelsChannelIDDelete(channelID, options) {
            const localVarAxiosArgs = exports.UnreadApiAxiosParamCreator(configuration).usersMeUnreadChannelsChannelIDDelete(channelID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 未読チャンネル情報のリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUnreadChannelsGet(options) {
            const localVarAxiosArgs = exports.UnreadApiAxiosParamCreator(configuration).usersMeUnreadChannelsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UnreadApi - factory interface
 * @export
 */
exports.UnreadApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
         * @param {string} channelID 操作の対象となるチャンネルのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUnreadChannelsChannelIDDelete(channelID, options) {
            return exports.UnreadApiFp(configuration).usersMeUnreadChannelsChannelIDDelete(channelID, options)(axios, basePath);
        },
        /**
         * 未読チャンネル情報のリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeUnreadChannelsGet(options) {
            return exports.UnreadApiFp(configuration).usersMeUnreadChannelsGet(options)(axios, basePath);
        },
    };
};
/**
 * UnreadApi - object-oriented interface
 * @export
 * @class UnreadApi
 * @extends {BaseAPI}
 */
class UnreadApi extends base_1.BaseAPI {
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsChannelIDDelete(channelID, options) {
        return exports.UnreadApiFp(this.configuration).usersMeUnreadChannelsChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsGet(options) {
        return exports.UnreadApiFp(this.configuration).usersMeUnreadChannelsGet(options)(this.axios, this.basePath);
    }
}
exports.UnreadApi = UnreadApi;
/**
 * UserApi - axios parameter creator
 * @export
 */
exports.UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 全ユーザーのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options = {}) {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のユーザー情報を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options = {}) {
            const localVarPath = `/users/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のアイコン画像を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeIconGet(options = {}) {
            const localVarPath = `/users/me/icon`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のアイコンを更新します。
         * @param {any} [file] 1MBまでのpng, jpeg, gif
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeIconPut(file, options = {}) {
            const localVarPath = `/users/me/icon`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のパスワードを変更します。
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePasswordPut(inlineObject6, options = {}) {
            const localVarPath = `/users/me/password`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject6" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {}) : (inlineObject6 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のユーザー情報を変更します。
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch(inlineObject5, options = {}) {
            const localVarPath = `/users/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject5" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {}) : (inlineObject5 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分のQRコードを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeQrCodeGet(options = {}) {
            const localVarPath = `/users/me/qr-code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザー登録します
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(inlineObject4, options = {}) {
            const localVarPath = `/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication cookieAuth required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject4" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {}) : (inlineObject4 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの詳細を取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDGet(userID, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDGet.');
            }
            const localVarPath = `/users/{userID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのアイコン画像を取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDIconGet(userID, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDIconGet.');
            }
            const localVarPath = `/users/{userID}/icon`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
exports.UserApiFp = function (configuration) {
    return {
        /**
         * 全ユーザーのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のユーザー情報を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersMeGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のアイコン画像を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeIconGet(options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersMeIconGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のアイコンを更新します。
         * @param {any} [file] 1MBまでのpng, jpeg, gif
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeIconPut(file, options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersMeIconPut(file, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のパスワードを変更します。
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePasswordPut(inlineObject6, options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersMePasswordPut(inlineObject6, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のユーザー情報を変更します。
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch(inlineObject5, options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersMePatch(inlineObject5, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 自分のQRコードを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeQrCodeGet(options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersMeQrCodeGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザー登録します
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(inlineObject4, options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersPost(inlineObject4, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーの詳細を取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDGet(userID, options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersUserIDGet(userID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーのアイコン画像を取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDIconGet(userID, options) {
            const localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).usersUserIDIconGet(userID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
exports.UserApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 全ユーザーのリストを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options) {
            return exports.UserApiFp(configuration).usersGet(options)(axios, basePath);
        },
        /**
         * 自分のユーザー情報を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options) {
            return exports.UserApiFp(configuration).usersMeGet(options)(axios, basePath);
        },
        /**
         * 自分のアイコン画像を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeIconGet(options) {
            return exports.UserApiFp(configuration).usersMeIconGet(options)(axios, basePath);
        },
        /**
         * 自分のアイコンを更新します。
         * @param {any} [file] 1MBまでのpng, jpeg, gif
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeIconPut(file, options) {
            return exports.UserApiFp(configuration).usersMeIconPut(file, options)(axios, basePath);
        },
        /**
         * 自分のパスワードを変更します。
         * @param {InlineObject6} [inlineObject6]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePasswordPut(inlineObject6, options) {
            return exports.UserApiFp(configuration).usersMePasswordPut(inlineObject6, options)(axios, basePath);
        },
        /**
         * 自分のユーザー情報を変更します。
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePatch(inlineObject5, options) {
            return exports.UserApiFp(configuration).usersMePatch(inlineObject5, options)(axios, basePath);
        },
        /**
         * 自分のQRコードを取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeQrCodeGet(options) {
            return exports.UserApiFp(configuration).usersMeQrCodeGet(options)(axios, basePath);
        },
        /**
         * ユーザー登録します
         * @param {InlineObject4} [inlineObject4]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost(inlineObject4, options) {
            return exports.UserApiFp(configuration).usersPost(inlineObject4, options)(axios, basePath);
        },
        /**
         * ユーザーの詳細を取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDGet(userID, options) {
            return exports.UserApiFp(configuration).usersUserIDGet(userID, options)(axios, basePath);
        },
        /**
         * ユーザーのアイコン画像を取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDIconGet(userID, options) {
            return exports.UserApiFp(configuration).usersUserIDIconGet(userID, options)(axios, basePath);
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersGet(options) {
        return exports.UserApiFp(this.configuration).usersGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeGet(options) {
        return exports.UserApiFp(this.configuration).usersMeGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconGet(options) {
        return exports.UserApiFp(this.configuration).usersMeIconGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconPut(file, options) {
        return exports.UserApiFp(this.configuration).usersMeIconPut(file, options)(this.axios, this.basePath);
    }
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePasswordPut(inlineObject6, options) {
        return exports.UserApiFp(this.configuration).usersMePasswordPut(inlineObject6, options)(this.axios, this.basePath);
    }
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePatch(inlineObject5, options) {
        return exports.UserApiFp(this.configuration).usersMePatch(inlineObject5, options)(this.axios, this.basePath);
    }
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeQrCodeGet(options) {
        return exports.UserApiFp(this.configuration).usersMeQrCodeGet(options)(this.axios, this.basePath);
    }
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersPost(inlineObject4, options) {
        return exports.UserApiFp(this.configuration).usersPost(inlineObject4, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDGet(userID, options) {
        return exports.UserApiFp(this.configuration).usersUserIDGet(userID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDIconGet(userID, options) {
        return exports.UserApiFp(this.configuration).usersUserIDIconGet(userID, options)(this.axios, this.basePath);
    }
}
exports.UserApi = UserApi;
/**
 * UserGroupApi - axios parameter creator
 * @export
 */
exports.UserGroupApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 全てのユーザーグループを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options = {}) {
            const localVarPath = `/groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループを削除します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDDelete(groupID, options = {}) {
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new base_1.RequiredError('groupID', 'Required parameter groupID was null or undefined when calling groupsGroupIDDelete.');
            }
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループを取得します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDGet(groupID, options = {}) {
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new base_1.RequiredError('groupID', 'Required parameter groupID was null or undefined when calling groupsGroupIDGet.');
            }
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループのメンバーのIDを取得します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersGet(groupID, options = {}) {
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new base_1.RequiredError('groupID', 'Required parameter groupID was null or undefined when calling groupsGroupIDMembersGet.');
            }
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループにメンバーを追加します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersPost(groupID, inlineObject30, options = {}) {
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new base_1.RequiredError('groupID', 'Required parameter groupID was null or undefined when calling groupsGroupIDMembersPost.');
            }
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject30" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject30 !== undefined ? inlineObject30 : {}) : (inlineObject30 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループからメンバーを削除します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersUserIDDelete(groupID, userID, options = {}) {
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new base_1.RequiredError('groupID', 'Required parameter groupID was null or undefined when calling groupsGroupIDMembersUserIDDelete.');
            }
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling groupsGroupIDMembersUserIDDelete.');
            }
            const localVarPath = `/groups/{groupID}/members/{userID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)))
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループの情報を変更します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDPatch(groupID, inlineObject29, options = {}) {
            // verify required parameter 'groupID' is not null or undefined
            if (groupID === null || groupID === undefined) {
                throw new base_1.RequiredError('groupID', 'Required parameter groupID was null or undefined when calling groupsGroupIDPatch.');
            }
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject29" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject29 !== undefined ? inlineObject29 : {}) : (inlineObject29 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーグループを作成します
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(inlineObject28, options = {}) {
            const localVarPath = `/groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject28" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject28 !== undefined ? inlineObject28 : {}) : (inlineObject28 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 所属するユーザーグループのIDを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGroupsGet(options = {}) {
            const localVarPath = `/users/me/groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 所属するユーザーグループのIDを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDGroupsGet(options = {}) {
            const localVarPath = `/users/{userID}/groups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserGroupApi - functional programming interface
 * @export
 */
exports.UserGroupApiFp = function (configuration) {
    return {
        /**
         * 全てのユーザーグループを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループを削除します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDDelete(groupID, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGroupIDDelete(groupID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループを取得します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDGet(groupID, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGroupIDGet(groupID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループのメンバーのIDを取得します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersGet(groupID, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGroupIDMembersGet(groupID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループにメンバーを追加します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersPost(groupID, inlineObject30, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGroupIDMembersPost(groupID, inlineObject30, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループからメンバーを削除します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersUserIDDelete(groupID, userID, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGroupIDMembersUserIDDelete(groupID, userID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループの情報を変更します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDPatch(groupID, inlineObject29, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsGroupIDPatch(groupID, inlineObject29, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーグループを作成します
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(inlineObject28, options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).groupsPost(inlineObject28, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 所属するユーザーグループのIDを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGroupsGet(options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).usersMeGroupsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 所属するユーザーグループのIDを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDGroupsGet(options) {
            const localVarAxiosArgs = exports.UserGroupApiAxiosParamCreator(configuration).usersUserIDGroupsGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UserGroupApi - factory interface
 * @export
 */
exports.UserGroupApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 全てのユーザーグループを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options) {
            return exports.UserGroupApiFp(configuration).groupsGet(options)(axios, basePath);
        },
        /**
         * ユーザーグループを削除します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDDelete(groupID, options) {
            return exports.UserGroupApiFp(configuration).groupsGroupIDDelete(groupID, options)(axios, basePath);
        },
        /**
         * ユーザーグループを取得します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDGet(groupID, options) {
            return exports.UserGroupApiFp(configuration).groupsGroupIDGet(groupID, options)(axios, basePath);
        },
        /**
         * ユーザーグループのメンバーのIDを取得します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersGet(groupID, options) {
            return exports.UserGroupApiFp(configuration).groupsGroupIDMembersGet(groupID, options)(axios, basePath);
        },
        /**
         * ユーザーグループにメンバーを追加します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {InlineObject30} [inlineObject30]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersPost(groupID, inlineObject30, options) {
            return exports.UserGroupApiFp(configuration).groupsGroupIDMembersPost(groupID, inlineObject30, options)(axios, basePath);
        },
        /**
         * ユーザーグループからメンバーを削除します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersUserIDDelete(groupID, userID, options) {
            return exports.UserGroupApiFp(configuration).groupsGroupIDMembersUserIDDelete(groupID, userID, options)(axios, basePath);
        },
        /**
         * ユーザーグループの情報を変更します
         * @param {string} groupID 操作の対象となるユーザーグループID
         * @param {InlineObject29} [inlineObject29]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDPatch(groupID, inlineObject29, options) {
            return exports.UserGroupApiFp(configuration).groupsGroupIDPatch(groupID, inlineObject29, options)(axios, basePath);
        },
        /**
         * ユーザーグループを作成します
         * @param {InlineObject28} [inlineObject28]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(inlineObject28, options) {
            return exports.UserGroupApiFp(configuration).groupsPost(inlineObject28, options)(axios, basePath);
        },
        /**
         * 所属するユーザーグループのIDを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGroupsGet(options) {
            return exports.UserGroupApiFp(configuration).usersMeGroupsGet(options)(axios, basePath);
        },
        /**
         * 所属するユーザーグループのIDを取得します
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDGroupsGet(options) {
            return exports.UserGroupApiFp(configuration).usersUserIDGroupsGet(options)(axios, basePath);
        },
    };
};
/**
 * UserGroupApi - object-oriented interface
 * @export
 * @class UserGroupApi
 * @extends {BaseAPI}
 */
class UserGroupApi extends base_1.BaseAPI {
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGet(options) {
        return exports.UserGroupApiFp(this.configuration).groupsGet(options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDDelete(groupID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDDelete(groupID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDGet(groupID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDGet(groupID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersGet(groupID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDMembersGet(groupID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersPost(groupID, inlineObject30, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDMembersPost(groupID, inlineObject30, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersUserIDDelete(groupID, userID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDMembersUserIDDelete(groupID, userID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDPatch(groupID, inlineObject29, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDPatch(groupID, inlineObject29, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループを作成します
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsPost(inlineObject28, options) {
        return exports.UserGroupApiFp(this.configuration).groupsPost(inlineObject28, options)(this.axios, this.basePath);
    }
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersMeGroupsGet(options) {
        return exports.UserGroupApiFp(this.configuration).usersMeGroupsGet(options)(this.axios, this.basePath);
    }
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersUserIDGroupsGet(options) {
        return exports.UserGroupApiFp(this.configuration).usersUserIDGroupsGet(options)(this.axios, this.basePath);
    }
}
exports.UserGroupApi = UserGroupApi;
/**
 * UserTagApi - axios parameter creator
 * @export
 */
exports.UserTagApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 指定されたタグの情報を取得します。
         * @param {string} tagID 操作の対象となるタグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet(tagID, options = {}) {
            // verify required parameter 'tagID' is not null or undefined
            if (tagID === null || tagID === undefined) {
                throw new base_1.RequiredError('tagID', 'Required parameter tagID was null or undefined when calling tagsTagIDGet.');
            }
            const localVarPath = `/tags/{tagID}`
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーのタグのリストを取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsGet(userID, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDTagsGet.');
            }
            const localVarPath = `/users/{userID}/tags`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーにタグを追加します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {InlineObject12} [inlineObject12]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsPost(userID, inlineObject12, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDTagsPost.');
            }
            const localVarPath = `/users/{userID}/tags`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject12" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject12 !== undefined ? inlineObject12 : {}) : (inlineObject12 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {string} tagID 操作の対象となるタグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsTagIDDelete(userID, tagID, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDTagsTagIDDelete.');
            }
            // verify required parameter 'tagID' is not null or undefined
            if (tagID === null || tagID === undefined) {
                throw new base_1.RequiredError('tagID', 'Required parameter tagID was null or undefined when calling usersUserIDTagsTagIDDelete.');
            }
            const localVarPath = `/users/{userID}/tags/{tagID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグのロック、アンロックを変更します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {string} tagID 操作の対象となるタグID
         * @param {InlineObject13} [inlineObject13]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options = {}) {
            // verify required parameter 'userID' is not null or undefined
            if (userID === null || userID === undefined) {
                throw new base_1.RequiredError('userID', 'Required parameter userID was null or undefined when calling usersUserIDTagsTagIDPatch.');
            }
            // verify required parameter 'tagID' is not null or undefined
            if (tagID === null || tagID === undefined) {
                throw new base_1.RequiredError('tagID', 'Required parameter tagID was null or undefined when calling usersUserIDTagsTagIDPatch.');
            }
            const localVarPath = `/users/{userID}/tags/{tagID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)))
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["write"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject13" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject13 !== undefined ? inlineObject13 : {}) : (inlineObject13 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserTagApi - functional programming interface
 * @export
 */
exports.UserTagApiFp = function (configuration) {
    return {
        /**
         * 指定されたタグの情報を取得します。
         * @param {string} tagID 操作の対象となるタグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet(tagID, options) {
            const localVarAxiosArgs = exports.UserTagApiAxiosParamCreator(configuration).tagsTagIDGet(tagID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーのタグのリストを取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsGet(userID, options) {
            const localVarAxiosArgs = exports.UserTagApiAxiosParamCreator(configuration).usersUserIDTagsGet(userID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーにタグを追加します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {InlineObject12} [inlineObject12]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsPost(userID, inlineObject12, options) {
            const localVarAxiosArgs = exports.UserTagApiAxiosParamCreator(configuration).usersUserIDTagsPost(userID, inlineObject12, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {string} tagID 操作の対象となるタグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsTagIDDelete(userID, tagID, options) {
            const localVarAxiosArgs = exports.UserTagApiAxiosParamCreator(configuration).usersUserIDTagsTagIDDelete(userID, tagID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * タグのロック、アンロックを変更します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {string} tagID 操作の対象となるタグID
         * @param {InlineObject13} [inlineObject13]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options) {
            const localVarAxiosArgs = exports.UserTagApiAxiosParamCreator(configuration).usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UserTagApi - factory interface
 * @export
 */
exports.UserTagApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 指定されたタグの情報を取得します。
         * @param {string} tagID 操作の対象となるタグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet(tagID, options) {
            return exports.UserTagApiFp(configuration).tagsTagIDGet(tagID, options)(axios, basePath);
        },
        /**
         * ユーザーのタグのリストを取得します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsGet(userID, options) {
            return exports.UserTagApiFp(configuration).usersUserIDTagsGet(userID, options)(axios, basePath);
        },
        /**
         * ユーザーにタグを追加します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {InlineObject12} [inlineObject12]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsPost(userID, inlineObject12, options) {
            return exports.UserTagApiFp(configuration).usersUserIDTagsPost(userID, inlineObject12, options)(axios, basePath);
        },
        /**
         * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {string} tagID 操作の対象となるタグID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsTagIDDelete(userID, tagID, options) {
            return exports.UserTagApiFp(configuration).usersUserIDTagsTagIDDelete(userID, tagID, options)(axios, basePath);
        },
        /**
         * タグのロック、アンロックを変更します。
         * @param {string} userID 操作の対象となるユーザーID
         * @param {string} tagID 操作の対象となるタグID
         * @param {InlineObject13} [inlineObject13]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options) {
            return exports.UserTagApiFp(configuration).usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options)(axios, basePath);
        },
    };
};
/**
 * UserTagApi - object-oriented interface
 * @export
 * @class UserTagApi
 * @extends {BaseAPI}
 */
class UserTagApi extends base_1.BaseAPI {
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    tagsTagIDGet(tagID, options) {
        return exports.UserTagApiFp(this.configuration).tagsTagIDGet(tagID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsGet(userID, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsGet(userID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsPost(userID, inlineObject12, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsPost(userID, inlineObject12, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDDelete(userID, tagID, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsTagIDDelete(userID, tagID, options)(this.axios, this.basePath);
    }
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options)(this.axios, this.basePath);
    }
}
exports.UserTagApi = UserTagApi;
/**
 * WebhookApi - axios parameter creator
 * @export
 */
exports.WebhookApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 自分が作成したwebhookの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGet(options = {}) {
            const localVarPath = `/webhooks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * webhookを作成します。
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPost(inlineObject26, options = {}) {
            const localVarPath = `/webhooks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject26" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject26 !== undefined ? inlineObject26 : {}) : (inlineObject26 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * webhookを削除します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDDelete(webhookID, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDDelete.');
            }
            const localVarPath = `/webhooks/{webhookID}`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * webhookの詳細を取得します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDGet(webhookID, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDGet.');
            }
            const localVarPath = `/webhooks/{webhookID}`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Github-Compatibleなwebhookを送信します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDGithubPost(webhookID, body, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDGithubPost.');
            }
            const localVarPath = `/webhooks/{webhookID}/github`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("object" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したWebhookのアイコンを取得します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDIconGet(webhookID, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDIconGet.');
            }
            const localVarPath = `/webhooks/{webhookID}/icon`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["read", "manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したwebhookのアイコンを変更します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDIconPut(webhookID, file, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDIconPut.');
            }
            const localVarPath = `/webhooks/{webhookID}/icon`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * webhookを修正します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDPatch(webhookID, inlineObject27, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDPatch.');
            }
            const localVarPath = `/webhooks/{webhookID}`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication traqOAuth2 required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("traqOAuth2", ["manage_bot"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("InlineObject27" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject27 !== undefined ? inlineObject27 : {}) : (inlineObject27 || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * webhookを送信します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
         * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options = {}) {
            // verify required parameter 'webhookID' is not null or undefined
            if (webhookID === null || webhookID === undefined) {
                throw new base_1.RequiredError('webhookID', 'Required parameter webhookID was null or undefined when calling webhooksWebhookIDPost.');
            }
            const localVarPath = `/webhooks/{webhookID}`
                .replace(`{${"webhookID"}}`, encodeURIComponent(String(webhookID)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (xTRAQChannelId !== undefined && xTRAQChannelId !== null) {
                localVarHeaderParameter['X-TRAQ-Channel-Id'] = String(xTRAQChannelId);
            }
            if (xTRAQSignature !== undefined && xTRAQSignature !== null) {
                localVarHeaderParameter['X-TRAQ-Signature'] = String(xTRAQSignature);
            }
            localVarHeaderParameter['Content-Type'] = 'text/plain';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization = ("string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * WebhookApi - functional programming interface
 * @export
 */
exports.WebhookApiFp = function (configuration) {
    return {
        /**
         * 自分が作成したwebhookの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGet(options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksGet(options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * webhookを作成します。
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPost(inlineObject26, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksPost(inlineObject26, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * webhookを削除します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDDelete(webhookID, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDDelete(webhookID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * webhookの詳細を取得します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDGet(webhookID, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDGet(webhookID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Github-Compatibleなwebhookを送信します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDGithubPost(webhookID, body, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDGithubPost(webhookID, body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したWebhookのアイコンを取得します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDIconGet(webhookID, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDIconGet(webhookID, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 指定したwebhookのアイコンを変更します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDIconPut(webhookID, file, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDIconPut(webhookID, file, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * webhookを修正します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDPatch(webhookID, inlineObject27, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDPatch(webhookID, inlineObject27, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * webhookを送信します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
         * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options) {
            const localVarAxiosArgs = exports.WebhookApiAxiosParamCreator(configuration).webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options);
            return (axios = axios_1.default, basePath = base_1.BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * WebhookApi - factory interface
 * @export
 */
exports.WebhookApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * 自分が作成したwebhookの一覧を取得します。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksGet(options) {
            return exports.WebhookApiFp(configuration).webhooksGet(options)(axios, basePath);
        },
        /**
         * webhookを作成します。
         * @param {InlineObject26} [inlineObject26]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPost(inlineObject26, options) {
            return exports.WebhookApiFp(configuration).webhooksPost(inlineObject26, options)(axios, basePath);
        },
        /**
         * webhookを削除します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDDelete(webhookID, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDDelete(webhookID, options)(axios, basePath);
        },
        /**
         * webhookの詳細を取得します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDGet(webhookID, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDGet(webhookID, options)(axios, basePath);
        },
        /**
         * Github-Compatibleなwebhookを送信します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDGithubPost(webhookID, body, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDGithubPost(webhookID, body, options)(axios, basePath);
        },
        /**
         * 指定したWebhookのアイコンを取得します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDIconGet(webhookID, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDIconGet(webhookID, options)(axios, basePath);
        },
        /**
         * 指定したwebhookのアイコンを変更します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDIconPut(webhookID, file, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDIconPut(webhookID, file, options)(axios, basePath);
        },
        /**
         * webhookを修正します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {InlineObject27} [inlineObject27]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDPatch(webhookID, inlineObject27, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDPatch(webhookID, inlineObject27, options)(axios, basePath);
        },
        /**
         * webhookを送信します。
         * @param {string} webhookID 操作の対象となるWebhookのID
         * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
         * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options) {
            return exports.WebhookApiFp(configuration).webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options)(axios, basePath);
        },
    };
};
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
class WebhookApi extends base_1.BaseAPI {
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksGet(options) {
        return exports.WebhookApiFp(this.configuration).webhooksGet(options)(this.axios, this.basePath);
    }
    /**
     * webhookを作成します。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksPost(inlineObject26, options) {
        return exports.WebhookApiFp(this.configuration).webhooksPost(inlineObject26, options)(this.axios, this.basePath);
    }
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDDelete(webhookID, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDDelete(webhookID, options)(this.axios, this.basePath);
    }
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGet(webhookID, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDGet(webhookID, options)(this.axios, this.basePath);
    }
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGithubPost(webhookID, body, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDGithubPost(webhookID, body, options)(this.axios, this.basePath);
    }
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconGet(webhookID, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDIconGet(webhookID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconPut(webhookID, file, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDIconPut(webhookID, file, options)(this.axios, this.basePath);
    }
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPatch(webhookID, inlineObject27, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDPatch(webhookID, inlineObject27, options)(this.axios, this.basePath);
    }
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options)(this.axios, this.basePath);
    }
}
exports.WebhookApi = WebhookApi;
class Apis extends base_1.BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    activityLatestMessagesGet(limit, subscribe, options) {
        return exports.ActivityApiFp(this.configuration).activityLatestMessagesGet(limit, subscribe, options)(this.axios, this.basePath);
    }
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    loginPost(redirect, inlineObject, options) {
        return exports.AuthenticationApiFp(this.configuration).loginPost(redirect, inlineObject, options)(this.axios, this.basePath);
    }
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logoutPost(redirect, options) {
        return exports.AuthenticationApiFp(this.configuration).logoutPost(redirect, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeDecidePost(submit, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2AuthorizeDecidePost(submit, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2AuthorizeGet(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2AuthorizePost(responseType, clientId, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, options)(this.axios, this.basePath);
    }
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options) {
        return exports.AuthorizationApiFp(this.configuration).oauth2TokenPost(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, options)(this.axios, this.basePath);
    }
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDChannelsGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDChannelsGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDelete(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDDelete(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDetailGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDDetailGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDEventsPut(botID, inlineObject35, options) {
        return exports.BotApiFp(this.configuration).botsBotIDEventsPut(botID, inlineObject35, options)(this.axios, this.basePath);
    }
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconGet(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDIconGet(botID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconPut(botID, file, options) {
        return exports.BotApiFp(this.configuration).botsBotIDIconPut(botID, file, options)(this.axios, this.basePath);
    }
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDPatch(botID, inlineObject34, options) {
        return exports.BotApiFp(this.configuration).botsBotIDPatch(botID, inlineObject34, options)(this.axios, this.basePath);
    }
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDReissuePost(botID, options) {
        return exports.BotApiFp(this.configuration).botsBotIDReissuePost(botID, options)(this.axios, this.basePath);
    }
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDStatePut(botID, inlineObject36, options) {
        return exports.BotApiFp(this.configuration).botsBotIDStatePut(botID, inlineObject36, options)(this.axios, this.basePath);
    }
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsGet(options) {
        return exports.BotApiFp(this.configuration).botsGet(options)(this.axios, this.basePath);
    }
    /**
     * Botを作成します。
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsPost(inlineObject33, options) {
        return exports.BotApiFp(this.configuration).botsPost(inlineObject33, options)(this.axios, this.basePath);
    }
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsBotIDDelete(channelID, botID, options) {
        return exports.BotApiFp(this.configuration).channelsChannelIDBotsBotIDDelete(channelID, botID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsGet(channelID, options) {
        return exports.BotApiFp(this.configuration).channelsChannelIDBotsGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsPost(channelID, inlineObject21, options) {
        return exports.BotApiFp(this.configuration).channelsChannelIDBotsPost(channelID, inlineObject21, options)(this.axios, this.basePath);
    }
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDChildrenPost(channelID, inlineObject17, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDChildrenPost(channelID, inlineObject17, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDDelete(channelID, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDGet(channelID, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDParentPut(channelID, inlineObject16, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDParentPut(channelID, inlineObject16, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDPatch(channelID, inlineObject15, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDPatch(channelID, inlineObject15, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicGet(channelID, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDTopicGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicPut(channelID, inlineObject18, options) {
        return exports.ChannelApiFp(this.configuration).channelsChannelIDTopicPut(channelID, inlineObject18, options)(this.axios, this.basePath);
    }
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsGet(options) {
        return exports.ChannelApiFp(this.configuration).channelsGet(options)(this.axios, this.basePath);
    }
    /**
     * チャンネルを作成します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsPost(inlineObject14, options) {
        return exports.ChannelApiFp(this.configuration).channelsPost(inlineObject14, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDelete(clientID, options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDDelete(clientID, options)(this.axios, this.basePath);
    }
    /**
     * クライアントの詳細を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDetailGet(options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDDetailGet(options)(this.axios, this.basePath);
    }
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDGet(clientID, options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDGet(clientID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDPatch(clientID, inlineObject32, options) {
        return exports.ClientApiFp(this.configuration).clientsClientIDPatch(clientID, inlineObject32, options)(this.axios, this.basePath);
    }
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsGet(options) {
        return exports.ClientApiFp(this.configuration).clientsGet(options)(this.axios, this.basePath);
    }
    /**
     * クライアントを登録します。
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsPost(inlineObject31, options) {
        return exports.ClientApiFp(this.configuration).clientsPost(inlineObject31, options)(this.axios, this.basePath);
    }
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensGet(options) {
        return exports.ClientApiFp(this.configuration).usersMeTokensGet(options)(this.axios, this.basePath);
    }
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options) {
        return exports.ClientApiFp(this.configuration).usersMeTokensOauth2TokenIDDelete(oauth2TokenID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDDelete(clipID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDDelete(clipID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderGet(clipID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDFolderGet(clipID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderPut(clipID, inlineObject8, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDFolderPut(clipID, inlineObject8, options)(this.axios, this.basePath);
    }
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDGet(clipID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsClipIDGet(clipID, options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDDelete(folderID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersFolderIDDelete(folderID, options)(this.axios, this.basePath);
    }
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDGet(folderID, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersFolderIDGet(folderID, options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersFolderIDPatch(folderID, inlineObject10, options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersGet(options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersGet(options)(this.axios, this.basePath);
    }
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersPost(inlineObject9, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsFoldersPost(inlineObject9, options)(this.axios, this.basePath);
    }
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsGet(options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsGet(options)(this.axios, this.basePath);
    }
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsPost(inlineObject7, options) {
        return exports.ClipApiFp(this.configuration).usersMeClipsPost(inlineObject7, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDDelete(fileID, options) {
        return exports.FileApiFp(this.configuration).filesFileIDDelete(fileID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDGet(fileID, dl, options) {
        return exports.FileApiFp(this.configuration).filesFileIDGet(fileID, dl, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDMetaGet(fileID, options) {
        return exports.FileApiFp(this.configuration).filesFileIDMetaGet(fileID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDThumbnailGet(fileID, options) {
        return exports.FileApiFp(this.configuration).filesFileIDThumbnailGet(fileID, options)(this.axios, this.basePath);
    }
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesPost(file, aclReadable, options) {
        return exports.FileApiFp(this.configuration).filesPost(file, aclReadable, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatGet(channelId, options) {
        return exports.HeartbeatApiFp(this.configuration).heartbeatGet(channelId, options)(this.axios, this.basePath);
    }
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {'none' | 'monitoring' | 'editing'} status editing,monitoring,noneでユーザーの状態を指定する
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatPost(status, channelId, options) {
        return exports.HeartbeatApiFp(this.configuration).heartbeatPost(status, channelId, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options) {
        return exports.MessageApiFp(this.configuration).channelsChannelIDMessagesGet(channelID, limit, offset, since, until, inclusive, order, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesPost(channelID, inlineObject19, options) {
        return exports.MessageApiFp(this.configuration).channelsChannelIDMessagesPost(channelID, inlineObject19, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDDelete(messageID, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDDelete(messageID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDGet(messageID, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDGet(messageID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDPut(messageID, inlineObject23, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDPut(messageID, inlineObject23, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDReportPost(messageID, inlineObject24, options) {
        return exports.MessageApiFp(this.configuration).messagesMessageIDReportPost(messageID, inlineObject24, options)(this.axios, this.basePath);
    }
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesReportsGet(p, options) {
        return exports.MessageApiFp(this.configuration).messagesReportsGet(p, options)(this.axios, this.basePath);
    }
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options) {
        return exports.MessageApiFp(this.configuration).usersUserIDMessagesGet(userID, limit, offset, since, until, inclusive, order, options)(this.axios, this.basePath);
    }
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesPost(userID, inlineObject11, options) {
        return exports.MessageApiFp(this.configuration).usersUserIDMessagesPost(userID, inlineObject11, options)(this.axios, this.basePath);
    }
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDDelete(channelID, options) {
        return exports.MuteApiFp(this.configuration).usersMeMuteChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDPost(channelID, options) {
        return exports.MuteApiFp(this.configuration).usersMeMuteChannelIDPost(channelID, options)(this.axios, this.basePath);
    }
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteGet(options) {
        return exports.MuteApiFp(this.configuration).usersMeMuteGet(options)(this.axios, this.basePath);
    }
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationGet(channelID, options) {
        return exports.NotificationApiFp(this.configuration).channelsChannelIDNotificationGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationPut(channelID, inlineObject20, options) {
        return exports.NotificationApiFp(this.configuration).channelsChannelIDNotificationPut(channelID, inlineObject20, options)(this.axios, this.basePath);
    }
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationDevicePost(inlineObject22, options) {
        return exports.NotificationApiFp(this.configuration).notificationDevicePost(inlineObject22, options)(this.axios, this.basePath);
    }
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationGet(options) {
        return exports.NotificationApiFp(this.configuration).notificationGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersMeNotificationGet(options) {
        return exports.NotificationApiFp(this.configuration).usersMeNotificationGet(options)(this.axios, this.basePath);
    }
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersUserIDNotificationGet(userID, options) {
        return exports.NotificationApiFp(this.configuration).usersUserIDNotificationGet(userID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    channelsChannelIDPinsGet(channelID, options) {
        return exports.PinApiFp(this.configuration).channelsChannelIDPinsGet(channelID, options)(this.axios, this.basePath);
    }
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDDelete(pinID, options) {
        return exports.PinApiFp(this.configuration).pinsPinIDDelete(pinID, options)(this.axios, this.basePath);
    }
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDGet(pinID, options) {
        return exports.PinApiFp(this.configuration).pinsPinIDGet(pinID, options)(this.axios, this.basePath);
    }
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPost(inlineObject25, options) {
        return exports.PinApiFp(this.configuration).pinsPost(inlineObject25, options)(this.axios, this.basePath);
    }
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    publicIconUsernameGet(options) {
        return exports.PublicApiFp(this.configuration).publicIconUsernameGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsDelete(options) {
        return exports.SessionsApiFp(this.configuration).usersMeSessionsDelete(options)(this.axios, this.basePath);
    }
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsGet(options) {
        return exports.SessionsApiFp(this.configuration).usersMeSessionsGet(options)(this.axios, this.basePath);
    }
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsReferenceIDDelete(referenceID, options) {
        return exports.SessionsApiFp(this.configuration).usersMeSessionsReferenceIDDelete(referenceID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsGet(messageID, options) {
        return exports.StampApiFp(this.configuration).messagesMessageIDStampsGet(messageID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDDelete(messageID, stampID, options) {
        return exports.StampApiFp(this.configuration).messagesMessageIDStampsStampIDDelete(messageID, stampID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDPost(messageID, stampID, options) {
        return exports.StampApiFp(this.configuration).messagesMessageIDStampsStampIDPost(messageID, stampID, options)(this.axios, this.basePath);
    }
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsGet(options) {
        return exports.StampApiFp(this.configuration).stampsGet(options)(this.axios, this.basePath);
    }
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsPost(name, file, options) {
        return exports.StampApiFp(this.configuration).stampsPost(name, file, options)(this.axios, this.basePath);
    }
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDDelete(stampID, options) {
        return exports.StampApiFp(this.configuration).stampsStampIDDelete(stampID, options)(this.axios, this.basePath);
    }
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDGet(stampID, options) {
        return exports.StampApiFp(this.configuration).stampsStampIDGet(stampID, options)(this.axios, this.basePath);
    }
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDPatch(stampID, name, file, options) {
        return exports.StampApiFp(this.configuration).stampsStampIDPatch(stampID, name, file, options)(this.axios, this.basePath);
    }
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    usersMeStampHistoryGet(options) {
        return exports.StampApiFp(this.configuration).usersMeStampHistoryGet(options)(this.axios, this.basePath);
    }
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDDelete(channelID, options) {
        return exports.StarApiFp(this.configuration).usersMeStarsChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDPut(channelID, options) {
        return exports.StarApiFp(this.configuration).usersMeStarsChannelIDPut(channelID, options)(this.axios, this.basePath);
    }
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsGet(options) {
        return exports.StarApiFp(this.configuration).usersMeStarsGet(options)(this.axios, this.basePath);
    }
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsChannelIDDelete(channelID, options) {
        return exports.UnreadApiFp(this.configuration).usersMeUnreadChannelsChannelIDDelete(channelID, options)(this.axios, this.basePath);
    }
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsGet(options) {
        return exports.UnreadApiFp(this.configuration).usersMeUnreadChannelsGet(options)(this.axios, this.basePath);
    }
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersGet(options) {
        return exports.UserApiFp(this.configuration).usersGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeGet(options) {
        return exports.UserApiFp(this.configuration).usersMeGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconGet(options) {
        return exports.UserApiFp(this.configuration).usersMeIconGet(options)(this.axios, this.basePath);
    }
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconPut(file, options) {
        return exports.UserApiFp(this.configuration).usersMeIconPut(file, options)(this.axios, this.basePath);
    }
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePasswordPut(inlineObject6, options) {
        return exports.UserApiFp(this.configuration).usersMePasswordPut(inlineObject6, options)(this.axios, this.basePath);
    }
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePatch(inlineObject5, options) {
        return exports.UserApiFp(this.configuration).usersMePatch(inlineObject5, options)(this.axios, this.basePath);
    }
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeQrCodeGet(options) {
        return exports.UserApiFp(this.configuration).usersMeQrCodeGet(options)(this.axios, this.basePath);
    }
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersPost(inlineObject4, options) {
        return exports.UserApiFp(this.configuration).usersPost(inlineObject4, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDGet(userID, options) {
        return exports.UserApiFp(this.configuration).usersUserIDGet(userID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDIconGet(userID, options) {
        return exports.UserApiFp(this.configuration).usersUserIDIconGet(userID, options)(this.axios, this.basePath);
    }
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGet(options) {
        return exports.UserGroupApiFp(this.configuration).groupsGet(options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDDelete(groupID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDDelete(groupID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDGet(groupID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDGet(groupID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersGet(groupID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDMembersGet(groupID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersPost(groupID, inlineObject30, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDMembersPost(groupID, inlineObject30, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersUserIDDelete(groupID, userID, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDMembersUserIDDelete(groupID, userID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDPatch(groupID, inlineObject29, options) {
        return exports.UserGroupApiFp(this.configuration).groupsGroupIDPatch(groupID, inlineObject29, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーグループを作成します
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsPost(inlineObject28, options) {
        return exports.UserGroupApiFp(this.configuration).groupsPost(inlineObject28, options)(this.axios, this.basePath);
    }
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersMeGroupsGet(options) {
        return exports.UserGroupApiFp(this.configuration).usersMeGroupsGet(options)(this.axios, this.basePath);
    }
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersUserIDGroupsGet(options) {
        return exports.UserGroupApiFp(this.configuration).usersUserIDGroupsGet(options)(this.axios, this.basePath);
    }
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    tagsTagIDGet(tagID, options) {
        return exports.UserTagApiFp(this.configuration).tagsTagIDGet(tagID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsGet(userID, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsGet(userID, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsPost(userID, inlineObject12, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsPost(userID, inlineObject12, options)(this.axios, this.basePath);
    }
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDDelete(userID, tagID, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsTagIDDelete(userID, tagID, options)(this.axios, this.basePath);
    }
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options) {
        return exports.UserTagApiFp(this.configuration).usersUserIDTagsTagIDPatch(userID, tagID, inlineObject13, options)(this.axios, this.basePath);
    }
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksGet(options) {
        return exports.WebhookApiFp(this.configuration).webhooksGet(options)(this.axios, this.basePath);
    }
    /**
     * webhookを作成します。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksPost(inlineObject26, options) {
        return exports.WebhookApiFp(this.configuration).webhooksPost(inlineObject26, options)(this.axios, this.basePath);
    }
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDDelete(webhookID, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDDelete(webhookID, options)(this.axios, this.basePath);
    }
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGet(webhookID, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDGet(webhookID, options)(this.axios, this.basePath);
    }
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGithubPost(webhookID, body, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDGithubPost(webhookID, body, options)(this.axios, this.basePath);
    }
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconGet(webhookID, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDIconGet(webhookID, options)(this.axios, this.basePath);
    }
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconPut(webhookID, file, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDIconPut(webhookID, file, options)(this.axios, this.basePath);
    }
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPatch(webhookID, inlineObject27, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDPatch(webhookID, inlineObject27, options)(this.axios, this.basePath);
    }
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options) {
        return exports.WebhookApiFp(this.configuration).webhooksWebhookIDPost(webhookID, xTRAQChannelId, xTRAQSignature, body, options)(this.axios, this.basePath);
    }
}
exports.Apis = Apis;
