/**
 * traQ API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference path="../../bin/generated/custom.d.ts" />
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AllowedClientInfo
 */
export interface AllowedClientInfo {
    /**
     * OAuth2アクセストークンUUID
     * @type {string}
     * @memberof AllowedClientInfo
     */
    tokenId?: string;
    /**
     * クライアントID
     * @type {string}
     * @memberof AllowedClientInfo
     */
    clientId?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof AllowedClientInfo
     */
    name?: string;
    /**
     * クライアント説明
     * @type {string}
     * @memberof AllowedClientInfo
     */
    description?: string;
    /**
     * クライアント作成者UUID
     * @type {string}
     * @memberof AllowedClientInfo
     */
    creatorId?: string;
    /**
     * 要求スコープの配列
     * @type {Array<string>}
     * @memberof AllowedClientInfo
     */
    scopes?: Array<string>;
    /**
     * 承認日時
     * @type {Date}
     * @memberof AllowedClientInfo
     */
    approvedAt?: Date;
}
/**
 *
 * @export
 * @interface Bot
 */
export interface Bot {
    /**
     * BOT UUID
     * @type {string}
     * @memberof Bot
     */
    botId?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof Bot
     */
    botUserId?: string;
    /**
     * BOT説明
     * @type {string}
     * @memberof Bot
     */
    description?: string;
    /**
     * BOTが購読しているイベントの配列
     * @type {Array<string>}
     * @memberof Bot
     */
    subscribeEvents?: Array<string>;
    /**
     * BOT状態
     * @type {number}
     * @memberof Bot
     */
    state?: number;
    /**
     * BOT作成者UUID
     * @type {string}
     * @memberof Bot
     */
    creatorId?: string;
    /**
     * BOT作成日時
     * @type {Date}
     * @memberof Bot
     */
    createdAt?: Date;
    /**
     * BOT更新日時
     * @type {Date}
     * @memberof Bot
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface BotDetail
 */
export interface BotDetail {
    /**
     * BOT UUID
     * @type {string}
     * @memberof BotDetail
     */
    botId?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof BotDetail
     */
    botUserId?: string;
    /**
     * BOT説明
     * @type {string}
     * @memberof BotDetail
     */
    description?: string;
    /**
     * BOTが購読しているイベントの配列
     * @type {Array<string>}
     * @memberof BotDetail
     */
    subscribeEvents?: Array<string>;
    /**
     * BOT状態
     * @type {number}
     * @memberof BotDetail
     */
    state?: number;
    /**
     * BOT作成者UUID
     * @type {string}
     * @memberof BotDetail
     */
    creatorId?: string;
    /**
     * BOT作成日時
     * @type {Date}
     * @memberof BotDetail
     */
    createdAt?: Date;
    /**
     * BOT更新日時
     * @type {Date}
     * @memberof BotDetail
     */
    updatedAt?: Date;
    /**
     * BOT認証コード
     * @type {string}
     * @memberof BotDetail
     */
    verificationCode?: string;
    /**
     * BOTアクセストークン
     * @type {string}
     * @memberof BotDetail
     */
    accessToken?: string;
    /**
     * BOTサーバーエンドポイント
     * @type {string}
     * @memberof BotDetail
     */
    postUrl?: string;
    /**
     * 権限昇格されているかどうか
     * @type {boolean}
     * @memberof BotDetail
     */
    privileged?: boolean;
    /**
     * BOTインストールコード
     * @type {string}
     * @memberof BotDetail
     */
    botCode?: string;
}
/**
 *
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof Channel
     */
    channelId?: string;
    /**
     * チャンネル名
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     * privateチャンネルの場合は参加しているメンバー、公開チャンネルの場合は空
     * @type {Array<string>}
     * @memberof Channel
     */
    member?: Array<string>;
    /**
     * 親の階層のチャンネルUUID
     * @type {string}
     * @memberof Channel
     */
    parent?: string;
    /**
     * チャンネルトピック
     * @type {string}
     * @memberof Channel
     */
    topic?: string;
    /**
     * 子のチャンネルUUIDの配列
     * @type {Array<string>}
     * @memberof Channel
     */
    children?: Array<string>;
    /**
     * チャンネルの可視状態
     * @type {boolean}
     * @memberof Channel
     */
    visibility?: boolean;
    /**
     * 強制通知チャンネルか
     * @type {boolean}
     * @memberof Channel
     */
    force?: boolean;
    /**
     * プライベートチャンネルか
     * @type {boolean}
     * @memberof Channel
     */
    _private?: boolean;
    /**
     * ダイレクトメッセージチャンネルか
     * @type {boolean}
     * @memberof Channel
     */
    dm?: boolean;
}
/**
 *
 * @export
 * @interface ClientInfo
 */
export interface ClientInfo {
    /**
     * クライアントID
     * @type {string}
     * @memberof ClientInfo
     */
    clientId?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof ClientInfo
     */
    name?: string;
    /**
     * クライアント説明
     * @type {string}
     * @memberof ClientInfo
     */
    description?: string;
    /**
     * クライアント作成者UUID
     * @type {string}
     * @memberof ClientInfo
     */
    creatorId?: string;
}
/**
 *
 * @export
 * @interface ClipsFolder
 */
export interface ClipsFolder {
    /**
     * フォルダUUID
     * @type {string}
     * @memberof ClipsFolder
     */
    id?: string;
    /**
     * フォルダ名
     * @type {string}
     * @memberof ClipsFolder
     */
    name?: string;
    /**
     * フォルダ作成日時
     * @type {Date}
     * @memberof ClipsFolder
     */
    createdAt?: Date;
}
/**
 *
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * ファイルUUID
     * @type {string}
     * @memberof FileInfo
     */
    fileId?: string;
    /**
     * ファイル名
     * @type {string}
     * @memberof FileInfo
     */
    name?: string;
    /**
     * MIMEタイプ
     * @type {string}
     * @memberof FileInfo
     */
    mime?: string;
    /**
     * ファイルサイズ
     * @type {number}
     * @memberof FileInfo
     */
    size?: number;
    /**
     * MD5ハッシュ
     * @type {string}
     * @memberof FileInfo
     */
    md5?: string;
    /**
     * サムネイルがあるかどうか
     * @type {boolean}
     * @memberof FileInfo
     */
    hasThumb?: boolean;
    /**
     * サムネイル幅
     * @type {number}
     * @memberof FileInfo
     */
    thumbWidth?: number;
    /**
     * サムネイル高さ
     * @type {number}
     * @memberof FileInfo
     */
    thumbHeight?: number;
    /**
     * アップロード日時
     * @type {Date}
     * @memberof FileInfo
     */
    datetime?: Date;
}
/**
 *
 * @export
 * @interface HeartbeatRes
 */
export interface HeartbeatRes {
    /**
     *
     * @type {Array<HeartbeatResUserStatuses>}
     * @memberof HeartbeatRes
     */
    userStatuses?: Array<HeartbeatResUserStatuses>;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof HeartbeatRes
     */
    channelId?: string;
}
/**
 *
 * @export
 * @interface HeartbeatResUserStatuses
 */
export interface HeartbeatResUserStatuses {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof HeartbeatResUserStatuses
     */
    userId?: string;
    /**
     * ユーザー状態
     * @type {string}
     * @memberof HeartbeatResUserStatuses
     */
    status?: HeartbeatResUserStatusesStatusEnum;
}
/**
    * @export
    * @enum {string}
    */
export declare enum HeartbeatResUserStatusesStatusEnum {
    Monitoring = "monitoring",
    Editing = "editing",
    None = "none"
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject
     */
    pass: string;
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    responseType?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    redirectUri?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    scope?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    codeChallenge?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    codeChallengeMethod?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    nonce?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject1
     */
    prompt?: string;
}
/**
 *
 * @export
 * @interface InlineObject10
 */
export interface InlineObject10 {
    /**
     * フォルダ名(30文字以内)
     * @type {string}
     * @memberof InlineObject10
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject11
 */
export interface InlineObject11 {
    /**
     * Markdown形式のメッセージ本文
     * @type {string}
     * @memberof InlineObject11
     */
    text: string;
}
/**
 *
 * @export
 * @interface InlineObject12
 */
export interface InlineObject12 {
    /**
     * 追加するタグ(30文字まで)
     * @type {string}
     * @memberof InlineObject12
     */
    tag: string;
}
/**
 *
 * @export
 * @interface InlineObject13
 */
export interface InlineObject13 {
    /**
     * lockするときはtrue,解除するときはfalse
     * @type {boolean}
     * @memberof InlineObject13
     */
    isLocked: boolean;
}
/**
 *
 * @export
 * @interface InlineObject14
 */
export interface InlineObject14 {
    /**
     * editing,monitoring,noneでユーザーの状態を指定する
     * @type {string}
     * @memberof InlineObject14
     */
    status: InlineObject14StatusEnum;
    /**
     * 現在いるチャンネルId
     * @type {string}
     * @memberof InlineObject14
     */
    channelId: string;
}
/**
    * @export
    * @enum {string}
    */
export declare enum InlineObject14StatusEnum {
    None = "none",
    Monitoring = "monitoring",
    Editing = "editing"
}
/**
 *
 * @export
 * @interface InlineObject15
 */
export interface InlineObject15 {
    /**
     * プライベートチャンネルかどうか
     * @type {boolean}
     * @memberof InlineObject15
     */
    _private?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof InlineObject15
     */
    member?: Array<string>;
    /**
     * チャンネル名
     * @type {string}
     * @memberof InlineObject15
     */
    name?: string;
    /**
     * 親のチャンネルID
     * @type {string}
     * @memberof InlineObject15
     */
    parent?: string;
}
/**
 *
 * @export
 * @interface InlineObject16
 */
export interface InlineObject16 {
    /**
     * チャンネル名
     * @type {string}
     * @memberof InlineObject16
     */
    name?: string;
    /**
     * 変更後のvisibility
     * @type {boolean}
     * @memberof InlineObject16
     */
    visibility?: boolean;
    /**
     * 強制通知かどうか
     * @type {boolean}
     * @memberof InlineObject16
     */
    force?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject17
 */
export interface InlineObject17 {
    /**
     * 変更後の親チャンネルID
     * @type {string}
     * @memberof InlineObject17
     */
    parent: string;
}
/**
 *
 * @export
 * @interface InlineObject18
 */
export interface InlineObject18 {
    /**
     * チャンネル名
     * @type {string}
     * @memberof InlineObject18
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineObject19
 */
export interface InlineObject19 {
    /**
     * チャンネルの説明
     * @type {string}
     * @memberof InlineObject19
     */
    text: string;
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 承諾する場合は\"approve\"
     * @type {string}
     * @memberof InlineObject2
     */
    submit: string;
}
/**
 *
 * @export
 * @interface InlineObject20
 */
export interface InlineObject20 {
    /**
     * Markdown形式のメッセージ本文
     * @type {string}
     * @memberof InlineObject20
     */
    text: string;
}
/**
 *
 * @export
 * @interface InlineObject21
 */
export interface InlineObject21 {
    /**
     * 通知をつける人のユーザーIDの配列
     * @type {Array<string>}
     * @memberof InlineObject21
     */
    on?: Array<string>;
    /**
     * 通知をつけない人のユーザーIDの配列
     * @type {Array<string>}
     * @memberof InlineObject21
     */
    off?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject22
 */
export interface InlineObject22 {
    /**
     * ボットコード
     * @type {string}
     * @memberof InlineObject22
     */
    code: string;
}
/**
 *
 * @export
 * @interface InlineObject23
 */
export interface InlineObject23 {
    /**
     * FCMのデバイストークン
     * @type {string}
     * @memberof InlineObject23
     */
    token: string;
}
/**
 *
 * @export
 * @interface InlineObject24
 */
export interface InlineObject24 {
    /**
     * Markdown形式のメッセージ本文
     * @type {string}
     * @memberof InlineObject24
     */
    text: string;
}
/**
 *
 * @export
 * @interface InlineObject25
 */
export interface InlineObject25 {
    /**
     * 通報理由(100文字以内)
     * @type {string}
     * @memberof InlineObject25
     */
    reason: string;
}
/**
 *
 * @export
 * @interface InlineObject26
 */
export interface InlineObject26 {
    /**
     * ピン留めするメッセージID
     * @type {string}
     * @memberof InlineObject26
     */
    messageId: string;
}
/**
 *
 * @export
 * @interface InlineObject27
 */
export interface InlineObject27 {
    /**
     * webhookユーザーの表示名(32文字まで)
     * @type {string}
     * @memberof InlineObject27
     */
    name: string;
    /**
     * webhookの説明
     * @type {string}
     * @memberof InlineObject27
     */
    description: string;
    /**
     * デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
     * @type {string}
     * @memberof InlineObject27
     */
    channelId: string;
    /**
     * webhookシークレット
     * @type {string}
     * @memberof InlineObject27
     */
    secret?: string;
}
/**
 *
 * @export
 * @interface InlineObject28
 */
export interface InlineObject28 {
    /**
     * webhookユーザーの表示名(32文字まで)
     * @type {string}
     * @memberof InlineObject28
     */
    name?: string;
    /**
     * webhookの説明
     * @type {string}
     * @memberof InlineObject28
     */
    description?: string;
    /**
     * デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
     * @type {string}
     * @memberof InlineObject28
     */
    channelId?: string;
    /**
     * webhookシークレット
     * @type {string}
     * @memberof InlineObject28
     */
    secret?: string;
}
/**
 *
 * @export
 * @interface InlineObject29
 */
export interface InlineObject29 {
    /**
     * グループ名(30文字以内)
     * @type {string}
     * @memberof InlineObject29
     */
    name: string;
    /**
     * 説明
     * @type {string}
     * @memberof InlineObject29
     */
    description?: string;
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    grantType: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    redirectUri?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    codeVerifier?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    scope?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    refreshToken?: string;
    /**
     *
     * @type {string}
     * @memberof InlineObject3
     */
    clientSecret?: string;
}
/**
 *
 * @export
 * @interface InlineObject30
 */
export interface InlineObject30 {
    /**
     * グループ名(30文字以内)
     * @type {string}
     * @memberof InlineObject30
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof InlineObject30
     */
    description?: string;
    /**
     * 管理ユーザー
     * @type {string}
     * @memberof InlineObject30
     */
    adminUserId?: string;
}
/**
 *
 * @export
 * @interface InlineObject31
 */
export interface InlineObject31 {
    /**
     * 追加するユーザーのID
     * @type {string}
     * @memberof InlineObject31
     */
    userId: string;
}
/**
 *
 * @export
 * @interface InlineObject32
 */
export interface InlineObject32 {
    /**
     * クライアント名(1-32文字)
     * @type {string}
     * @memberof InlineObject32
     */
    name: string;
    /**
     * クライアントの説明
     * @type {string}
     * @memberof InlineObject32
     */
    description: string;
    /**
     * リダイレクト先のURI
     * @type {string}
     * @memberof InlineObject32
     */
    redirectUri: string;
    /**
     * 要求するスコープ(必ず１つ以上)
     * @type {Array<string>}
     * @memberof InlineObject32
     */
    scopes: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject33
 */
export interface InlineObject33 {
    /**
     * クライアント名(1-32文字)
     * @type {string}
     * @memberof InlineObject33
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof InlineObject33
     */
    description?: string;
    /**
     * リダイレクト先のURI
     * @type {string}
     * @memberof InlineObject33
     */
    redirectUri?: string;
}
/**
 *
 * @export
 * @interface InlineObject34
 */
export interface InlineObject34 {
    /**
     * botユーザーID(16文字まで)。自動的に先頭に\"BOT_\"が付与されます
     * @type {string}
     * @memberof InlineObject34
     */
    name: string;
    /**
     * botユーザーの表示名(32文字まで)
     * @type {string}
     * @memberof InlineObject34
     */
    displayName: string;
    /**
     * botの説明
     * @type {string}
     * @memberof InlineObject34
     */
    description: string;
    /**
     * botのPOSTエンドポイント
     * @type {string}
     * @memberof InlineObject34
     */
    postUrl: string;
}
/**
 *
 * @export
 * @interface InlineObject35
 */
export interface InlineObject35 {
    /**
     * Bot表示名
     * @type {string}
     * @memberof InlineObject35
     */
    displayName?: string;
    /**
     * Bot説明
     * @type {string}
     * @memberof InlineObject35
     */
    description?: string;
    /**
     * privileged属性
     * @type {boolean}
     * @memberof InlineObject35
     */
    privileged?: boolean;
    /**
     * BotのPOSTエンドポイント
     * @type {string}
     * @memberof InlineObject35
     */
    webhookUrl?: string;
}
/**
 *
 * @export
 * @interface InlineObject36
 */
export interface InlineObject36 {
    /**
     * 購読するイベントの配列
     * @type {Array<string>}
     * @memberof InlineObject36
     */
    events: Array<string>;
}
/**
 *
 * @export
 * @interface InlineObject37
 */
export interface InlineObject37 {
    /**
     * activeまたはinactive
     * @type {string}
     * @memberof InlineObject37
     */
    state: string;
}
/**
 *
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * ユーザー名(半角英数字とアンダーバー(_)の1文字以上32文字以下)
     * @type {string}
     * @memberof InlineObject4
     */
    name: string;
    /**
     * パスワード
     * @type {string}
     * @memberof InlineObject4
     */
    password: string;
}
/**
 *
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 新しい表示名(0-32文字)。変更しない場合は\"\"
     * @type {string}
     * @memberof InlineObject5
     */
    displayName?: string;
    /**
     * TwitterID
     * @type {string}
     * @memberof InlineObject5
     */
    twitterId?: string;
}
/**
 *
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof InlineObject6
     */
    password: string;
    /**
     * 新しいパスワード(10文字以上32文字以下のアスキー文字)
     * @type {string}
     * @memberof InlineObject6
     */
    newPassword: string;
}
/**
 *
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * クリップするメッセージID
     * @type {string}
     * @memberof InlineObject7
     */
    messageId: string;
    /**
     * クリップフォルダ名
     * @type {string}
     * @memberof InlineObject7
     */
    folderId?: string;
}
/**
 *
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * フォルダID
     * @type {string}
     * @memberof InlineObject8
     */
    folderId: string;
}
/**
 *
 * @export
 * @interface InlineObject9
 */
export interface InlineObject9 {
    /**
     * フォルダ名(30文字以内)
     * @type {string}
     * @memberof InlineObject9
     */
    name: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    accessToken: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    tokenType: string;
    /**
     *
     * @type {number}
     * @memberof InlineResponse200
     */
    expiresIn?: number;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    refreshToken?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    scope?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    idToken?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * スタンプID
     * @type {string}
     * @memberof InlineResponse2001
     */
    stampId?: string;
    /**
     * そのスタンプが最後に押された日時
     * @type {Date}
     * @memberof InlineResponse2001
     */
    datetime?: Date;
}
/**
 *
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    tagId?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse20010
     */
    tag?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof InlineResponse20010
     */
    users?: Array<string>;
}
/**
 *
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * Verification Token
     * @type {string}
     * @memberof InlineResponse20011
     */
    verificationToken?: string;
    /**
     * BOTアクセストークン
     * @type {string}
     * @memberof InlineResponse20011
     */
    accessToken?: string;
    /**
     * BOTインストールコード
     * @type {string}
     * @memberof InlineResponse20011
     */
    botCode?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    lastIP?: string;
    /**
     *
     * @type {string}
     * @memberof InlineResponse2002
     */
    lastUserAgent?: string;
    /**
     *
     * @type {Date}
     * @memberof InlineResponse2002
     */
    lastAccess?: Date;
    /**
     *
     * @type {Date}
     * @memberof InlineResponse2002
     */
    createdAt?: Date;
}
/**
 *
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * フォルダID
     * @type {string}
     * @memberof InlineResponse2003
     */
    folderId?: string;
    /**
     * クリップID
     * @type {string}
     * @memberof InlineResponse2003
     */
    clipId?: string;
    /**
     * クリップ日時
     * @type {Date}
     * @memberof InlineResponse2003
     */
    clippedAt?: Date;
    /**
     *
     * @type {Message}
     * @memberof InlineResponse2003
     */
    message?: Message;
}
/**
 *
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * クリップID
     * @type {string}
     * @memberof InlineResponse2004
     */
    clipId?: string;
    /**
     * クリップ日時
     * @type {Date}
     * @memberof InlineResponse2004
     */
    clippedAt?: Date;
    /**
     *
     * @type {Message}
     * @memberof InlineResponse2004
     */
    message?: Message;
}
/**
 *
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * チャンネルID
     * @type {string}
     * @memberof InlineResponse2005
     */
    channelId?: string;
    /**
     * そのチャンネルの未読メッセージ数
     * @type {number}
     * @memberof InlineResponse2005
     */
    count?: number;
    /**
     * 自分にメンションされたメッセージを含んでいるかどうか
     * @type {boolean}
     * @memberof InlineResponse2005
     */
    noticeable?: boolean;
    /**
     * そのチャンネルの最古の未読メッセージの日時
     * @type {Date}
     * @memberof InlineResponse2005
     */
    since?: Date;
    /**
     * そのチャンネルの最新の未読メッセージの日時
     * @type {Date}
     * @memberof InlineResponse2005
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * チャンネルトピック
     * @type {string}
     * @memberof InlineResponse2006
     */
    text?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * BotのID
     * @type {string}
     * @memberof InlineResponse2007
     */
    botId?: string;
    /**
     * BotのユーザーID
     * @type {string}
     * @memberof InlineResponse2007
     */
    botUserId?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 参加したBotのID
     * @type {string}
     * @memberof InlineResponse2008
     */
    botId?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 通報ID
     * @type {string}
     * @memberof InlineResponse2009
     */
    id?: string;
    /**
     * 通報対象のメッセージID
     * @type {string}
     * @memberof InlineResponse2009
     */
    messageId?: string;
    /**
     * 通報者ID
     * @type {string}
     * @memberof InlineResponse2009
     */
    reporter?: string;
    /**
     * 通報内容
     * @type {string}
     * @memberof InlineResponse2009
     */
    reason?: string;
    /**
     * 通報日時
     * @type {Date}
     * @memberof InlineResponse2009
     */
    createdAt?: Date;
}
/**
 *
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * クリップID
     * @type {string}
     * @memberof InlineResponse201
     */
    id?: string;
}
/**
 *
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * ピンID
     * @type {string}
     * @memberof InlineResponse2011
     */
    id?: string;
}
/**
 *
 * @export
 * @interface Me
 */
export interface Me {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof Me
     */
    userId?: string;
    /**
     * traQ ID
     * @type {string}
     * @memberof Me
     */
    name?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof Me
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof Me
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof Me
     */
    bot?: boolean;
    /**
     * ツイッターID
     * @type {string}
     * @memberof Me
     */
    twitterId?: string;
    /**
     * 最終オンライン日時(オンラインに１度もなってない場合はnull)
     * @type {Date}
     * @memberof Me
     */
    lastOnline?: Date;
    /**
     * 現在オンラインかどうか
     * @type {boolean}
     * @memberof Me
     */
    isOnline?: boolean;
    /**
     * アカウントが停止中かどうか
     * @type {boolean}
     * @memberof Me
     */
    suspended?: boolean;
    /**
     * アカウントの状態 (0:停止,1:有効,2:一時停止)
     * @type {number}
     * @memberof Me
     */
    accountStatus?: number;
    /**
     * ユーザーロール
     * @type {string}
     * @memberof Me
     */
    role?: string;
    /**
     * 所有している権限の配列
     * @type {Array<string>}
     * @memberof Me
     */
    permissions?: Array<string>;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * メッセージUUID
     * @type {string}
     * @memberof Message
     */
    messageId?: string;
    /**
     * 投稿者UUID
     * @type {string}
     * @memberof Message
     */
    userId?: string;
    /**
     * 投稿先チャンネルUUID
     * @type {string}
     * @memberof Message
     */
    parentChannelId?: string;
    /**
     * メッセージ本体
     * @type {string}
     * @memberof Message
     */
    content?: string;
    /**
     * メッセージ投稿日時
     * @type {Date}
     * @memberof Message
     */
    createdAt?: Date;
    /**
     * メッセージ更新日時
     * @type {Date}
     * @memberof Message
     */
    updatedAt?: Date;
    /**
     * ピン留めされているかどうか
     * @type {boolean}
     * @memberof Message
     */
    pin?: boolean;
    /**
     * 自分が通報しているかどうか
     * @type {boolean}
     * @memberof Message
     */
    reported?: boolean;
    /**
     * メッセージスタンプ配列
     * @type {Array<MessageStamp>}
     * @memberof Message
     */
    stampList?: Array<MessageStamp>;
}
/**
 *
 * @export
 * @interface MessageStamp
 */
export interface MessageStamp {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof MessageStamp
     */
    userId?: string;
    /**
     * スタンプUUID
     * @type {string}
     * @memberof MessageStamp
     */
    stampId?: string;
    /**
     * 押された個数
     * @type {number}
     * @memberof MessageStamp
     */
    count?: number;
    /**
     * 最初に押した日時
     * @type {Date}
     * @memberof MessageStamp
     */
    createdAt?: Date;
    /**
     * 最後に押した日時
     * @type {Date}
     * @memberof MessageStamp
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface OwnedClientInfo
 */
export interface OwnedClientInfo {
    /**
     * クライアントID
     * @type {string}
     * @memberof OwnedClientInfo
     */
    clientId?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof OwnedClientInfo
     */
    name?: string;
    /**
     * クライアント説明
     * @type {string}
     * @memberof OwnedClientInfo
     */
    description?: string;
    /**
     * クライアント作成者UUID
     * @type {string}
     * @memberof OwnedClientInfo
     */
    creatorId?: string;
    /**
     * 要求スコープの配列
     * @type {Array<string>}
     * @memberof OwnedClientInfo
     */
    scopes?: Array<string>;
    /**
     * OAuth2リダイレクトURL
     * @type {string}
     * @memberof OwnedClientInfo
     */
    redirectUri?: string;
    /**
     * クライアントSecret
     * @type {string}
     * @memberof OwnedClientInfo
     */
    secret?: string;
}
/**
 *
 * @export
 * @interface Pin
 */
export interface Pin {
    /**
     * ピンUUID
     * @type {string}
     * @memberof Pin
     */
    pinId?: string;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof Pin
     */
    channelId?: string;
    /**
     * ピン留めしたユーザーのUUID
     * @type {string}
     * @memberof Pin
     */
    userId?: string;
    /**
     * ピン留めした日時
     * @type {Date}
     * @memberof Pin
     */
    dateTime?: Date;
    /**
     *
     * @type {Message}
     * @memberof Pin
     */
    message?: Message;
}
/**
 *
 * @export
 * @interface Stamp
 */
export interface Stamp {
    /**
     * スタンプUUID
     * @type {string}
     * @memberof Stamp
     */
    id?: string;
    /**
     * スタンプ名
     * @type {string}
     * @memberof Stamp
     */
    name?: string;
    /**
     * スタンプ作成者UUID
     * @type {string}
     * @memberof Stamp
     */
    creatorId?: string;
    /**
     * スタンプファイルUUID
     * @type {string}
     * @memberof Stamp
     */
    fileId?: string;
    /**
     * スタンプ作成日時
     * @type {Date}
     * @memberof Stamp
     */
    createdAt?: Date;
    /**
     * スタンプ更新日時
     * @type {Date}
     * @memberof Stamp
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * タグUUID
     * @type {string}
     * @memberof Tag
     */
    tagId?: string;
    /**
     * タグ文字列
     * @type {string}
     * @memberof Tag
     */
    tag?: string;
    /**
     * タグがロックされているかどうか
     * @type {boolean}
     * @memberof Tag
     */
    isLocked?: boolean;
    /**
     * タグ付与日時
     * @type {Date}
     * @memberof Tag
     */
    createdAt?: Date;
    /**
     * タグ更新日時
     * @type {Date}
     * @memberof Tag
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof User
     */
    userId?: string;
    /**
     * traQ ID
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof User
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof User
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof User
     */
    bot?: boolean;
    /**
     * ツイッターID
     * @type {string}
     * @memberof User
     */
    twitterId?: string;
    /**
     * 最終オンライン日時(オンラインに１度もなってない場合はnull)
     * @type {Date}
     * @memberof User
     */
    lastOnline?: Date;
    /**
     * 現在オンラインかどうか
     * @type {boolean}
     * @memberof User
     */
    isOnline?: boolean;
    /**
     * アカウントが停止中かどうか
     * @type {boolean}
     * @memberof User
     */
    suspended?: boolean;
    /**
     * アカウントの状態 (0:停止,1:有効,2:一時停止)
     * @type {number}
     * @memberof User
     */
    accountStatus?: number;
}
/**
 *
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof UserDetail
     */
    userId?: string;
    /**
     * traQ ID
     * @type {string}
     * @memberof UserDetail
     */
    name?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof UserDetail
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof UserDetail
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    bot?: boolean;
    /**
     * ツイッターID
     * @type {string}
     * @memberof UserDetail
     */
    twitterId?: string;
    /**
     * 最終オンライン日時(オンラインに１度もなってない場合はnull)
     * @type {Date}
     * @memberof UserDetail
     */
    lastOnline?: Date;
    /**
     * 現在オンラインかどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    isOnline?: boolean;
    /**
     * アカウントが停止中かどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    suspended?: boolean;
    /**
     * アカウントの状態 (0:停止,1:有効,2:一時停止)
     * @type {number}
     * @memberof UserDetail
     */
    accountStatus?: number;
    /**
     *
     * @type {Array<Tag>}
     * @memberof UserDetail
     */
    tagList?: Array<Tag>;
}
/**
 *
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * グループUUID
     * @type {string}
     * @memberof UserGroup
     */
    groupId?: string;
    /**
     * グループ名
     * @type {string}
     * @memberof UserGroup
     */
    name?: string;
    /**
     * グループ説明
     * @type {string}
     * @memberof UserGroup
     */
    description?: string;
    /**
     * グループタイプ
     * @type {string}
     * @memberof UserGroup
     */
    type?: string;
    /**
     * グループ管理者UUID
     * @type {string}
     * @memberof UserGroup
     */
    adminUserId?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof UserGroup
     */
    members?: Array<string>;
    /**
     * グループ作成日時
     * @type {Date}
     * @memberof UserGroup
     */
    createdAt?: Date;
    /**
     * グループ更新日時
     * @type {Date}
     * @memberof UserGroup
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     * Webhook UUID
     * @type {string}
     * @memberof Webhook
     */
    webhookId?: string;
    /**
     * WebhookユーザーのUUID
     * @type {string}
     * @memberof Webhook
     */
    botUserId?: string;
    /**
     * Webhookユーザー表示名
     * @type {string}
     * @memberof Webhook
     */
    displayName?: string;
    /**
     * Webhook説明
     * @type {string}
     * @memberof Webhook
     */
    description?: string;
    /**
     * Secure Webhookかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    secure?: boolean;
    /**
     * デフォルト投稿先チャンネルUUID
     * @type {string}
     * @memberof Webhook
     */
    channelId?: string;
    /**
     * Webhook作成者UUID
     * @type {string}
     * @memberof Webhook
     */
    creatorId?: string;
    /**
     * Webhook作成日時
     * @type {Date}
     * @memberof Webhook
     */
    createdAt?: Date;
    /**
     * Webhook更新日時
     * @type {Date}
     * @memberof Webhook
     */
    updatedAt?: Date;
}
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export declare const ActivityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityLatestMessagesGet(limit?: number, subscribe?: boolean, options?: any): RequestArgs;
};
/**
 * ActivityApi - functional programming interface
 * @export
 */
export declare const ActivityApiFp: (configuration?: Configuration) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityLatestMessagesGet(limit?: number, subscribe?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
};
/**
 * ActivityApi - factory interface
 * @export
 */
export declare const ActivityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activityLatestMessagesGet(limit?: number, subscribe?: boolean, options?: any): AxiosPromise<Message[]>;
};
/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export declare class ActivityApi extends BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    activityLatestMessagesGet(limit?: number, subscribe?: boolean, options?: any): AxiosPromise<Message[]>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(redirect?: string, inlineObject?: InlineObject, options?: any): RequestArgs;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutPost(redirect?: string, options?: any): RequestArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(redirect?: string, inlineObject?: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutPost(redirect?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(redirect?: string, inlineObject?: InlineObject, options?: any): AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutPost(redirect?: string, options?: any): AxiosPromise<Response>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    loginPost(redirect?: string, inlineObject?: InlineObject, options?: any): AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logoutPost(redirect?: string, options?: any): AxiosPromise<Response>;
}
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export declare const AuthorizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizeDecidePost(submit: string, options?: any): RequestArgs;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizeGet(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): RequestArgs;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizePost(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): RequestArgs;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2TokenPost(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): RequestArgs;
};
/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export declare const AuthorizationApiFp: (configuration?: Configuration) => {
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizeDecidePost(submit: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizeGet(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizePost(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2TokenPost(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>;
};
/**
 * AuthorizationApi - factory interface
 * @export
 */
export declare const AuthorizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizeDecidePost(submit: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizeGet(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2AuthorizePost(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oauth2TokenPost(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export declare class AuthorizationApi extends BaseAPI {
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeDecidePost(submit: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeGet(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizePost(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2TokenPost(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): AxiosPromise<InlineResponse200>;
}
/**
 * BotApi - axios parameter creator
 * @export
 */
export declare const BotApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDChannelsGet(botID: string, options?: any): RequestArgs;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDDelete(botID: string, options?: any): RequestArgs;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDDetailGet(botID: string, options?: any): RequestArgs;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDEventsPut(botID: string, inlineObject36?: InlineObject36, options?: any): RequestArgs;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDGet(botID: string, options?: any): RequestArgs;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDIconGet(botID: string, options?: any): RequestArgs;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDIconPut(botID: string, file?: any, options?: any): RequestArgs;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDPatch(botID: string, inlineObject35?: InlineObject35, options?: any): RequestArgs;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDReissuePost(botID: string, options?: any): RequestArgs;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDStatePut(botID: string, inlineObject37?: InlineObject37, options?: any): RequestArgs;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsGet(options?: any): RequestArgs;
    /**
     * Botを作成します。
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsPost(inlineObject34?: InlineObject34, options?: any): RequestArgs;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsBotIDDelete(channelID: string, botID: string, options?: any): RequestArgs;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsGet(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsPost(channelID: string, inlineObject22?: InlineObject22, options?: any): RequestArgs;
};
/**
 * BotApi - functional programming interface
 * @export
 */
export declare const BotApiFp: (configuration?: Configuration) => {
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDChannelsGet(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDDelete(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDDetailGet(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotDetail>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDEventsPut(botID: string, inlineObject36?: InlineObject36, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDGet(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDIconGet(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDIconPut(botID: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDPatch(botID: string, inlineObject35?: InlineObject35, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDReissuePost(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDStatePut(botID: string, inlineObject37?: InlineObject37, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot[]>;
    /**
     * Botを作成します。
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsPost(inlineObject34?: InlineObject34, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotDetail>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsBotIDDelete(channelID: string, botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsGet(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007[]>;
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsPost(channelID: string, inlineObject22?: InlineObject22, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>;
};
/**
 * BotApi - factory interface
 * @export
 */
export declare const BotApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDChannelsGet(botID: string, options?: any): AxiosPromise<string[]>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDDelete(botID: string, options?: any): AxiosPromise<Response>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDDetailGet(botID: string, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDEventsPut(botID: string, inlineObject36?: InlineObject36, options?: any): AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDGet(botID: string, options?: any): AxiosPromise<Bot>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDIconGet(botID: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDIconPut(botID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDPatch(botID: string, inlineObject35?: InlineObject35, options?: any): AxiosPromise<Response>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDReissuePost(botID: string, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsBotIDStatePut(botID: string, inlineObject37?: InlineObject37, options?: any): AxiosPromise<Response>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsGet(options?: any): AxiosPromise<Bot[]>;
    /**
     * Botを作成します。
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    botsPost(inlineObject34?: InlineObject34, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsBotIDDelete(channelID: string, botID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsGet(channelID: string, options?: any): AxiosPromise<InlineResponse2007[]>;
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDBotsPost(channelID: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<InlineResponse2008>;
};
/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
export declare class BotApi extends BaseAPI {
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDChannelsGet(botID: string, options?: any): AxiosPromise<string[]>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDelete(botID: string, options?: any): AxiosPromise<Response>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDetailGet(botID: string, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDEventsPut(botID: string, inlineObject36?: InlineObject36, options?: any): AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDGet(botID: string, options?: any): AxiosPromise<Bot>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconGet(botID: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconPut(botID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDPatch(botID: string, inlineObject35?: InlineObject35, options?: any): AxiosPromise<Response>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDReissuePost(botID: string, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDStatePut(botID: string, inlineObject37?: InlineObject37, options?: any): AxiosPromise<Response>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsGet(options?: any): AxiosPromise<Bot[]>;
    /**
     * Botを作成します。
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsPost(inlineObject34?: InlineObject34, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsBotIDDelete(channelID: string, botID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsGet(channelID: string, options?: any): AxiosPromise<InlineResponse2007[]>;
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsPost(channelID: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<InlineResponse2008>;
}
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const ChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDChildrenPost(channelID: string, inlineObject18?: InlineObject18, options?: any): RequestArgs;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDDelete(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDGet(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDParentPut(channelID: string, inlineObject17?: InlineObject17, options?: any): RequestArgs;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDPatch(channelID: string, inlineObject16?: InlineObject16, options?: any): RequestArgs;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDTopicGet(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDTopicPut(channelID: string, inlineObject19?: InlineObject19, options?: any): RequestArgs;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsGet(options?: any): RequestArgs;
    /**
     * チャンネルを作成します。
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPost(inlineObject15?: InlineObject15, options?: any): RequestArgs;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const ChannelApiFp: (configuration?: Configuration) => {
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDChildrenPost(channelID: string, inlineObject18?: InlineObject18, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDDelete(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDGet(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDParentPut(channelID: string, inlineObject17?: InlineObject17, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDPatch(channelID: string, inlineObject16?: InlineObject16, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDTopicGet(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDTopicPut(channelID: string, inlineObject19?: InlineObject19, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel[]>;
    /**
     * チャンネルを作成します。
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPost(inlineObject15?: InlineObject15, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const ChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDChildrenPost(channelID: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDGet(channelID: string, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDParentPut(channelID: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDPatch(channelID: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDTopicGet(channelID: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDTopicPut(channelID: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<Response>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsGet(options?: any): AxiosPromise<Channel[]>;
    /**
     * チャンネルを作成します。
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsPost(inlineObject15?: InlineObject15, options?: any): AxiosPromise<Channel>;
};
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI {
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDChildrenPost(channelID: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDGet(channelID: string, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDParentPut(channelID: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDPatch(channelID: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicGet(channelID: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicPut(channelID: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<Response>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsGet(options?: any): AxiosPromise<Channel[]>;
    /**
     * チャンネルを作成します。
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsPost(inlineObject15?: InlineObject15, options?: any): AxiosPromise<Channel>;
}
/**
 * ClientApi - axios parameter creator
 * @export
 */
export declare const ClientApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDDelete(clientID: string, options?: any): RequestArgs;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDDetailGet(clientID: string, options?: any): RequestArgs;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDGet(clientID: string, options?: any): RequestArgs;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDPatch(clientID: string, inlineObject33?: InlineObject33, options?: any): RequestArgs;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsGet(options?: any): RequestArgs;
    /**
     * クライアントを登録します。
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsPost(inlineObject32?: InlineObject32, options?: any): RequestArgs;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeTokensGet(options?: any): RequestArgs;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID: string, options?: any): RequestArgs;
};
/**
 * ClientApi - functional programming interface
 * @export
 */
export declare const ClientApiFp: (configuration?: Configuration) => {
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDDelete(clientID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDDetailGet(clientID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDGet(clientID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDPatch(clientID: string, inlineObject33?: InlineObject33, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnedClientInfo[]>;
    /**
     * クライアントを登録します。
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsPost(inlineObject32?: InlineObject32, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeTokensGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * ClientApi - factory interface
 * @export
 */
export declare const ClientApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDDelete(clientID: string, options?: any): AxiosPromise<Response>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDDetailGet(clientID: string, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDGet(clientID: string, options?: any): AxiosPromise<ClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsClientIDPatch(clientID: string, inlineObject33?: InlineObject33, options?: any): AxiosPromise<Response>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsGet(options?: any): AxiosPromise<OwnedClientInfo[]>;
    /**
     * クライアントを登録します。
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clientsPost(inlineObject32?: InlineObject32, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeTokensGet(options?: any): AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID: string, options?: any): AxiosPromise<Response>;
};
/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export declare class ClientApi extends BaseAPI {
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDelete(clientID: string, options?: any): AxiosPromise<Response>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDetailGet(clientID: string, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDGet(clientID: string, options?: any): AxiosPromise<ClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDPatch(clientID: string, inlineObject33?: InlineObject33, options?: any): AxiosPromise<Response>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsGet(options?: any): AxiosPromise<OwnedClientInfo[]>;
    /**
     * クライアントを登録します。
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsPost(inlineObject32?: InlineObject32, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensGet(options?: any): AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID: string, options?: any): AxiosPromise<Response>;
}
/**
 * ClipApi - axios parameter creator
 * @export
 */
export declare const ClipApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDDelete(clipID: string, options?: any): RequestArgs;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDFolderGet(clipID: string, options?: any): RequestArgs;
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDFolderPut(clipID: string, inlineObject8?: InlineObject8, options?: any): RequestArgs;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDGet(clipID: string, options?: any): RequestArgs;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDDelete(folderID: string, options?: any): RequestArgs;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDGet(folderID: string, options?: any): RequestArgs;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDPatch(folderID: string, inlineObject10?: InlineObject10, options?: any): RequestArgs;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersGet(options?: any): RequestArgs;
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersPost(inlineObject9?: InlineObject9, options?: any): RequestArgs;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsGet(options?: any): RequestArgs;
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsPost(inlineObject7?: InlineObject7, options?: any): RequestArgs;
};
/**
 * ClipApi - functional programming interface
 * @export
 */
export declare const ClipApiFp: (configuration?: Configuration) => {
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDDelete(clipID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDFolderGet(clipID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDFolderPut(clipID: string, inlineObject8?: InlineObject8, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDGet(clipID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDDelete(folderID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDGet(folderID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004[]>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDPatch(folderID: string, inlineObject10?: InlineObject10, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipsFolder[]>;
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersPost(inlineObject9?: InlineObject9, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipsFolder>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003[]>;
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsPost(inlineObject7?: InlineObject7, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>;
};
/**
 * ClipApi - factory interface
 * @export
 */
export declare const ClipApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDDelete(clipID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDFolderGet(clipID: string, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDFolderPut(clipID: string, inlineObject8?: InlineObject8, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsClipIDGet(clipID: string, options?: any): AxiosPromise<Message>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDDelete(folderID: string, options?: any): AxiosPromise<Response>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDGet(folderID: string, options?: any): AxiosPromise<InlineResponse2004[]>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersFolderIDPatch(folderID: string, inlineObject10?: InlineObject10, options?: any): AxiosPromise<Response>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersGet(options?: any): AxiosPromise<ClipsFolder[]>;
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsFoldersPost(inlineObject9?: InlineObject9, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsGet(options?: any): AxiosPromise<InlineResponse2003[]>;
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeClipsPost(inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse201>;
};
/**
 * ClipApi - object-oriented interface
 * @export
 * @class ClipApi
 * @extends {BaseAPI}
 */
export declare class ClipApi extends BaseAPI {
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDDelete(clipID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderGet(clipID: string, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderPut(clipID: string, inlineObject8?: InlineObject8, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDGet(clipID: string, options?: any): AxiosPromise<Message>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDDelete(folderID: string, options?: any): AxiosPromise<Response>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDGet(folderID: string, options?: any): AxiosPromise<InlineResponse2004[]>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDPatch(folderID: string, inlineObject10?: InlineObject10, options?: any): AxiosPromise<Response>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersGet(options?: any): AxiosPromise<ClipsFolder[]>;
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersPost(inlineObject9?: InlineObject9, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsGet(options?: any): AxiosPromise<InlineResponse2003[]>;
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsPost(inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse201>;
}
/**
 * FileApi - axios parameter creator
 * @export
 */
export declare const FileApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDDelete(fileID: string, options?: any): RequestArgs;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDGet(fileID: string, dl?: number, options?: any): RequestArgs;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDMetaGet(fileID: string, options?: any): RequestArgs;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDThumbnailGet(fileID: string, options?: any): RequestArgs;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesPost(file: any, aclReadable?: string, options?: any): RequestArgs;
};
/**
 * FileApi - functional programming interface
 * @export
 */
export declare const FileApiFp: (configuration?: Configuration) => {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDDelete(fileID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDGet(fileID: string, dl?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDMetaGet(fileID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDThumbnailGet(fileID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesPost(file: any, aclReadable?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>;
};
/**
 * FileApi - factory interface
 * @export
 */
export declare const FileApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDDelete(fileID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDGet(fileID: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDMetaGet(fileID: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesFileIDThumbnailGet(fileID: string, options?: any): AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filesPost(file: any, aclReadable?: string, options?: any): AxiosPromise<FileInfo>;
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export declare class FileApi extends BaseAPI {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDDelete(fileID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDGet(fileID: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDMetaGet(fileID: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDThumbnailGet(fileID: string, options?: any): AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesPost(file: any, aclReadable?: string, options?: any): AxiosPromise<FileInfo>;
}
/**
 * HeartbeatApi - axios parameter creator
 * @export
 */
export declare const HeartbeatApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartbeatGet(channelId: string, options?: any): RequestArgs;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartbeatPost(inlineObject14?: InlineObject14, options?: any): RequestArgs;
};
/**
 * HeartbeatApi - functional programming interface
 * @export
 */
export declare const HeartbeatApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartbeatGet(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartbeatPost(inlineObject14?: InlineObject14, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * HeartbeatApi - factory interface
 * @export
 */
export declare const HeartbeatApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartbeatGet(channelId: string, options?: any): AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    heartbeatPost(inlineObject14?: InlineObject14, options?: any): AxiosPromise<Response>;
};
/**
 * HeartbeatApi - object-oriented interface
 * @export
 * @class HeartbeatApi
 * @extends {BaseAPI}
 */
export declare class HeartbeatApi extends BaseAPI {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatGet(channelId: string, options?: any): AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatPost(inlineObject14?: InlineObject14, options?: any): AxiosPromise<Response>;
}
/**
 * MessageApi - axios parameter creator
 * @export
 */
export declare const MessageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDMessagesGet(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDMessagesPost(channelID: string, inlineObject20?: InlineObject20, options?: any): RequestArgs;
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDDelete(messageID: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDGet(messageID: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDPut(messageID: string, inlineObject24?: InlineObject24, options?: any): RequestArgs;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDReportPost(messageID: string, inlineObject25?: InlineObject25, options?: any): RequestArgs;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesReportsGet(p?: number, options?: any): RequestArgs;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDMessagesGet(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDMessagesPost(userID: string, inlineObject11?: InlineObject11, options?: any): RequestArgs;
};
/**
 * MessageApi - functional programming interface
 * @export
 */
export declare const MessageApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDMessagesGet(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDMessagesPost(channelID: string, inlineObject20?: InlineObject20, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDDelete(messageID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDGet(messageID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDPut(messageID: string, inlineObject24?: InlineObject24, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDReportPost(messageID: string, inlineObject25?: InlineObject25, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesReportsGet(p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009[]>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDMessagesGet(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDMessagesPost(userID: string, inlineObject11?: InlineObject11, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
};
/**
 * MessageApi - factory interface
 * @export
 */
export declare const MessageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDMessagesGet(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDMessagesPost(channelID: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDDelete(messageID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDGet(messageID: string, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDPut(messageID: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDReportPost(messageID: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<Response>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesReportsGet(p?: number, options?: any): AxiosPromise<InlineResponse2009[]>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDMessagesGet(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDMessagesPost(userID: string, inlineObject11?: InlineObject11, options?: any): AxiosPromise<Message>;
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export declare class MessageApi extends BaseAPI {
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesGet(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesPost(channelID: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDDelete(messageID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDGet(messageID: string, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDPut(messageID: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDReportPost(messageID: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<Response>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesReportsGet(p?: number, options?: any): AxiosPromise<InlineResponse2009[]>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesGet(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesPost(userID: string, inlineObject11?: InlineObject11, options?: any): AxiosPromise<Message>;
}
/**
 * MuteApi - axios parameter creator
 * @export
 */
export declare const MuteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteChannelIDDelete(channelID: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteChannelIDPost(channelID: string, options?: any): RequestArgs;
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteGet(options?: any): RequestArgs;
};
/**
 * MuteApi - functional programming interface
 * @export
 */
export declare const MuteApiFp: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteChannelIDDelete(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteChannelIDPost(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
};
/**
 * MuteApi - factory interface
 * @export
 */
export declare const MuteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteChannelIDPost(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeMuteGet(options?: any): AxiosPromise<string[]>;
};
/**
 * MuteApi - object-oriented interface
 * @export
 * @class MuteApi
 * @extends {BaseAPI}
 */
export declare class MuteApi extends BaseAPI {
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDPost(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteGet(options?: any): AxiosPromise<string[]>;
}
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export declare const NotificationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDNotificationGet(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDNotificationPut(channelID: string, inlineObject21?: InlineObject21, options?: any): RequestArgs;
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationDevicePost(inlineObject23?: InlineObject23, options?: any): RequestArgs;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationGet(options?: any): RequestArgs;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeNotificationGet(options?: any): RequestArgs;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDNotificationGet(userID: string, options?: any): RequestArgs;
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
export declare const NotificationApiFp: (configuration?: Configuration) => {
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDNotificationGet(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDNotificationPut(channelID: string, inlineObject21?: InlineObject21, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationDevicePost(inlineObject23?: InlineObject23, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeNotificationGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDNotificationGet(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
};
/**
 * NotificationApi - factory interface
 * @export
 */
export declare const NotificationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDNotificationGet(channelID: string, options?: any): AxiosPromise<string[]>;
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDNotificationPut(channelID: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<Response>;
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationDevicePost(inlineObject23?: InlineObject23, options?: any): AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notificationGet(options?: any): AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeNotificationGet(options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDNotificationGet(userID: string, options?: any): AxiosPromise<string[]>;
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export declare class NotificationApi extends BaseAPI {
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationGet(channelID: string, options?: any): AxiosPromise<string[]>;
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationPut(channelID: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<Response>;
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationDevicePost(inlineObject23?: InlineObject23, options?: any): AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationGet(options?: any): AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersMeNotificationGet(options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersUserIDNotificationGet(userID: string, options?: any): AxiosPromise<string[]>;
}
/**
 * PinApi - axios parameter creator
 * @export
 */
export declare const PinApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDPinsGet(channelID: string, options?: any): RequestArgs;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPinIDDelete(pinID: string, options?: any): RequestArgs;
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPinIDGet(pinID: string, options?: any): RequestArgs;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPost(inlineObject26?: InlineObject26, options?: any): RequestArgs;
};
/**
 * PinApi - functional programming interface
 * @export
 */
export declare const PinApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDPinsGet(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin[]>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPinIDDelete(pinID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPinIDGet(pinID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPost(inlineObject26?: InlineObject26, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>;
};
/**
 * PinApi - factory interface
 * @export
 */
export declare const PinApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    channelsChannelIDPinsGet(channelID: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPinIDDelete(pinID: string, options?: any): AxiosPromise<Response>;
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPinIDGet(pinID: string, options?: any): AxiosPromise<Pin>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinsPost(inlineObject26?: InlineObject26, options?: any): AxiosPromise<InlineResponse2011>;
};
/**
 * PinApi - object-oriented interface
 * @export
 * @class PinApi
 * @extends {BaseAPI}
 */
export declare class PinApi extends BaseAPI {
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    channelsChannelIDPinsGet(channelID: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDDelete(pinID: string, options?: any): AxiosPromise<Response>;
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDGet(pinID: string, options?: any): AxiosPromise<Pin>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPost(inlineObject26?: InlineObject26, options?: any): AxiosPromise<InlineResponse2011>;
}
/**
 * PublicApi - axios parameter creator
 * @export
 */
export declare const PublicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicIconUsernameGet(username: string, options?: any): RequestArgs;
};
/**
 * PublicApi - functional programming interface
 * @export
 */
export declare const PublicApiFp: (configuration?: Configuration) => {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicIconUsernameGet(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
};
/**
 * PublicApi - factory interface
 * @export
 */
export declare const PublicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    publicIconUsernameGet(username: string, options?: any): AxiosPromise<any>;
};
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export declare class PublicApi extends BaseAPI {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    publicIconUsernameGet(username: string, options?: any): AxiosPromise<any>;
}
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export declare const SessionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsDelete(options?: any): RequestArgs;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsGet(options?: any): RequestArgs;
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsReferenceIDDelete(referenceID: string, options?: any): RequestArgs;
};
/**
 * SessionsApi - functional programming interface
 * @export
 */
export declare const SessionsApiFp: (configuration?: Configuration) => {
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsDelete(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002[]>;
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsReferenceIDDelete(referenceID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * SessionsApi - factory interface
 * @export
 */
export declare const SessionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsDelete(options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsGet(options?: any): AxiosPromise<InlineResponse2002[]>;
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeSessionsReferenceIDDelete(referenceID: string, options?: any): AxiosPromise<Response>;
};
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export declare class SessionsApi extends BaseAPI {
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsDelete(options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsGet(options?: any): AxiosPromise<InlineResponse2002[]>;
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsReferenceIDDelete(referenceID: string, options?: any): AxiosPromise<Response>;
}
/**
 * StampApi - axios parameter creator
 * @export
 */
export declare const StampApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsGet(messageID: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsStampIDDelete(messageID: string, stampID: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsStampIDPost(messageID: string, stampID: string, options?: any): RequestArgs;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsGet(options?: any): RequestArgs;
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsPost(name: string, file: any, options?: any): RequestArgs;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDDelete(stampID: string, options?: any): RequestArgs;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDGet(stampID: string, options?: any): RequestArgs;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDPatch(stampID: string, name?: string, file?: any, options?: any): RequestArgs;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStampHistoryGet(options?: any): RequestArgs;
};
/**
 * StampApi - functional programming interface
 * @export
 */
export declare const StampApiFp: (configuration?: Configuration) => {
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsGet(messageID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageStamp[]>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsStampIDDelete(messageID: string, stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsStampIDPost(messageID: string, stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp[]>;
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsPost(name: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDDelete(stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDGet(stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDPatch(stampID: string, name?: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStampHistoryGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001[]>;
};
/**
 * StampApi - factory interface
 * @export
 */
export declare const StampApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsGet(messageID: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsStampIDDelete(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    messagesMessageIDStampsStampIDPost(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsGet(options?: any): AxiosPromise<Stamp[]>;
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsPost(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDDelete(stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDGet(stampID: string, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampsStampIDPatch(stampID: string, name?: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStampHistoryGet(options?: any): AxiosPromise<InlineResponse2001[]>;
};
/**
 * StampApi - object-oriented interface
 * @export
 * @class StampApi
 * @extends {BaseAPI}
 */
export declare class StampApi extends BaseAPI {
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsGet(messageID: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDDelete(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDPost(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsGet(options?: any): AxiosPromise<Stamp[]>;
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsPost(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDDelete(stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDGet(stampID: string, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDPatch(stampID: string, name?: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    usersMeStampHistoryGet(options?: any): AxiosPromise<InlineResponse2001[]>;
}
/**
 * StarApi - axios parameter creator
 * @export
 */
export declare const StarApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsChannelIDDelete(channelID: string, options?: any): RequestArgs;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsChannelIDPut(channelID: string, options?: any): RequestArgs;
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsGet(options?: any): RequestArgs;
};
/**
 * StarApi - functional programming interface
 * @export
 */
export declare const StarApiFp: (configuration?: Configuration) => {
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsChannelIDDelete(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsChannelIDPut(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
};
/**
 * StarApi - factory interface
 * @export
 */
export declare const StarApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsChannelIDPut(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeStarsGet(options?: any): AxiosPromise<string[]>;
};
/**
 * StarApi - object-oriented interface
 * @export
 * @class StarApi
 * @extends {BaseAPI}
 */
export declare class StarApi extends BaseAPI {
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDPut(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsGet(options?: any): AxiosPromise<string[]>;
}
/**
 * UnreadApi - axios parameter creator
 * @export
 */
export declare const UnreadApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeUnreadChannelsChannelIDDelete(channelID: string, options?: any): RequestArgs;
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeUnreadChannelsGet(options?: any): RequestArgs;
};
/**
 * UnreadApi - functional programming interface
 * @export
 */
export declare const UnreadApiFp: (configuration?: Configuration) => {
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeUnreadChannelsChannelIDDelete(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeUnreadChannelsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005[]>;
};
/**
 * UnreadApi - factory interface
 * @export
 */
export declare const UnreadApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeUnreadChannelsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeUnreadChannelsGet(options?: any): AxiosPromise<InlineResponse2005[]>;
};
/**
 * UnreadApi - object-oriented interface
 * @export
 * @class UnreadApi
 * @extends {BaseAPI}
 */
export declare class UnreadApi extends BaseAPI {
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsGet(options?: any): AxiosPromise<InlineResponse2005[]>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(options?: any): RequestArgs;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): RequestArgs;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeIconGet(options?: any): RequestArgs;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeIconPut(file?: any, options?: any): RequestArgs;
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePasswordPut(inlineObject6?: InlineObject6, options?: any): RequestArgs;
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePatch(inlineObject5?: InlineObject5, options?: any): RequestArgs;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeQrCodeGet(options?: any): RequestArgs;
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(inlineObject4?: InlineObject4, options?: any): RequestArgs;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDGet(userID: string, options?: any): RequestArgs;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDIconGet(userID: string, options?: any): RequestArgs;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User[]>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeIconGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeIconPut(file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePasswordPut(inlineObject6?: InlineObject6, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePatch(inlineObject5?: InlineObject5, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeQrCodeGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(inlineObject4?: InlineObject4, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDGet(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDIconGet(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(options?: any): AxiosPromise<User[]>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: any): AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeIconGet(options?: any): AxiosPromise<any>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeIconPut(file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePasswordPut(inlineObject6?: InlineObject6, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMePatch(inlineObject5?: InlineObject5, options?: any): AxiosPromise<Response>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeQrCodeGet(options?: any): AxiosPromise<any>;
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(inlineObject4?: InlineObject4, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDGet(userID: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDIconGet(userID: string, options?: any): AxiosPromise<any>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersGet(options?: any): AxiosPromise<User[]>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeGet(options?: any): AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconGet(options?: any): AxiosPromise<any>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconPut(file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePasswordPut(inlineObject6?: InlineObject6, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePatch(inlineObject5?: InlineObject5, options?: any): AxiosPromise<Response>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeQrCodeGet(options?: any): AxiosPromise<any>;
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersPost(inlineObject4?: InlineObject4, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDGet(userID: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDIconGet(userID: string, options?: any): AxiosPromise<any>;
}
/**
 * UserGroupApi - axios parameter creator
 * @export
 */
export declare const UserGroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(options?: any): RequestArgs;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDDelete(groupID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDGet(groupID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersGet(groupID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersPost(groupID: string, inlineObject31?: InlineObject31, options?: any): RequestArgs;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersUserIDDelete(groupID: string, userID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDPatch(groupID: string, inlineObject30?: InlineObject30, options?: any): RequestArgs;
    /**
     * ユーザーグループを作成します
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(inlineObject29?: InlineObject29, options?: any): RequestArgs;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGroupsGet(options?: any): RequestArgs;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDGroupsGet(userID: string, options?: any): RequestArgs;
};
/**
 * UserGroupApi - functional programming interface
 * @export
 */
export declare const UserGroupApiFp: (configuration?: Configuration) => {
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup[]>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDDelete(groupID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDGet(groupID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersGet(groupID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersPost(groupID: string, inlineObject31?: InlineObject31, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersUserIDDelete(groupID: string, userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDPatch(groupID: string, inlineObject30?: InlineObject30, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(inlineObject29?: InlineObject29, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGroupsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDGroupsGet(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
};
/**
 * UserGroupApi - factory interface
 * @export
 */
export declare const UserGroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDDelete(groupID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDGet(groupID: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersGet(groupID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersPost(groupID: string, inlineObject31?: InlineObject31, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDMembersUserIDDelete(groupID: string, userID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIDPatch(groupID: string, inlineObject30?: InlineObject30, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(inlineObject29?: InlineObject29, options?: any): AxiosPromise<UserGroup>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGroupsGet(options?: any): AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDGroupsGet(userID: string, options?: any): AxiosPromise<string[]>;
};
/**
 * UserGroupApi - object-oriented interface
 * @export
 * @class UserGroupApi
 * @extends {BaseAPI}
 */
export declare class UserGroupApi extends BaseAPI {
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGet(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDDelete(groupID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDGet(groupID: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersGet(groupID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersPost(groupID: string, inlineObject31?: InlineObject31, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersUserIDDelete(groupID: string, userID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDPatch(groupID: string, inlineObject30?: InlineObject30, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsPost(inlineObject29?: InlineObject29, options?: any): AxiosPromise<UserGroup>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersMeGroupsGet(options?: any): AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersUserIDGroupsGet(userID: string, options?: any): AxiosPromise<string[]>;
}
/**
 * UserTagApi - axios parameter creator
 * @export
 */
export declare const UserTagApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsTagIDGet(tagID: string, options?: any): RequestArgs;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsGet(userID: string, options?: any): RequestArgs;
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsPost(userID: string, inlineObject12?: InlineObject12, options?: any): RequestArgs;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsTagIDDelete(userID: string, tagID: string, options?: any): RequestArgs;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsTagIDPatch(userID: string, tagID: string, inlineObject13?: InlineObject13, options?: any): RequestArgs;
};
/**
 * UserTagApi - functional programming interface
 * @export
 */
export declare const UserTagApiFp: (configuration?: Configuration) => {
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsTagIDGet(tagID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsGet(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag[]>;
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsPost(userID: string, inlineObject12?: InlineObject12, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsTagIDDelete(userID: string, tagID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsTagIDPatch(userID: string, tagID: string, inlineObject13?: InlineObject13, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * UserTagApi - factory interface
 * @export
 */
export declare const UserTagApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagsTagIDGet(tagID: string, options?: any): AxiosPromise<InlineResponse20010>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsGet(userID: string, options?: any): AxiosPromise<Tag[]>;
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsPost(userID: string, inlineObject12?: InlineObject12, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsTagIDDelete(userID: string, tagID: string, options?: any): AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIDTagsTagIDPatch(userID: string, tagID: string, inlineObject13?: InlineObject13, options?: any): AxiosPromise<Response>;
};
/**
 * UserTagApi - object-oriented interface
 * @export
 * @class UserTagApi
 * @extends {BaseAPI}
 */
export declare class UserTagApi extends BaseAPI {
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    tagsTagIDGet(tagID: string, options?: any): AxiosPromise<InlineResponse20010>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsGet(userID: string, options?: any): AxiosPromise<Tag[]>;
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsPost(userID: string, inlineObject12?: InlineObject12, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDDelete(userID: string, tagID: string, options?: any): AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDPatch(userID: string, tagID: string, inlineObject13?: InlineObject13, options?: any): AxiosPromise<Response>;
}
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export declare const WebhookApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksGet(options?: any): RequestArgs;
    /**
     * webhookを作成します。
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksPost(inlineObject27?: InlineObject27, options?: any): RequestArgs;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDDelete(webhookID: string, options?: any): RequestArgs;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDGet(webhookID: string, options?: any): RequestArgs;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDGithubPost(webhookID: string, body?: object, options?: any): RequestArgs;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDIconGet(webhookID: string, options?: any): RequestArgs;
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDIconPut(webhookID: string, file?: any, options?: any): RequestArgs;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDPatch(webhookID: string, inlineObject28?: InlineObject28, options?: any): RequestArgs;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDPost(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): RequestArgs;
};
/**
 * WebhookApi - functional programming interface
 * @export
 */
export declare const WebhookApiFp: (configuration?: Configuration) => {
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook[]>;
    /**
     * webhookを作成します。
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksPost(inlineObject27?: InlineObject27, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDDelete(webhookID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDGet(webhookID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDGithubPost(webhookID: string, body?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDIconGet(webhookID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDIconPut(webhookID: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDPatch(webhookID: string, inlineObject28?: InlineObject28, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDPost(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * WebhookApi - factory interface
 * @export
 */
export declare const WebhookApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksGet(options?: any): AxiosPromise<Webhook[]>;
    /**
     * webhookを作成します。
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksPost(inlineObject27?: InlineObject27, options?: any): AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDDelete(webhookID: string, options?: any): AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDGet(webhookID: string, options?: any): AxiosPromise<Webhook>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDGithubPost(webhookID: string, body?: object, options?: any): AxiosPromise<Response>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDIconGet(webhookID: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDIconPut(webhookID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDPatch(webhookID: string, inlineObject28?: InlineObject28, options?: any): AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    webhooksWebhookIDPost(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): AxiosPromise<Response>;
};
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export declare class WebhookApi extends BaseAPI {
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksGet(options?: any): AxiosPromise<Webhook[]>;
    /**
     * webhookを作成します。
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksPost(inlineObject27?: InlineObject27, options?: any): AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDDelete(webhookID: string, options?: any): AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGet(webhookID: string, options?: any): AxiosPromise<Webhook>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGithubPost(webhookID: string, body?: object, options?: any): AxiosPromise<Response>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconGet(webhookID: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconPut(webhookID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPatch(webhookID: string, inlineObject28?: InlineObject28, options?: any): AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPost(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): AxiosPromise<Response>;
}
export declare class Apis extends BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    activityLatestMessagesGet(limit?: number, subscribe?: boolean, options?: any): AxiosPromise<Message[]>;
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    loginPost(redirect?: string, inlineObject?: InlineObject, options?: any): AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logoutPost(redirect?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeDecidePost(submit: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizeGet(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {string} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {string} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2AuthorizePost(responseType?: string, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    oauth2TokenPost(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): AxiosPromise<InlineResponse200>;
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDChannelsGet(botID: string, options?: any): AxiosPromise<string[]>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDelete(botID: string, options?: any): AxiosPromise<Response>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDDetailGet(botID: string, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject36} [inlineObject36]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDEventsPut(botID: string, inlineObject36?: InlineObject36, options?: any): AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDGet(botID: string, options?: any): AxiosPromise<Bot>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconGet(botID: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDIconPut(botID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject35} [inlineObject35]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDPatch(botID: string, inlineObject35?: InlineObject35, options?: any): AxiosPromise<Response>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDReissuePost(botID: string, options?: any): AxiosPromise<InlineResponse20011>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {InlineObject37} [inlineObject37]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsBotIDStatePut(botID: string, inlineObject37?: InlineObject37, options?: any): AxiosPromise<Response>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsGet(options?: any): AxiosPromise<Bot[]>;
    /**
     * Botを作成します。
     * @param {InlineObject34} [inlineObject34]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    botsPost(inlineObject34?: InlineObject34, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsBotIDDelete(channelID: string, botID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsGet(channelID: string, options?: any): AxiosPromise<InlineResponse2007[]>;
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject22} [inlineObject22]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    channelsChannelIDBotsPost(channelID: string, inlineObject22?: InlineObject22, options?: any): AxiosPromise<InlineResponse2008>;
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject18} [inlineObject18]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDChildrenPost(channelID: string, inlineObject18?: InlineObject18, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDGet(channelID: string, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject17} [inlineObject17]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDParentPut(channelID: string, inlineObject17?: InlineObject17, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject16} [inlineObject16]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDPatch(channelID: string, inlineObject16?: InlineObject16, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicGet(channelID: string, options?: any): AxiosPromise<InlineResponse2006>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject19} [inlineObject19]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsChannelIDTopicPut(channelID: string, inlineObject19?: InlineObject19, options?: any): AxiosPromise<Response>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsGet(options?: any): AxiosPromise<Channel[]>;
    /**
     * チャンネルを作成します。
     * @param {InlineObject15} [inlineObject15]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    channelsPost(inlineObject15?: InlineObject15, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDelete(clientID: string, options?: any): AxiosPromise<Response>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDDetailGet(clientID: string, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDGet(clientID: string, options?: any): AxiosPromise<ClientInfo>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {InlineObject33} [inlineObject33]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsClientIDPatch(clientID: string, inlineObject33?: InlineObject33, options?: any): AxiosPromise<Response>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsGet(options?: any): AxiosPromise<OwnedClientInfo[]>;
    /**
     * クライアントを登録します。
     * @param {InlineObject32} [inlineObject32]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    clientsPost(inlineObject32?: InlineObject32, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensGet(options?: any): AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    usersMeTokensOauth2TokenIDDelete(oauth2TokenID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDDelete(clipID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderGet(clipID: string, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {InlineObject8} [inlineObject8]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDFolderPut(clipID: string, inlineObject8?: InlineObject8, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsClipIDGet(clipID: string, options?: any): AxiosPromise<Message>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDDelete(folderID: string, options?: any): AxiosPromise<Response>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDGet(folderID: string, options?: any): AxiosPromise<InlineResponse2004[]>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {InlineObject10} [inlineObject10]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersFolderIDPatch(folderID: string, inlineObject10?: InlineObject10, options?: any): AxiosPromise<Response>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersGet(options?: any): AxiosPromise<ClipsFolder[]>;
    /**
     * クリップフォルダを作成します。
     * @param {InlineObject9} [inlineObject9]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsFoldersPost(inlineObject9?: InlineObject9, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsGet(options?: any): AxiosPromise<InlineResponse2003[]>;
    /**
     * 新しくメッセージをクリップします。
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    usersMeClipsPost(inlineObject7?: InlineObject7, options?: any): AxiosPromise<InlineResponse201>;
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDDelete(fileID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDGet(fileID: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDMetaGet(fileID: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesFileIDThumbnailGet(fileID: string, options?: any): AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    filesPost(file: any, aclReadable?: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatGet(channelId: string, options?: any): AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {InlineObject14} [inlineObject14]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    heartbeatPost(inlineObject14?: InlineObject14, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesGet(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject20} [inlineObject20]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    channelsChannelIDMessagesPost(channelID: string, inlineObject20?: InlineObject20, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDDelete(messageID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDGet(messageID: string, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject24} [inlineObject24]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDPut(messageID: string, inlineObject24?: InlineObject24, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {InlineObject25} [inlineObject25]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesMessageIDReportPost(messageID: string, inlineObject25?: InlineObject25, options?: any): AxiosPromise<Response>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    messagesReportsGet(p?: number, options?: any): AxiosPromise<InlineResponse2009[]>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesGet(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject11} [inlineObject11]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    usersUserIDMessagesPost(userID: string, inlineObject11?: InlineObject11, options?: any): AxiosPromise<Message>;
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteChannelIDPost(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    usersMeMuteGet(options?: any): AxiosPromise<string[]>;
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationGet(channelID: string, options?: any): AxiosPromise<string[]>;
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {InlineObject21} [inlineObject21]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    channelsChannelIDNotificationPut(channelID: string, inlineObject21?: InlineObject21, options?: any): AxiosPromise<Response>;
    /**
     * FCMデバイスを登録します。
     * @param {InlineObject23} [inlineObject23]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationDevicePost(inlineObject23?: InlineObject23, options?: any): AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    notificationGet(options?: any): AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersMeNotificationGet(options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    usersUserIDNotificationGet(userID: string, options?: any): AxiosPromise<string[]>;
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    channelsChannelIDPinsGet(channelID: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDDelete(pinID: string, options?: any): AxiosPromise<Response>;
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPinIDGet(pinID: string, options?: any): AxiosPromise<Pin>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {InlineObject26} [inlineObject26]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinsPost(inlineObject26?: InlineObject26, options?: any): AxiosPromise<InlineResponse2011>;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    publicIconUsernameGet(username: string, options?: any): AxiosPromise<any>;
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsDelete(options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsGet(options?: any): AxiosPromise<InlineResponse2002[]>;
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    usersMeSessionsReferenceIDDelete(referenceID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsGet(messageID: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDDelete(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    messagesMessageIDStampsStampIDPost(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsGet(options?: any): AxiosPromise<Stamp[]>;
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsPost(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDDelete(stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDGet(stampID: string, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampsStampIDPatch(stampID: string, name?: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    usersMeStampHistoryGet(options?: any): AxiosPromise<InlineResponse2001[]>;
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsChannelIDPut(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    usersMeStarsGet(options?: any): AxiosPromise<string[]>;
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsChannelIDDelete(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    usersMeUnreadChannelsGet(options?: any): AxiosPromise<InlineResponse2005[]>;
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersGet(options?: any): AxiosPromise<User[]>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeGet(options?: any): AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconGet(options?: any): AxiosPromise<any>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeIconPut(file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePasswordPut(inlineObject6?: InlineObject6, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を変更します。
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMePatch(inlineObject5?: InlineObject5, options?: any): AxiosPromise<Response>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersMeQrCodeGet(options?: any): AxiosPromise<any>;
    /**
     * ユーザー登録します
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersPost(inlineObject4?: InlineObject4, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDGet(userID: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    usersUserIDIconGet(userID: string, options?: any): AxiosPromise<any>;
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGet(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDDelete(groupID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDGet(groupID: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersGet(groupID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject31} [inlineObject31]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersPost(groupID: string, inlineObject31?: InlineObject31, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDMembersUserIDDelete(groupID: string, userID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {InlineObject30} [inlineObject30]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsGroupIDPatch(groupID: string, inlineObject30?: InlineObject30, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {InlineObject29} [inlineObject29]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    groupsPost(inlineObject29?: InlineObject29, options?: any): AxiosPromise<UserGroup>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersMeGroupsGet(options?: any): AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    usersUserIDGroupsGet(userID: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    tagsTagIDGet(tagID: string, options?: any): AxiosPromise<InlineResponse20010>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsGet(userID: string, options?: any): AxiosPromise<Tag[]>;
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {InlineObject12} [inlineObject12]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsPost(userID: string, inlineObject12?: InlineObject12, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDDelete(userID: string, tagID: string, options?: any): AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {InlineObject13} [inlineObject13]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    usersUserIDTagsTagIDPatch(userID: string, tagID: string, inlineObject13?: InlineObject13, options?: any): AxiosPromise<Response>;
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksGet(options?: any): AxiosPromise<Webhook[]>;
    /**
     * webhookを作成します。
     * @param {InlineObject27} [inlineObject27]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksPost(inlineObject27?: InlineObject27, options?: any): AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDDelete(webhookID: string, options?: any): AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGet(webhookID: string, options?: any): AxiosPromise<Webhook>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDGithubPost(webhookID: string, body?: object, options?: any): AxiosPromise<Response>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconGet(webhookID: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDIconPut(webhookID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {InlineObject28} [inlineObject28]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPatch(webhookID: string, inlineObject28?: InlineObject28, options?: any): AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    webhooksWebhookIDPost(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): AxiosPromise<Response>;
}
