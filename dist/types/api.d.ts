/**
 * traQ v3
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 * 有効なOAuth2トークン情報
 * @export
 * @interface ActiveOAuth2Token
 */
export interface ActiveOAuth2Token {
    /**
     * トークンUUID
     * @type {string}
     * @memberof ActiveOAuth2Token
     */
    id?: string;
    /**
     * OAuth2クライアントUUID
     * @type {string}
     * @memberof ActiveOAuth2Token
     */
    clientId?: string;
    /**
     * スコープ
     * @type {Array<OAuth2Scope>}
     * @memberof ActiveOAuth2Token
     */
    scopes?: Array<OAuth2Scope>;
    /**
     * 発行日時
     * @type {Date}
     * @memberof ActiveOAuth2Token
     */
    issuedAt?: Date;
}
/**
 * BOT情報
 * @export
 * @interface Bot
 */
export interface Bot {
    /**
     * BOT UUID
     * @type {string}
     * @memberof Bot
     */
    id?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof Bot
     */
    botUserId?: string;
    /**
     * 説明
     * @type {string}
     * @memberof Bot
     */
    description?: string;
    /**
     * BOT開発者UUID
     * @type {string}
     * @memberof Bot
     */
    developerId?: string;
    /**
     * BOTが購読しているイベントの配列
     * @type {Array<string>}
     * @memberof Bot
     */
    subscribeEvents?: Array<string>;
    /**
     * BOT状態
     * @type {number}
     * @memberof Bot
     */
    state?: BotStateEnum;
    /**
     * 作成日時
     * @type {Date}
     * @memberof Bot
     */
    createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof Bot
     */
    updatedAt?: Date;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BotStateEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * BOT詳細情報
 * @export
 * @interface BotDetail
 */
export interface BotDetail {
    /**
     * BOT UUID
     * @type {string}
     * @memberof BotDetail
     */
    id?: string;
    /**
     * 更新日時
     * @type {Date}
     * @memberof BotDetail
     */
    updatedAt?: Date;
    /**
     * 作成日時
     * @type {Date}
     * @memberof BotDetail
     */
    createdAt?: Date;
    /**
     * BOT状態
     * @type {number}
     * @memberof BotDetail
     */
    state?: BotDetailStateEnum;
    /**
     * BOTが購読しているイベントの配列
     * @type {Array<string>}
     * @memberof BotDetail
     */
    subscribeEvents?: Array<string>;
    /**
     * BOT開発者UUID
     * @type {string}
     * @memberof BotDetail
     */
    developerId?: string;
    /**
     * 説明
     * @type {string}
     * @memberof BotDetail
     */
    description?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof BotDetail
     */
    botUserId?: string;
    /**
     *
     * @type {BotTokens}
     * @memberof BotDetail
     */
    tokens?: BotTokens;
    /**
     * BOTサーバーエンドポイント
     * @type {string}
     * @memberof BotDetail
     */
    endpoint?: string;
    /**
     * 特権BOTかどうか
     * @type {boolean}
     * @memberof BotDetail
     */
    privileged?: boolean;
    /**
     * BOTが参加しているチャンネルのUUID配列
     * @type {Array<string>}
     * @memberof BotDetail
     */
    channels?: Array<string>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum BotDetailStateEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * BOTイベントログ
 * @export
 * @interface BotEventLog
 */
export interface BotEventLog {
    /**
     * BOT UUID
     * @type {string}
     * @memberof BotEventLog
     */
    botId?: string;
    /**
     * リクエストUUID
     * @type {string}
     * @memberof BotEventLog
     */
    requestId?: string;
    /**
     * イベントタイプ
     * @type {string}
     * @memberof BotEventLog
     */
    event?: string;
    /**
     * ステータスコード
     * @type {number}
     * @memberof BotEventLog
     */
    code?: number;
    /**
     * イベント日時
     * @type {Date}
     * @memberof BotEventLog
     */
    datetime?: Date;
}
/**
 * BOTのトークン情報
 * @export
 * @interface BotTokens
 */
export interface BotTokens {
    /**
     * Verification Token
     * @type {string}
     * @memberof BotTokens
     */
    verificationToken?: string;
    /**
     * BOTアクセストークン
     * @type {string}
     * @memberof BotTokens
     */
    accessToken?: string;
}
/**
 * BOTユーザー対
 * @export
 * @interface BotUser
 */
export interface BotUser {
    /**
     * BOT UUID
     * @type {string}
     * @memberof BotUser
     */
    id?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof BotUser
     */
    botUserId?: string;
}
/**
 * チャンネル
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof Channel
     */
    id?: string;
    /**
     * 親チャンネルUUID
     * @type {string}
     * @memberof Channel
     */
    parentId?: string | null;
    /**
     * チャンネルが可視かどうか
     * @type {boolean}
     * @memberof Channel
     */
    visibility?: boolean;
    /**
     * 強制通知チャンネルかどうか
     * @type {boolean}
     * @memberof Channel
     */
    force?: boolean;
    /**
     * チャンネルトピック
     * @type {string}
     * @memberof Channel
     */
    topic?: string;
    /**
     * チャンネル名
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     * 子チャンネルのUUID配列
     * @type {Array<string>}
     * @memberof Channel
     */
    children?: Array<string>;
}
/**
 * チャンネルイベント
 * @export
 * @interface ChannelEvent
 */
export interface ChannelEvent {
    /**
     * イベントタイプ
     * @type {string}
     * @memberof ChannelEvent
     */
    type?: ChannelEventTypeEnum;
    /**
     * イベント日時
     * @type {Date}
     * @memberof ChannelEvent
     */
    datetime?: Date;
    /**
     * イベント内容
     * @type {TopicChangedEvent | SubscribersChangedEvent | PinAddedEvent | PinRemovedEvent | NameChangedEvent | ParentChangedEvent | VisibilityChangedEvent | ForcedNotificationChangedEvent | ChildCreatedEvent}
     * @memberof ChannelEvent
     */
    detail?: TopicChangedEvent | SubscribersChangedEvent | PinAddedEvent | PinRemovedEvent | NameChangedEvent | ParentChangedEvent | VisibilityChangedEvent | ForcedNotificationChangedEvent | ChildCreatedEvent;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ChannelEventTypeEnum {
    TopicChanged = "TopicChanged",
    SubscribersChanged = "SubscribersChanged",
    PinAdded = "PinAdded",
    PinRemoved = "PinRemoved",
    NameChanged = "NameChanged",
    ParentChanged = "ParentChanged",
    VisibilityChanged = "VisibilityChanged",
    ForcedNotificationChanged = "ForcedNotificationChanged",
    ChildCreated = "ChildCreated"
}
/**
 * GET /channelsレスポンス
 * @export
 * @interface ChannelList
 */
export interface ChannelList {
    /**
     * パブリックチャンネルの配列
     * @type {Array<Channel>}
     * @memberof ChannelList
     */
    _public?: Array<Channel>;
    /**
     * ダイレクトメッセージチャンネルの配列
     * @type {Array<DMChannel>}
     * @memberof ChannelList
     */
    dm?: Array<DMChannel>;
}
/**
 * チャンネル統計情報
 * @export
 * @interface ChannelStats
 */
export interface ChannelStats {
    /**
     * チャンネルの総投稿メッセージ数(削除されたものも含む)
     * @type {number}
     * @memberof ChannelStats
     */
    totalMessageCount?: number;
    /**
     * 統計情報日時
     * @type {Date}
     * @memberof ChannelStats
     */
    datetime?: Date;
}
/**
 * チャンネル購読レベル 0：無し 1：未読管理 2：未読管理+通知
 * @export
 * @enum {string}
 */
export declare enum ChannelSubscribeLevel {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * チャンネルトピック
 * @export
 * @interface ChannelTopic
 */
export interface ChannelTopic {
    /**
     * トピック
     * @type {string}
     * @memberof ChannelTopic
     */
    topic?: string;
}
/**
 * 閲覧状態
 * @export
 * @enum {string}
 */
export declare enum ChannelViewState {
    None = "none",
    Monitoring = "monitoring",
    Editing = "editing"
}
/**
 * チャンネル閲覧者情報
 * @export
 * @interface ChannelViewer
 */
export interface ChannelViewer {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof ChannelViewer
     */
    userId?: string;
    /**
     *
     * @type {ChannelViewState}
     * @memberof ChannelViewer
     */
    state?: ChannelViewState;
    /**
     * 更新日時
     * @type {Date}
     * @memberof ChannelViewer
     */
    updatedAt?: Date;
}
/**
 * 子チャンネル作成イベント
 * @export
 * @interface ChildCreatedEvent
 */
export interface ChildCreatedEvent {
    /**
     * 作成者UUID
     * @type {string}
     * @memberof ChildCreatedEvent
     */
    userId?: string;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof ChildCreatedEvent
     */
    channelId?: string;
}
/**
 * クリップフォルダ情報
 * @export
 * @interface ClipFolder
 */
export interface ClipFolder {
    /**
     * フォルダUUID
     * @type {string}
     * @memberof ClipFolder
     */
    id?: string;
    /**
     * フォルダ名
     * @type {string}
     * @memberof ClipFolder
     */
    name?: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof ClipFolder
     */
    createdAt?: Date;
    /**
     * フォルダ所有者UUID
     * @type {string}
     * @memberof ClipFolder
     */
    ownerId?: string;
    /**
     * 説明
     * @type {string}
     * @memberof ClipFolder
     */
    description?: string;
}
/**
 * クリップされたメッセージ
 * @export
 * @interface ClippedMessage
 */
export interface ClippedMessage {
    /**
     * クリップフォルダUUID
     * @type {string}
     * @memberof ClippedMessage
     */
    folderId?: string;
    /**
     *
     * @type {Message}
     * @memberof ClippedMessage
     */
    message?: Message;
    /**
     * クリップした日時
     * @type {Date}
     * @memberof ClippedMessage
     */
    clippedAt?: Date;
}
/**
 * ダイレクトメッセージチャンネル
 * @export
 * @interface DMChannel
 */
export interface DMChannel {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof DMChannel
     */
    id?: string;
    /**
     * 送信先相手のUUID
     * @type {string}
     * @memberof DMChannel
     */
    userId?: string;
}
/**
 * ファイル情報
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * ファイルUUID
     * @type {string}
     * @memberof FileInfo
     */
    id?: string;
    /**
     * ファイル名
     * @type {string}
     * @memberof FileInfo
     */
    name?: string;
    /**
     * MIMEタイプ
     * @type {string}
     * @memberof FileInfo
     */
    mime?: string;
    /**
     * ファイルサイズ
     * @type {number}
     * @memberof FileInfo
     */
    size?: number;
    /**
     * MD5ハッシュ
     * @type {string}
     * @memberof FileInfo
     */
    md5?: string;
    /**
     * アップロード日時
     * @type {Date}
     * @memberof FileInfo
     */
    createdAt?: Date;
    /**
     *
     * @type {FileInfoThumbnail}
     * @memberof FileInfo
     */
    thumbnail?: FileInfoThumbnail | null;
    /**
     * 属しているチャンネルUUID
     * @type {string}
     * @memberof FileInfo
     */
    channelId?: string | null;
    /**
     * アップロード者UUID
     * @type {string}
     * @memberof FileInfo
     */
    uploaderId?: string | null;
}
/**
 * サムネイル情報 サムネイルが存在しない場合はnullになります
 * @export
 * @interface FileInfoThumbnail
 */
export interface FileInfoThumbnail {
    /**
     * MIMEタイプ
     * @type {string}
     * @memberof FileInfoThumbnail
     */
    mime?: string;
    /**
     * サムネイル幅
     * @type {number}
     * @memberof FileInfoThumbnail
     */
    width?: number;
    /**
     * サムネイル高さ
     * @type {number}
     * @memberof FileInfoThumbnail
     */
    height?: number;
}
/**
 * チャンネル強制通知状態変更イベント
 * @export
 * @interface ForcedNotificationChangedEvent
 */
export interface ForcedNotificationChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof ForcedNotificationChangedEvent
     */
    userId?: string;
    /**
     * 変更後強制通知状態
     * @type {boolean}
     * @memberof ForcedNotificationChangedEvent
     */
    force?: boolean;
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * スタンプ画像(1MBまでのpng, jpeg, gif)
     * @type {any}
     * @memberof InlineObject
     */
    file: any;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * traQ(サーバー)バージョン
     * @type {string}
     * @memberof InlineResponse200
     */
    version?: string;
    /**
     * traQ(サーバー)リビジョン
     * @type {string}
     * @memberof InlineResponse200
     */
    revision?: string;
}
/**
 * ログインセッション情報
 * @export
 * @interface LoginSession
 */
export interface LoginSession {
    /**
     * セッションUUID
     * @type {string}
     * @memberof LoginSession
     */
    id?: string;
    /**
     * 最終アクセスIPアドレス
     * @type {string}
     * @memberof LoginSession
     */
    ip?: string;
    /**
     * 最終アクセスユーザーエージェント
     * @type {string}
     * @memberof LoginSession
     */
    ua?: string;
    /**
     * 最終アクセス日時
     * @type {Date}
     * @memberof LoginSession
     */
    lastAccess?: Date;
    /**
     * 発行日時
     * @type {Date}
     * @memberof LoginSession
     */
    issuedAt?: Date;
}
/**
 * メッセージ
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * メッセージUUID
     * @type {string}
     * @memberof Message
     */
    id?: string;
    /**
     * 投稿者UUID
     * @type {string}
     * @memberof Message
     */
    userId?: string;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof Message
     */
    channelId?: string;
    /**
     * メッセージ本文
     * @type {string}
     * @memberof Message
     */
    content?: string;
    /**
     * 投稿日時
     * @type {Date}
     * @memberof Message
     */
    createdAt?: Date;
    /**
     * 編集日時
     * @type {Date}
     * @memberof Message
     */
    updatedAt?: Date;
    /**
     * ピン留めされているかどうか
     * @type {boolean}
     * @memberof Message
     */
    pinned?: boolean;
    /**
     * 押されているスタンプの配列
     * @type {Array<MessageStamp>}
     * @memberof Message
     */
    stamps?: Array<MessageStamp>;
    /**
     * スレッドUUID
     * @type {string}
     * @memberof Message
     */
    threadId?: string | null;
}
/**
 * ピン情報
 * @export
 * @interface MessagePin
 */
export interface MessagePin {
    /**
     * ピン留めしたユーザーUUID
     * @type {string}
     * @memberof MessagePin
     */
    userId?: string;
    /**
     * ピン留めされた日時
     * @type {Date}
     * @memberof MessagePin
     */
    pinnedAt?: Date;
}
/**
 * メッセージに押されたスタンプ
 * @export
 * @interface MessageStamp
 */
export interface MessageStamp {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof MessageStamp
     */
    userId?: string;
    /**
     * スタンプUUID
     * @type {string}
     * @memberof MessageStamp
     */
    stampId?: string;
    /**
     * スタンプ数
     * @type {number}
     * @memberof MessageStamp
     */
    count?: number;
    /**
     * スタンプが最初に押された日時
     * @type {Date}
     * @memberof MessageStamp
     */
    createdAt?: Date;
    /**
     * スタンプが最後に押された日時
     * @type {Date}
     * @memberof MessageStamp
     */
    updatedAt?: Date;
}
/**
 * 自分のユーザー詳細情報
 * @export
 * @interface MyUserDetail
 */
export interface MyUserDetail {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof MyUserDetail
     */
    id?: string;
    /**
     * 自己紹介(biography)
     * @type {string}
     * @memberof MyUserDetail
     */
    bio?: string;
    /**
     * 所属グループのUUIDの配列
     * @type {Array<string>}
     * @memberof MyUserDetail
     */
    groups?: Array<string>;
    /**
     * タグリスト
     * @type {Array<UserTag>}
     * @memberof MyUserDetail
     */
    tags?: Array<UserTag>;
    /**
     * 更新日時
     * @type {Date}
     * @memberof MyUserDetail
     */
    updatedAt?: Date;
    /**
     * 最終オンライン日時
     * @type {Date}
     * @memberof MyUserDetail
     */
    lastOnline?: Date;
    /**
     * Twitter ID
     * @type {string}
     * @memberof MyUserDetail
     */
    twitterId?: string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof MyUserDetail
     */
    name?: string;
    /**
     * ユーザー表示名
     * @type {string}
     * @memberof MyUserDetail
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof MyUserDetail
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof MyUserDetail
     */
    bot?: boolean;
    /**
     *
     * @type {UserAccountState}
     * @memberof MyUserDetail
     */
    state?: UserAccountState;
    /**
     * 所有している権限の配列
     * @type {Array<string>}
     * @memberof MyUserDetail
     */
    permissions?: Array<string>;
}
/**
 * チャンネル名変更イベント
 * @export
 * @interface NameChangedEvent
 */
export interface NameChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof NameChangedEvent
     */
    userId?: string;
    /**
     * 変更前チャンネル名
     * @type {string}
     * @memberof NameChangedEvent
     */
    before?: string;
    /**
     * 変更後チャンネル名
     * @type {string}
     * @memberof NameChangedEvent
     */
    after?: string;
}
/**
 * OAuth2クライアント情報
 * @export
 * @interface OAuth2Client
 */
export interface OAuth2Client {
    /**
     * クライアントUUID
     * @type {string}
     * @memberof OAuth2Client
     */
    id?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof OAuth2Client
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof OAuth2Client
     */
    description?: string;
    /**
     * クライアント開発者UUID
     * @type {string}
     * @memberof OAuth2Client
     */
    developerId?: string;
}
/**
 * OAuth2クライアント詳細情報
 * @export
 * @interface OAuth2ClientDetail
 */
export interface OAuth2ClientDetail {
    /**
     * クライアントUUID
     * @type {string}
     * @memberof OAuth2ClientDetail
     */
    id?: string;
    /**
     * クライアント開発者UUID
     * @type {string}
     * @memberof OAuth2ClientDetail
     */
    developerId?: string;
    /**
     * 説明
     * @type {string}
     * @memberof OAuth2ClientDetail
     */
    description?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof OAuth2ClientDetail
     */
    name?: string;
    /**
     * 要求スコープの配列
     * @type {Array<OAuth2Scope>}
     * @memberof OAuth2ClientDetail
     */
    scopes?: Array<OAuth2Scope>;
    /**
     * コールバックURL
     * @type {string}
     * @memberof OAuth2ClientDetail
     */
    callbackUrl?: string;
    /**
     * クライアントシークレット
     * @type {string}
     * @memberof OAuth2ClientDetail
     */
    secret?: string;
}
/**
 * OAuth2スコープ
 * @export
 * @enum {string}
 */
export declare enum OAuth2Scope {
    Read = "read",
    Write = "write",
    ManageBot = "manage_bot"
}
/**
 * 親チャンネル変更イベント
 * @export
 * @interface ParentChangedEvent
 */
export interface ParentChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof ParentChangedEvent
     */
    userId?: string;
    /**
     * 変更前親チャンネルUUID
     * @type {string}
     * @memberof ParentChangedEvent
     */
    before?: string;
    /**
     * 変更後親チャンネルUUID
     * @type {string}
     * @memberof ParentChangedEvent
     */
    after?: string;
}
/**
 * BOT情報変更リクエスト
 * @export
 * @interface PatchBotRequest
 */
export interface PatchBotRequest {
    /**
     * BOTユーザー表示名
     * @type {string}
     * @memberof PatchBotRequest
     */
    displayName?: string;
    /**
     * BOTの説明
     * @type {string}
     * @memberof PatchBotRequest
     */
    description?: string;
    /**
     * 特権
     * @type {boolean}
     * @memberof PatchBotRequest
     */
    privileged?: boolean;
    /**
     * BOTサーバーエンドポイント
     * @type {string}
     * @memberof PatchBotRequest
     */
    endpoint?: string;
    /**
     * 移譲先の開発者UUID
     * @type {string}
     * @memberof PatchBotRequest
     */
    developerId?: string;
    /**
     * 購読するイベント
     * @type {Array<string>}
     * @memberof PatchBotRequest
     */
    subscribeEvents?: Array<string>;
}
/**
 * チャンネル情報変更リクエスト
 * @export
 * @interface PatchChannelRequest
 */
export interface PatchChannelRequest {
    /**
     * チャンネル名
     * @type {string}
     * @memberof PatchChannelRequest
     */
    name?: string;
    /**
     * 可視かどうか
     * @type {boolean}
     * @memberof PatchChannelRequest
     */
    visibility?: boolean;
    /**
     * 強制通知チャンネルかどうか
     * @type {boolean}
     * @memberof PatchChannelRequest
     */
    force?: boolean;
    /**
     * 親チャンネルUUID
     * @type {string}
     * @memberof PatchChannelRequest
     */
    parent?: string;
}
/**
 * チャンネル購読者編集リクエスト
 * @export
 * @interface PatchChannelSubscribersRequest
 */
export interface PatchChannelSubscribersRequest {
    /**
     * 通知をオンにするユーザーのUUID配列
     * @type {Array<string>}
     * @memberof PatchChannelSubscribersRequest
     */
    on?: Array<string>;
    /**
     * 通知をオフにするユーザーのUUID配列
     * @type {Array<string>}
     * @memberof PatchChannelSubscribersRequest
     */
    off?: Array<string>;
}
/**
 * OAuth2クライアント情報変更リクエスト
 * @export
 * @interface PatchClientRequest
 */
export interface PatchClientRequest {
    /**
     * クライアント名
     * @type {string}
     * @memberof PatchClientRequest
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof PatchClientRequest
     */
    description?: string;
    /**
     * コールバックURL
     * @type {string}
     * @memberof PatchClientRequest
     */
    callbackUrl?: string;
    /**
     * クライアント開発者UUID
     * @type {string}
     * @memberof PatchClientRequest
     */
    developerId?: string;
}
/**
 * クリップフォルダ情報編集リクエスト
 * @export
 * @interface PatchClipFolderRequest
 */
export interface PatchClipFolderRequest {
    /**
     * フォルダ名
     * @type {string}
     * @memberof PatchClipFolderRequest
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof PatchClipFolderRequest
     */
    description?: string;
}
/**
 * ユーザーグループメンバー編集リクエスト
 * @export
 * @interface PatchGroupMemberRequest
 */
export interface PatchGroupMemberRequest {
    /**
     * ユーザーの役割
     * @type {string}
     * @memberof PatchGroupMemberRequest
     */
    role?: string;
}
/**
 * 自分のユーザー情報変更リクエスト
 * @export
 * @interface PatchMeRequest
 */
export interface PatchMeRequest {
    /**
     * 新しい表示名
     * @type {string}
     * @memberof PatchMeRequest
     */
    displayName?: string;
    /**
     * TwitterID
     * @type {string}
     * @memberof PatchMeRequest
     */
    twitterId?: string;
    /**
     * 自己紹介(biography)
     * @type {string}
     * @memberof PatchMeRequest
     */
    bio?: string;
}
/**
 * スタンプパレット情報変更リクエスト
 * @export
 * @interface PatchStampPaletteRequest
 */
export interface PatchStampPaletteRequest {
    /**
     * パレット名
     * @type {string}
     * @memberof PatchStampPaletteRequest
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof PatchStampPaletteRequest
     */
    description?: string;
}
/**
 * スタンプ情報変更リクエスト
 * @export
 * @interface PatchStampRequest
 */
export interface PatchStampRequest {
    /**
     * スタンプ名
     * @type {string}
     * @memberof PatchStampRequest
     */
    name?: string;
    /**
     * 作成者UUID
     * @type {string}
     * @memberof PatchStampRequest
     */
    creatorId?: string;
}
/**
 * ユーザーグループ編集リクエスト
 * @export
 * @interface PatchUserGroupRequest
 */
export interface PatchUserGroupRequest {
    /**
     * グループ名
     * @type {string}
     * @memberof PatchUserGroupRequest
     */
    name?: string;
    /**
     * グループ説明
     * @type {string}
     * @memberof PatchUserGroupRequest
     */
    description?: string;
    /**
     * グループタイプ
     * @type {string}
     * @memberof PatchUserGroupRequest
     */
    type?: string;
}
/**
 * ユーザー情報編集リクエスト
 * @export
 * @interface PatchUserRequest
 */
export interface PatchUserRequest {
    /**
     * 新しい表示名
     * @type {string}
     * @memberof PatchUserRequest
     */
    displayName?: string;
    /**
     * TwitterID
     * @type {string}
     * @memberof PatchUserRequest
     */
    twitterId?: string;
    /**
     *
     * @type {UserAccountState}
     * @memberof PatchUserRequest
     */
    state?: UserAccountState;
    /**
     * ユーザーロール
     * @type {string}
     * @memberof PatchUserRequest
     */
    role?: string;
}
/**
 * ユーザーのタグの編集リクエスト
 * @export
 * @interface PatchUserTagRequest
 */
export interface PatchUserTagRequest {
    /**
     * タグのロック状態
     * @type {boolean}
     * @memberof PatchUserTagRequest
     */
    isLocked: boolean;
}
/**
 * Webhook情報変更リクエスト
 * @export
 * @interface PatchWebhookRequest
 */
export interface PatchWebhookRequest {
    /**
     * Webhookユーザー表示名
     * @type {string}
     * @memberof PatchWebhookRequest
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof PatchWebhookRequest
     */
    description?: string;
    /**
     * デフォルトの投稿先チャンネルUUID
     * @type {string}
     * @memberof PatchWebhookRequest
     */
    channelId?: string;
    /**
     * Webhookシークレット
     * @type {string}
     * @memberof PatchWebhookRequest
     */
    secret?: string;
    /**
     * 移譲先のユーザーUUID
     * @type {string}
     * @memberof PatchWebhookRequest
     */
    ownerId?: string;
}
/**
 * ピン情報(メッセージ本体付き)
 * @export
 * @interface Pin
 */
export interface Pin {
    /**
     * ピン留めしたユーザーUUID
     * @type {string}
     * @memberof Pin
     */
    userId?: string;
    /**
     * ピン留めされた日時
     * @type {Date}
     * @memberof Pin
     */
    pinnedAt?: Date;
    /**
     *
     * @type {Message}
     * @memberof Pin
     */
    message?: Message;
}
/**
 * ピン追加イベント
 * @export
 * @interface PinAddedEvent
 */
export interface PinAddedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof PinAddedEvent
     */
    userId?: string;
    /**
     * メッセージUUID
     * @type {string}
     * @memberof PinAddedEvent
     */
    messageId?: string;
}
/**
 * ピン削除イベント
 * @export
 * @interface PinRemovedEvent
 */
export interface PinRemovedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof PinRemovedEvent
     */
    userId?: string;
    /**
     * メッセージUUID
     * @type {string}
     * @memberof PinRemovedEvent
     */
    messageId?: string;
}
/**
 * BOTチャンネル参加リクエスト
 * @export
 * @interface PostBotActionJoinRequest
 */
export interface PostBotActionJoinRequest {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof PostBotActionJoinRequest
     */
    channelId: string;
}
/**
 * BOTチャンネル退出リクエスト
 * @export
 * @interface PostBotActionLeaveRequest
 */
export interface PostBotActionLeaveRequest {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof PostBotActionLeaveRequest
     */
    channelId: string;
}
/**
 * BOT作成リクエスト
 * @export
 * @interface PostBotRequest
 */
export interface PostBotRequest {
    /**
     * BOTユーザーID 自動的に接頭辞\"BOT_\"が付与されます
     * @type {string}
     * @memberof PostBotRequest
     */
    name: string;
    /**
     * BOTユーザー表示名
     * @type {string}
     * @memberof PostBotRequest
     */
    displayName: string;
    /**
     * BOTの説明
     * @type {string}
     * @memberof PostBotRequest
     */
    description: string;
    /**
     * BOTサーバーエンドポイント
     * @type {string}
     * @memberof PostBotRequest
     */
    endpoint: string;
}
/**
 * チャンネル作成リクエスト
 * @export
 * @interface PostChannelRequest
 */
export interface PostChannelRequest {
    /**
     * チャンネル名
     * @type {string}
     * @memberof PostChannelRequest
     */
    name: string;
    /**
     * 親チャンネルのUUID ルートに作成する場合はnullを指定
     * @type {string}
     * @memberof PostChannelRequest
     */
    parent?: string | null;
}
/**
 * OAuth2クライアント作成リクエスト
 * @export
 * @interface PostClientRequest
 */
export interface PostClientRequest {
    /**
     * クライアント名
     * @type {string}
     * @memberof PostClientRequest
     */
    name: string;
    /**
     * コールバックURL
     * @type {string}
     * @memberof PostClientRequest
     */
    callbackUrl: string;
    /**
     * 要求スコープの配列
     * @type {Array<OAuth2Scope>}
     * @memberof PostClientRequest
     */
    scopes: Array<OAuth2Scope>;
    /**
     * 説明
     * @type {string}
     * @memberof PostClientRequest
     */
    description: string;
}
/**
 * クリップ追加リクエスト
 * @export
 * @interface PostClipFolderMessageRequest
 */
export interface PostClipFolderMessageRequest {
    /**
     * メッセージUUID
     * @type {string}
     * @memberof PostClipFolderMessageRequest
     */
    messageId: string;
}
/**
 * クリップフォルダ作成リクエスト
 * @export
 * @interface PostClipFolderRequest
 */
export interface PostClipFolderRequest {
    /**
     * フォルダ名
     * @type {string}
     * @memberof PostClipFolderRequest
     */
    name: string;
    /**
     * 説明
     * @type {string}
     * @memberof PostClipFolderRequest
     */
    description?: string;
}
/**
 * ファイルアップロードリクエスト
 * @export
 * @interface PostFileRequest
 */
export interface PostFileRequest {
    /**
     * ファイル本体
     * @type {any}
     * @memberof PostFileRequest
     */
    file: any;
    /**
     * アップロード先チャンネルUUID
     * @type {string}
     * @memberof PostFileRequest
     */
    channelId: string;
}
/**
 * ログインリクエスト
 * @export
 * @interface PostLoginRequest
 */
export interface PostLoginRequest {
    /**
     * ユーザー名
     * @type {string}
     * @memberof PostLoginRequest
     */
    name: string;
    /**
     * パスワード
     * @type {string}
     * @memberof PostLoginRequest
     */
    password: string;
}
/**
 * メッセージ投稿リクエスト
 * @export
 * @interface PostMessageRequest
 */
export interface PostMessageRequest {
    /**
     * メッセージ本文
     * @type {string}
     * @memberof PostMessageRequest
     */
    content: string;
    /**
     * メンション・チャンネルリンクを自動埋め込みするか
     * @type {boolean}
     * @memberof PostMessageRequest
     */
    embed?: boolean;
}
/**
 * スタンプを押すリクエスト
 * @export
 * @interface PostMessageStampRequest
 */
export interface PostMessageStampRequest {
    /**
     * 押す数
     * @type {number}
     * @memberof PostMessageStampRequest
     */
    count: number;
}
/**
 * FCMデバイス登録リクエスト
 * @export
 * @interface PostMyFCMDeviceRequest
 */
export interface PostMyFCMDeviceRequest {
    /**
     * FCMのデバイストークン
     * @type {string}
     * @memberof PostMyFCMDeviceRequest
     */
    token: string;
}
/**
 * スタンプパレット作成リクエスト
 * @export
 * @interface PostStampPaletteRequest
 */
export interface PostStampPaletteRequest {
    /**
     * パレット内のスタンプのUUID配列
     * @type {Array<string>}
     * @memberof PostStampPaletteRequest
     */
    stamps?: Array<string>;
    /**
     * パレット名
     * @type {string}
     * @memberof PostStampPaletteRequest
     */
    name: string;
    /**
     * 説明
     * @type {string}
     * @memberof PostStampPaletteRequest
     */
    description?: string;
}
/**
 * スタンプ作成リクエスト
 * @export
 * @interface PostStampRequest
 */
export interface PostStampRequest {
    /**
     * スタンプ名
     * @type {string}
     * @memberof PostStampRequest
     */
    name: string;
    /**
     * スタンプ画像(1MBまでのpng, jpeg, gif)
     * @type {any}
     * @memberof PostStampRequest
     */
    file: any;
}
/**
 * スター追加リクエスト
 * @export
 * @interface PostStarRequest
 */
export interface PostStarRequest {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof PostStarRequest
     */
    channelId: string;
}
/**
 * グループ管理者追加リクエスト
 * @export
 * @interface PostUserGroupAdminRequest
 */
export interface PostUserGroupAdminRequest {
    /**
     * 追加するユーザーのUUID
     * @type {string}
     * @memberof PostUserGroupAdminRequest
     */
    id: string;
}
/**
 * ユーザーグループ作成リクエスト
 * @export
 * @interface PostUserGroupRequest
 */
export interface PostUserGroupRequest {
    /**
     * グループ名
     * @type {string}
     * @memberof PostUserGroupRequest
     */
    name: string;
    /**
     * 説明
     * @type {string}
     * @memberof PostUserGroupRequest
     */
    description: string;
    /**
     * グループタイプ
     * @type {string}
     * @memberof PostUserGroupRequest
     */
    type?: string;
}
/**
 * ユーザー登録リクエスト
 * @export
 * @interface PostUserRequest
 */
export interface PostUserRequest {
    /**
     * ユーザー名
     * @type {string}
     * @memberof PostUserRequest
     */
    name: string;
    /**
     * パスワード
     * @type {string}
     * @memberof PostUserRequest
     */
    password: string;
}
/**
 * ユーザータグ追加リクエスト
 * @export
 * @interface PostUserTagRequest
 */
export interface PostUserTagRequest {
    /**
     * タグ文字列
     * @type {string}
     * @memberof PostUserTagRequest
     */
    tag: string;
}
/**
 * skyway用認証リクエスト
 * @export
 * @interface PostWebRTCAuthenticateRequest
 */
export interface PostWebRTCAuthenticateRequest {
    /**
     * ピアID
     * @type {string}
     * @memberof PostWebRTCAuthenticateRequest
     */
    peerId: string;
}
/**
 * Webhook作成リクエスト
 * @export
 * @interface PostWebhookRequest
 */
export interface PostWebhookRequest {
    /**
     * Webhookユーザーの表示名
     * @type {string}
     * @memberof PostWebhookRequest
     */
    name: string;
    /**
     * 説明
     * @type {string}
     * @memberof PostWebhookRequest
     */
    description: string;
    /**
     * デフォルトの投稿先チャンネルUUID
     * @type {string}
     * @memberof PostWebhookRequest
     */
    channelId: string;
    /**
     * Webhookシークレット
     * @type {string}
     * @memberof PostWebhookRequest
     */
    secret?: string;
}
/**
 * チャンネル購読レベル変更リクエスト
 * @export
 * @interface PutChannelSubscribeLevelRequest
 */
export interface PutChannelSubscribeLevelRequest {
    /**
     *
     * @type {ChannelSubscribeLevel}
     * @memberof PutChannelSubscribeLevelRequest
     */
    level: ChannelSubscribeLevel;
}
/**
 * 通知をオンにするユーザーのUUID配列
 * @export
 * @interface PutChannelSubscribersRequest
 */
export interface PutChannelSubscribersRequest extends Array<string> {
}
/**
 * チャンネルトピック編集リクエスト
 * @export
 * @interface PutChannelTopicRequest
 */
export interface PutChannelTopicRequest {
    /**
     * トピック
     * @type {string}
     * @memberof PutChannelTopicRequest
     */
    topic: string;
}
/**
 * パスワード変更リクエスト
 * @export
 * @interface PutMyPasswordRequest
 */
export interface PutMyPasswordRequest {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof PutMyPasswordRequest
     */
    password: string;
    /**
     * 新しいパスワード
     * @type {string}
     * @memberof PutMyPasswordRequest
     */
    newPassword: string;
}
/**
 * パレット内のスタンプUUIDの配列
 * @export
 * @interface PutStampPaletteStampsRequest
 */
export interface PutStampPaletteStampsRequest extends Array<string> {
}
/**
 * アイコン画像変更リクエスト
 * @export
 * @interface PutUserIconRequest
 */
export interface PutUserIconRequest {
    /**
     * アイコン画像(1MBまでのpng, jpeg, gif)
     * @type {any}
     * @memberof PutUserIconRequest
     */
    file: any;
}
/**
 * ユーザーパスワード変更リクエスト
 * @export
 * @interface PutUserPasswordRequest
 */
export interface PutUserPasswordRequest {
    /**
     * 新しいパスワード
     * @type {string}
     * @memberof PutUserPasswordRequest
     */
    newPassword: string;
}
/**
 * スタンプ情報
 * @export
 * @interface Stamp
 */
export interface Stamp {
    /**
     * スタンプUUID
     * @type {string}
     * @memberof Stamp
     */
    id?: string;
    /**
     * スタンプ名
     * @type {string}
     * @memberof Stamp
     */
    name?: string;
    /**
     * 作成者UUID
     * @type {string}
     * @memberof Stamp
     */
    creatorId?: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof Stamp
     */
    createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof Stamp
     */
    updatedAt?: Date;
    /**
     * ファイルUUID
     * @type {string}
     * @memberof Stamp
     */
    fileId?: string;
    /**
     * Unicode絵文字か
     * @type {boolean}
     * @memberof Stamp
     */
    isUnicode?: boolean;
}
/**
 * スタンプ履歴の１項目
 * @export
 * @interface StampHistoryEntry
 */
export interface StampHistoryEntry {
    /**
     * スタンプUUID
     * @type {any}
     * @memberof StampHistoryEntry
     */
    stampId?: any;
    /**
     * 使用日時
     * @type {Date}
     * @memberof StampHistoryEntry
     */
    datetime?: Date;
}
/**
 * スタンプパレット情報
 * @export
 * @interface StampPalette
 */
export interface StampPalette {
    /**
     * スタンプパレットUUID
     * @type {string}
     * @memberof StampPalette
     */
    id?: string;
    /**
     * パレット名
     * @type {string}
     * @memberof StampPalette
     */
    name?: string;
    /**
     * パレット内のスタンプのUUID配列
     * @type {Array<string>}
     * @memberof StampPalette
     */
    stamps?: Array<string>;
    /**
     * 作成者UUID
     * @type {string}
     * @memberof StampPalette
     */
    creatorId?: string;
    /**
     * パレット作成日時
     * @type {Date}
     * @memberof StampPalette
     */
    createdAt?: Date;
    /**
     * パレット更新日時
     * @type {Date}
     * @memberof StampPalette
     */
    updatedAt?: Date;
    /**
     * パレット説明
     * @type {string}
     * @memberof StampPalette
     */
    description?: string;
}
/**
 * 購読者変更イベント
 * @export
 * @interface SubscribersChangedEvent
 */
export interface SubscribersChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof SubscribersChangedEvent
     */
    userId?: string;
    /**
     * オンにされたユーザーのUUID配列
     * @type {Array<string>}
     * @memberof SubscribersChangedEvent
     */
    on?: Array<string>;
    /**
     * オフにされたユーザーのUUID配列
     * @type {Array<string>}
     * @memberof SubscribersChangedEvent
     */
    off?: Array<string>;
}
/**
 * タグ情報
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * タグUUID
     * @type {string}
     * @memberof Tag
     */
    id?: string;
    /**
     * タグ文字列
     * @type {string}
     * @memberof Tag
     */
    tag?: string;
    /**
     * タグがつけられているユーザーのUUID配列
     * @type {Array<string>}
     * @memberof Tag
     */
    users?: Array<string>;
}
/**
 * トピック変更イベント
 * @export
 * @interface TopicChangedEvent
 */
export interface TopicChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof TopicChangedEvent
     */
    userId?: string;
    /**
     * 変更前トピック
     * @type {string}
     * @memberof TopicChangedEvent
     */
    before?: string;
    /**
     * 変更後トピック
     * @type {string}
     * @memberof TopicChangedEvent
     */
    after?: string;
}
/**
 * 未読チャンネル情報
 * @export
 * @interface UnreadChannel
 */
export interface UnreadChannel {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof UnreadChannel
     */
    channelId?: string;
    /**
     * 未読メッセージ数
     * @type {number}
     * @memberof UnreadChannel
     */
    count?: number;
    /**
     * 自分宛てメッセージが含まれているかどうか
     * @type {boolean}
     * @memberof UnreadChannel
     */
    noticeable?: boolean;
    /**
     * チャンネルの最古の未読メッセージの日時
     * @type {Date}
     * @memberof UnreadChannel
     */
    since?: Date;
    /**
     * チャンネルの最新の未読メッセージの日時
     * @type {Date}
     * @memberof UnreadChannel
     */
    updatedAt?: Date;
}
/**
 * ユーザー情報
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * ユーザー表示名
     * @type {string}
     * @memberof User
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof User
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof User
     */
    bot?: boolean;
    /**
     *
     * @type {UserAccountState}
     * @memberof User
     */
    state?: UserAccountState;
    /**
     * 更新日時
     * @type {Date}
     * @memberof User
     */
    updatedAt?: Date;
}
/**
 * ユーザーアカウント状態
 * @export
 * @enum {string}
 */
export declare enum UserAccountState {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * ユーザー詳細情報
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof UserDetail
     */
    id?: string;
    /**
     *
     * @type {UserAccountState}
     * @memberof UserDetail
     */
    state?: UserAccountState;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    bot?: boolean;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof UserDetail
     */
    iconFileId?: string;
    /**
     * ユーザー表示名
     * @type {string}
     * @memberof UserDetail
     */
    displayName?: string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof UserDetail
     */
    name?: string;
    /**
     * Twitter ID
     * @type {string}
     * @memberof UserDetail
     */
    twitterId?: string;
    /**
     * 最終オンライン日時
     * @type {Date}
     * @memberof UserDetail
     */
    lastOnline?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof UserDetail
     */
    updatedAt?: Date;
    /**
     * タグリスト
     * @type {Array<UserTag>}
     * @memberof UserDetail
     */
    tags?: Array<UserTag>;
    /**
     * 所属グループのUUIDの配列
     * @type {Array<string>}
     * @memberof UserDetail
     */
    groups?: Array<string>;
    /**
     * 自己紹介(biography)
     * @type {string}
     * @memberof UserDetail
     */
    bio?: string;
}
/**
 * ユーザーグループ
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * グループUUID
     * @type {string}
     * @memberof UserGroup
     */
    id?: string;
    /**
     * グループ名
     * @type {string}
     * @memberof UserGroup
     */
    name?: string;
    /**
     * グループ説明
     * @type {string}
     * @memberof UserGroup
     */
    description?: string;
    /**
     * グループタイプ
     * @type {string}
     * @memberof UserGroup
     */
    type?: string;
    /**
     * グループメンバーの配列
     * @type {Array<UserGroupMember>}
     * @memberof UserGroup
     */
    members?: Array<UserGroupMember>;
    /**
     * 作成日時
     * @type {Date}
     * @memberof UserGroup
     */
    createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof UserGroup
     */
    updatedAt?: Date;
    /**
     * グループ管理者のUUIDの配列
     * @type {Array<string>}
     * @memberof UserGroup
     */
    admins?: Array<string>;
}
/**
 * ユーザーグループメンバー
 * @export
 * @interface UserGroupMember
 */
export interface UserGroupMember {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof UserGroupMember
     */
    id: string;
    /**
     * ユーザーの役割
     * @type {string}
     * @memberof UserGroupMember
     */
    role?: string;
}
/**
 * ユーザーのチャンネル購読状態
 * @export
 * @interface UserSubscribeState
 */
export interface UserSubscribeState {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof UserSubscribeState
     */
    channelId?: string;
    /**
     *
     * @type {ChannelSubscribeLevel}
     * @memberof UserSubscribeState
     */
    level?: ChannelSubscribeLevel;
}
/**
 * ユーザータグ
 * @export
 * @interface UserTag
 */
export interface UserTag {
    /**
     * タグUUID
     * @type {string}
     * @memberof UserTag
     */
    tagId?: string;
    /**
     * タグ文字列
     * @type {string}
     * @memberof UserTag
     */
    tag?: string;
    /**
     * タグがロックされているか
     * @type {boolean}
     * @memberof UserTag
     */
    isLocked?: boolean;
    /**
     * タグ付与日時
     * @type {Date}
     * @memberof UserTag
     */
    createdAt?: Date;
    /**
     * タグ更新日時
     * @type {Date}
     * @memberof UserTag
     */
    updatedAt?: Date;
}
/**
 * チャンネル可視状態変更イベント
 * @export
 * @interface VisibilityChangedEvent
 */
export interface VisibilityChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof VisibilityChangedEvent
     */
    userId?: string;
    /**
     * 変更後可視状態
     * @type {boolean}
     * @memberof VisibilityChangedEvent
     */
    visibility?: boolean;
}
/**
 * skyway用認証リクエストリザルト
 * @export
 * @interface WebRTCAuthenticateResult
 */
export interface WebRTCAuthenticateResult {
    /**
     * ピアID
     * @type {string}
     * @memberof WebRTCAuthenticateResult
     */
    peerId?: string;
    /**
     * TTL
     * @type {number}
     * @memberof WebRTCAuthenticateResult
     */
    ttl?: number;
    /**
     * タイムスタンプ
     * @type {number}
     * @memberof WebRTCAuthenticateResult
     */
    timestamp?: number;
    /**
     * 認証トークン
     * @type {string}
     * @memberof WebRTCAuthenticateResult
     */
    authToken?: string;
}
/**
 * WebRTCユーザー状態
 * @export
 * @interface WebRTCUserState
 */
export interface WebRTCUserState {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof WebRTCUserState
     */
    userId?: string;
    /**
     * 接続先チャンネルUUID
     * @type {string}
     * @memberof WebRTCUserState
     */
    channelId?: string | null;
    /**
     * WebRTC状態の配列
     * @type {Array<string>}
     * @memberof WebRTCUserState
     */
    state?: Array<string>;
}
/**
 * Webhook情報
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     * WebhookUUID
     * @type {string}
     * @memberof Webhook
     */
    id?: string;
    /**
     * WebhookユーザーUUID
     * @type {string}
     * @memberof Webhook
     */
    botUserId?: string;
    /**
     * Webhookユーザー表示名
     * @type {string}
     * @memberof Webhook
     */
    displayName?: string;
    /**
     * 説明
     * @type {string}
     * @memberof Webhook
     */
    description?: string;
    /**
     * セキュアWebhookかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    secure?: boolean;
    /**
     * デフォルトの投稿先チャンネルUUID
     * @type {string}
     * @memberof Webhook
     */
    channelId?: string;
    /**
     * オーナーUUID
     * @type {string}
     * @memberof Webhook
     */
    ownerId?: string;
    /**
     * 作成日時
     * @type {Date}
     * @memberof Webhook
     */
    createdAt?: Date;
    /**
     * 更新日時
     * @type {Date}
     * @memberof Webhook
     */
    updatedAt?: Date;
}
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export declare const ActivityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [subscribeOnly] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityTimeline(limit?: number, subscribeOnly?: boolean, options?: any): RequestArgs;
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnlineUsers(options?: any): RequestArgs;
};
/**
 * ActivityApi - functional programming interface
 * @export
 */
export declare const ActivityApiFp: (configuration?: Configuration) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [subscribeOnly] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityTimeline(limit?: number, subscribeOnly?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnlineUsers(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
};
/**
 * ActivityApi - factory interface
 * @export
 */
export declare const ActivityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [subscribeOnly] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivityTimeline(limit?: number, subscribeOnly?: boolean, options?: any): AxiosPromise<Message[]>;
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOnlineUsers(options?: any): AxiosPromise<string[]>;
};
/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export declare class ActivityApi extends BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [subscribeOnly] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    getActivityTimeline(limit?: number, subscribeOnly?: boolean, options?: any): AxiosPromise<Message[]>;
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    getOnlineUsers(options?: any): AxiosPromise<string[]>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): RequestArgs;
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(redirect?: string, postLoginRequest?: PostLoginRequest, options?: any): RequestArgs;
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(redirect?: string, all?: boolean, options?: any): RequestArgs;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): RequestArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginSession[]>;
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(redirect?: string, postLoginRequest?: PostLoginRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(redirect?: string, all?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): AxiosPromise<LoginSession[]>;
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(redirect?: string, postLoginRequest?: PostLoginRequest, options?: any): AxiosPromise<void>;
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(redirect?: string, all?: boolean, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    getMySessions(options?: any): AxiosPromise<LoginSession[]>;
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(redirect?: string, postLoginRequest?: PostLoginRequest, options?: any): AxiosPromise<void>;
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logout(redirect?: string, all?: boolean, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void>;
}
/**
 * BotApi - axios parameter creator
 * @export
 */
export declare const BotApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateBot(botId: string, options?: any): RequestArgs;
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(botId: string, file: any, options?: any): RequestArgs;
    /**
     * BOTを作成します。 作成後にアクティベーション・購読イベントの設定を行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(postBotRequest?: PostBotRequest, options?: any): RequestArgs;
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botId: string, options?: any): RequestArgs;
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(botId: string, patchBotRequest?: PatchBotRequest, options?: any): RequestArgs;
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(botId: string, detail?: boolean, options?: any): RequestArgs;
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botId: string, options?: any): RequestArgs;
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(botId: string, limit?: number, offset?: number, options?: any): RequestArgs;
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(all?: boolean, options?: any): RequestArgs;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inactivateBot(botId: string, options?: any): RequestArgs;
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotJoinChannel(botId: string, postBotActionJoinRequest?: PostBotActionJoinRequest, options?: any): RequestArgs;
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotLeaveChannel(botId: string, postBotActionLeaveRequest?: PostBotActionLeaveRequest, options?: any): RequestArgs;
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBot(botId: string, options?: any): RequestArgs;
};
/**
 * BotApi - functional programming interface
 * @export
 */
export declare const BotApiFp: (configuration?: Configuration) => {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateBot(botId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(botId: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * BOTを作成します。 作成後にアクティベーション・購読イベントの設定を行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(postBotRequest?: PostBotRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotDetail>;
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(botId: string, patchBotRequest?: PatchBotRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(botId: string, detail?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot | BotDetail>;
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(botId: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotEventLog[]>;
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(all?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot[]>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotUser[]>;
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inactivateBot(botId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotJoinChannel(botId: string, postBotActionJoinRequest?: PostBotActionJoinRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotLeaveChannel(botId: string, postBotActionLeaveRequest?: PostBotActionLeaveRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBot(botId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotTokens>;
};
/**
 * BotApi - factory interface
 * @export
 */
export declare const BotApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(botId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * BOTを作成します。 作成後にアクティベーション・購読イベントの設定を行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBot(postBotRequest?: PostBotRequest, options?: any): AxiosPromise<BotDetail>;
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(botId: string, patchBotRequest?: PatchBotRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(botId: string, detail?: boolean, options?: any): AxiosPromise<Bot | BotDetail>;
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotLogs(botId: string, limit?: number, offset?: number, options?: any): AxiosPromise<BotEventLog[]>;
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(all?: boolean, options?: any): AxiosPromise<Bot[]>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelId: string, options?: any): AxiosPromise<BotUser[]>;
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inactivateBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotJoinChannel(botId: string, postBotActionJoinRequest?: PostBotActionJoinRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    letBotLeaveChannel(botId: string, postBotActionLeaveRequest?: PostBotActionLeaveRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBot(botId: string, options?: any): AxiosPromise<BotTokens>;
};
/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
export declare class BotApi extends BaseAPI {
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    activateBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotIcon(botId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * BOTを作成します。 作成後にアクティベーション・購読イベントの設定を行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    createBot(postBotRequest?: PostBotRequest, options?: any): AxiosPromise<BotDetail>;
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    deleteBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    editBot(botId: string, patchBotRequest?: PatchBotRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBot(botId: string, detail?: boolean, options?: any): AxiosPromise<Bot | BotDetail>;
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotIcon(botId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotLogs(botId: string, limit?: number, offset?: number, options?: any): AxiosPromise<BotEventLog[]>;
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBots(all?: boolean, options?: any): AxiosPromise<Bot[]>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getChannelBots(channelId: string, options?: any): AxiosPromise<BotUser[]>;
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    inactivateBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    letBotJoinChannel(botId: string, postBotActionJoinRequest?: PostBotActionJoinRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    letBotLeaveChannel(botId: string, postBotActionLeaveRequest?: PostBotActionLeaveRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    reissueBot(botId: string, options?: any): AxiosPromise<BotTokens>;
}
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const ChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(postChannelRequest?: PostChannelRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(channelId: string, patchChannelRequest?: PatchChannelRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルのトピックを編集します。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelTopic(channelId: string, putChannelTopicRequest?: PutChannelTopicRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelStats(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelViewers(channelId: string, options?: any): RequestArgs;
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includeDm?: boolean, options?: any): RequestArgs;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(channelId: string, requestBody?: string[], options?: any): RequestArgs;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const ChannelApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(postChannelRequest?: PostChannelRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(channelId: string, patchChannelRequest?: PatchChannelRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを編集します。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelTopic(channelId: string, putChannelTopicRequest?: PutChannelTopicRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotUser[]>;
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelEvent[]>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin[]>;
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelStats(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelStats>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelTopic>;
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelViewers(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelViewer[]>;
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includeDm?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelList>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(channelId: string, requestBody?: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const ChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(postChannelRequest?: PostChannelRequest, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(channelId: string, patchChannelRequest?: PatchChannelRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを編集します。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelTopic(channelId: string, putChannelTopicRequest?: PutChannelTopicRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelId: string, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelId: string, options?: any): AxiosPromise<BotUser[]>;
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<ChannelEvent[]>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelStats(channelId: string, options?: any): AxiosPromise<ChannelStats>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(channelId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(channelId: string, options?: any): AxiosPromise<ChannelTopic>;
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelViewers(channelId: string, options?: any): AxiosPromise<ChannelViewer[]>;
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(includeDm?: boolean, options?: any): AxiosPromise<ChannelList>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(channelId: string, requestBody?: string[], options?: any): AxiosPromise<void>;
};
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI {
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    createChannel(postChannelRequest?: PostChannelRequest, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannel(channelId: string, patchChannelRequest?: PatchChannelRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを編集します。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannelTopic(channelId: string, putChannelTopicRequest?: PutChannelTopicRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannel(channelId: string, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelBots(channelId: string, options?: any): AxiosPromise<BotUser[]>;
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelEvents(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<ChannelEvent[]>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelStats(channelId: string, options?: any): AxiosPromise<ChannelStats>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelSubscribers(channelId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelTopic(channelId: string, options?: any): AxiosPromise<ChannelTopic>;
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelViewers(channelId: string, options?: any): AxiosPromise<ChannelViewer[]>;
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannels(includeDm?: boolean, options?: any): AxiosPromise<ChannelList>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    setChannelSubscribers(channelId: string, requestBody?: Array<string>, options?: any): AxiosPromise<void>;
}
/**
 * ClipApi - axios parameter creator
 * @export
 */
export declare const ClipApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(folderId: string, postClipFolderMessageRequest?: PostClipFolderMessageRequest, options?: any): RequestArgs;
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(postClipFolderRequest?: PostClipFolderRequest, options?: any): RequestArgs;
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderId: string, options?: any): RequestArgs;
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(folderId: string, patchClipFolderRequest?: PatchClipFolderRequest, options?: any): RequestArgs;
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderId: string, options?: any): RequestArgs;
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): RequestArgs;
    /**
     * 指定したフォルダ内のクリップのリストを取得します。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(folderId: string, limit?: number, offset?: number, options?: any): RequestArgs;
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(folderId: string, messageId: string, options?: any): RequestArgs;
};
/**
 * ClipApi - functional programming interface
 * @export
 */
export declare const ClipApiFp: (configuration?: Configuration) => {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(folderId: string, postClipFolderMessageRequest?: PostClipFolderMessageRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClippedMessage>;
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(postClipFolderRequest?: PostClipFolderRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipFolder>;
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(folderId: string, patchClipFolderRequest?: PatchClipFolderRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipFolder>;
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipFolder[]>;
    /**
     * 指定したフォルダ内のクリップのリストを取得します。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(folderId: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClippedMessage[]>;
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(folderId: string, messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * ClipApi - factory interface
 * @export
 */
export declare const ClipApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(folderId: string, postClipFolderMessageRequest?: PostClipFolderMessageRequest, options?: any): AxiosPromise<ClippedMessage>;
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(postClipFolderRequest?: PostClipFolderRequest, options?: any): AxiosPromise<ClipFolder>;
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(folderId: string, patchClipFolderRequest?: PatchClipFolderRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderId: string, options?: any): AxiosPromise<ClipFolder>;
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): AxiosPromise<ClipFolder[]>;
    /**
     * 指定したフォルダ内のクリップのリストを取得します。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(folderId: string, limit?: number, offset?: number, options?: any): AxiosPromise<ClippedMessage[]>;
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(folderId: string, messageId: string, options?: any): AxiosPromise<void>;
};
/**
 * ClipApi - object-oriented interface
 * @export
 * @class ClipApi
 * @extends {BaseAPI}
 */
export declare class ClipApi extends BaseAPI {
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    clipMessage(folderId: string, postClipFolderMessageRequest?: PostClipFolderMessageRequest, options?: any): AxiosPromise<ClippedMessage>;
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    createClipFolder(postClipFolderRequest?: PostClipFolderRequest, options?: any): AxiosPromise<ClipFolder>;
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    deleteClipFolder(folderId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    editClipFolder(folderId: string, patchClipFolderRequest?: PatchClipFolderRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolder(folderId: string, options?: any): AxiosPromise<ClipFolder>;
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolders(options?: any): AxiosPromise<ClipFolder[]>;
    /**
     * 指定したフォルダ内のクリップのリストを取得します。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClips(folderId: string, limit?: number, offset?: number, options?: any): AxiosPromise<ClippedMessage[]>;
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    unclipMessage(folderId: string, messageId: string, options?: any): AxiosPromise<void>;
}
/**
 * FileApi - axios parameter creator
 * @export
 */
export declare const FileApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileId: string, options?: any): RequestArgs;
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileId: string, dl?: number, options?: any): RequestArgs;
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileId: string, options?: any): RequestArgs;
    /**
     * 指定したクエリでファイルメタのリストを取得します。
     * @summary ファイルメタのリストを取得
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {string} [mime] MIMEタイプ
     * @param {string} [uploaderId] アップロード者UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", mime?: string, uploaderId?: string, options?: any): RequestArgs;
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailImage(fileId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルにファイルをアップロードします。
     * @summary ファイルをアップロード
     * @param {any} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFile(file: any, channelId: string, options?: any): RequestArgs;
};
/**
 * FileApi - functional programming interface
 * @export
 */
export declare const FileApiFp: (configuration?: Configuration) => {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileId: string, dl?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>;
    /**
     * 指定したクエリでファイルメタのリストを取得します。
     * @summary ファイルメタのリストを取得
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {string} [mime] MIMEタイプ
     * @param {string} [uploaderId] アップロード者UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", mime?: string, uploaderId?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo[]>;
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailImage(fileId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したチャンネルにファイルをアップロードします。
     * @summary ファイルをアップロード
     * @param {any} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFile(file: any, channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>;
};
/**
 * FileApi - factory interface
 * @export
 */
export declare const FileApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileId: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileId: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したクエリでファイルメタのリストを取得します。
     * @summary ファイルメタのリストを取得
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {string} [mime] MIMEタイプ
     * @param {string} [uploaderId] アップロード者UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFiles(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", mime?: string, uploaderId?: string, options?: any): AxiosPromise<FileInfo[]>;
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailImage(fileId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したチャンネルにファイルをアップロードします。
     * @summary ファイルをアップロード
     * @param {any} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postFile(file: any, channelId: string, options?: any): AxiosPromise<FileInfo>;
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export declare class FileApi extends BaseAPI {
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    deleteFile(fileId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFile(fileId: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFileMeta(fileId: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したクエリでファイルメタのリストを取得します。
     * @summary ファイルメタのリストを取得
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {string} [mime] MIMEタイプ
     * @param {string} [uploaderId] アップロード者UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFiles(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', mime?: string, uploaderId?: string, options?: any): AxiosPromise<FileInfo[]>;
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getThumbnailImage(fileId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したチャンネルにファイルをアップロードします。
     * @summary ファイルをアップロード
     * @param {any} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    postFile(file: any, channelId: string, options?: any): AxiosPromise<FileInfo>;
}
/**
 * GroupApi - axios parameter creator
 * @export
 */
export declare const GroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupAdmin(groupId: string, postUserGroupAdminRequest?: PostUserGroupAdminRequest, options?: any): RequestArgs;
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupMember(groupId: string, userGroupMember?: UserGroupMember, options?: any): RequestArgs;
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserGroup(postUserGroupRequest?: PostUserGroupRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserGroup(groupId: string, options?: any): RequestArgs;
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroup(groupId: string, patchUserGroupRequest?: PatchUserGroupRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroupMember(groupId: string, userId: string, patchGroupMemberRequest?: PatchGroupMemberRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup(groupId: string, options?: any): RequestArgs;
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupAdmins(groupId: string, options?: any): RequestArgs;
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupMembers(groupId: string, options?: any): RequestArgs;
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(options?: any): RequestArgs;
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupAdmin(groupId: string, userId: string, options?: any): RequestArgs;
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループから削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupMember(groupId: string, userId: string, options?: any): RequestArgs;
};
/**
 * GroupApi - functional programming interface
 * @export
 */
export declare const GroupApiFp: (configuration?: Configuration) => {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupAdmin(groupId: string, postUserGroupAdminRequest?: PostUserGroupAdminRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupMember(groupId: string, userGroupMember?: UserGroupMember, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserGroup(postUserGroupRequest?: PostUserGroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>;
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroup(groupId: string, patchUserGroupRequest?: PatchUserGroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroupMember(groupId: string, userId: string, patchGroupMemberRequest?: PatchGroupMemberRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>;
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupAdmins(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupMembers(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroupMember[]>;
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup[]>;
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupAdmin(groupId: string, userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループから削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupMember(groupId: string, userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * GroupApi - factory interface
 * @export
 */
export declare const GroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupAdmin(groupId: string, postUserGroupAdminRequest?: PostUserGroupAdminRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserGroupMember(groupId: string, userGroupMember?: UserGroupMember, options?: any): AxiosPromise<void>;
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUserGroup(postUserGroupRequest?: PostUserGroupRequest, options?: any): AxiosPromise<UserGroup>;
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserGroup(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroup(groupId: string, patchUserGroupRequest?: PatchUserGroupRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserGroupMember(groupId: string, userId: string, patchGroupMemberRequest?: PatchGroupMemberRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroup(groupId: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupAdmins(groupId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroupMembers(groupId: string, options?: any): AxiosPromise<UserGroupMember[]>;
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupAdmin(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループから削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserGroupMember(groupId: string, userId: string, options?: any): AxiosPromise<void>;
};
/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export declare class GroupApi extends BaseAPI {
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    addUserGroupAdmin(groupId: string, postUserGroupAdminRequest?: PostUserGroupAdminRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    addUserGroupMember(groupId: string, userGroupMember?: UserGroupMember, options?: any): AxiosPromise<void>;
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    createUserGroup(postUserGroupRequest?: PostUserGroupRequest, options?: any): AxiosPromise<UserGroup>;
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    deleteUserGroup(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    editUserGroup(groupId: string, patchUserGroupRequest?: PatchUserGroupRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    editUserGroupMember(groupId: string, userId: string, patchGroupMemberRequest?: PatchGroupMemberRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroup(groupId: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroupAdmins(groupId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroupMembers(groupId: string, options?: any): AxiosPromise<UserGroupMember[]>;
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroups(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    removeUserGroupAdmin(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループから削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    removeUserGroupMember(groupId: string, userId: string, options?: any): AxiosPromise<void>;
}
/**
 * MeApi - axios parameter creator
 * @export
 */
export declare const MeApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): RequestArgs;
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): RequestArgs;
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file: any, options?: any): RequestArgs;
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPassword(putMyPasswordRequest?: PutMyPasswordRequest, options?: any): RequestArgs;
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMe(patchMeRequest?: PatchMeRequest, options?: any): RequestArgs;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): RequestArgs;
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): RequestArgs;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(options?: any): RequestArgs;
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): RequestArgs;
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyQRCode(token?: boolean, options?: any): RequestArgs;
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): RequestArgs;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(limit?: number, options?: any): RequestArgs;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): RequestArgs;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): RequestArgs;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): RequestArgs;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): RequestArgs;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): RequestArgs;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): RequestArgs;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): RequestArgs;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): RequestArgs;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): RequestArgs;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): RequestArgs;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): RequestArgs;
};
/**
 * MeApi - functional programming interface
 * @export
 */
export declare const MeApiFp: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>;
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPassword(putMyPasswordRequest?: PutMyPasswordRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMe(patchMeRequest?: PatchMeRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyUserDetail>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSubscribeState[]>;
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyQRCode(token?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginSession[]>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampHistoryEntry[]>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * MeApi - factory interface
 * @export
 */
export declare const MeApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file: any, options?: any): AxiosPromise<void>;
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyPassword(putMyPasswordRequest?: PutMyPasswordRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMe(patchMeRequest?: PatchMeRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<MyUserDetail>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(options?: any): AxiosPromise<UserSubscribeState[]>;
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): AxiosPromise<any>;
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyQRCode(token?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySessions(options?: any): AxiosPromise<LoginSession[]>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(limit?: number, options?: any): AxiosPromise<StampHistoryEntry[]>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): AxiosPromise<UserTag[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): AxiosPromise<void>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): AxiosPromise<void>;
};
/**
 * MeApi - object-oriented interface
 * @export
 * @class MeApi
 * @extends {BaseAPI}
 */
export declare class MeApi extends BaseAPI {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    changeMyIcon(file: any, options?: any): AxiosPromise<void>;
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    changeMyPassword(putMyPasswordRequest?: PutMyPasswordRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    editMe(patchMeRequest?: PatchMeRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMe(options?: any): AxiosPromise<MyUserDetail>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyChannelSubscriptions(options?: any): AxiosPromise<UserSubscribeState[]>;
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyIcon(options?: any): AxiosPromise<any>;
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyQRCode(token?: boolean, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMySessions(options?: any): AxiosPromise<LoginSession[]>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyStampHistory(limit?: number, options?: any): AxiosPromise<StampHistoryEntry[]>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyStars(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyTokens(options?: any): AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyUserTags(options?: any): AxiosPromise<UserTag[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    readChannel(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): AxiosPromise<void>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    removeMyStar(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): AxiosPromise<void>;
}
/**
 * MessageApi - axios parameter creator
 * @export
 */
export declare const MessageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): RequestArgs;
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(messageId: string, postMessageRequest?: PostMessageRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): RequestArgs;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): RequestArgs;
};
/**
 * MessageApi - functional programming interface
 * @export
 */
export declare const MessageApiFp: (configuration?: Configuration) => {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(messageId: string, postMessageRequest?: PostMessageRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageStamp[]>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * MessageApi - factory interface
 * @export
 */
export declare const MessageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(messageId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageId: string, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageId: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): AxiosPromise<void>;
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export declare class MessageApi extends BaseAPI {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    deleteMessage(messageId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    editMessage(messageId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessage(messageId: string, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessageStamps(messageId: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    removePin(messageId: string, options?: any): AxiosPromise<void>;
}
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export declare const NotificationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(channelId: string, options?: any): RequestArgs;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(options?: any): RequestArgs;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): RequestArgs;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): RequestArgs;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): RequestArgs;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): RequestArgs;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(channelId: string, requestBody?: string[], options?: any): RequestArgs;
    /**
     * # WebSocketプロトコル ## 送信 `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。 ### `viewstate`コマンド このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。 現時点では1つのセッションに対して1つのチャンネルしか設定できない。  `viewstate:(チャンネルID):(閲覧状態)` + チャンネルID: 対象のチャンネルID + 閲覧状態: `none`, `monitoring`, `editing`  最初の`viewstate`コマンドを送る前、または`viewstate:null`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。  ## 受信 SSEのイベントと同じものがTextMessageとして非同期に送られてくる。 `type`と`body`を持つJSONを受信。`type`はSSEのイベントタイプと同じ、`body`はSSEのデータと同じ。 例:  ```json {\"type\":\"USER_ONLINE\",\"body\":{\"id\":\"7dd8e07f-7f5d-4331-9176-b56a4299768b\"}} ```
     * @summary WebSocket通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ws(options?: any): RequestArgs;
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
export declare const NotificationApiFp: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSubscribeState[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(channelId: string, requestBody?: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * # WebSocketプロトコル ## 送信 `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。 ### `viewstate`コマンド このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。 現時点では1つのセッションに対して1つのチャンネルしか設定できない。  `viewstate:(チャンネルID):(閲覧状態)` + チャンネルID: 対象のチャンネルID + 閲覧状態: `none`, `monitoring`, `editing`  最初の`viewstate`コマンドを送る前、または`viewstate:null`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。  ## 受信 SSEのイベントと同じものがTextMessageとして非同期に送られてくる。 `type`と`body`を持つJSONを受信。`type`はSSEのイベントタイプと同じ、`body`はSSEのデータと同じ。 例:  ```json {\"type\":\"USER_ONLINE\",\"body\":{\"id\":\"7dd8e07f-7f5d-4331-9176-b56a4299768b\"}} ```
     * @summary WebSocket通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ws(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * NotificationApi - factory interface
 * @export
 */
export declare const NotificationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelSubscribers(channelId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyChannelSubscriptions(options?: any): AxiosPromise<UserSubscribeState[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readChannel(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setChannelSubscribers(channelId: string, requestBody?: string[], options?: any): AxiosPromise<void>;
    /**
     * # WebSocketプロトコル ## 送信 `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。 ### `viewstate`コマンド このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。 現時点では1つのセッションに対して1つのチャンネルしか設定できない。  `viewstate:(チャンネルID):(閲覧状態)` + チャンネルID: 対象のチャンネルID + 閲覧状態: `none`, `monitoring`, `editing`  最初の`viewstate`コマンドを送る前、または`viewstate:null`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。  ## 受信 SSEのイベントと同じものがTextMessageとして非同期に送られてくる。 `type`と`body`を持つJSONを受信。`type`はSSEのイベントタイプと同じ、`body`はSSEのデータと同じ。 例:  ```json {\"type\":\"USER_ONLINE\",\"body\":{\"id\":\"7dd8e07f-7f5d-4331-9176-b56a4299768b\"}} ```
     * @summary WebSocket通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ws(options?: any): AxiosPromise<void>;
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export declare class NotificationApi extends BaseAPI {
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getChannelSubscribers(channelId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getMyChannelSubscriptions(options?: any): AxiosPromise<UserSubscribeState[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getMyUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    readChannel(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    setChannelSubscribers(channelId: string, requestBody?: Array<string>, options?: any): AxiosPromise<void>;
    /**
     * # WebSocketプロトコル ## 送信 `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。 ### `viewstate`コマンド このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。 現時点では1つのセッションに対して1つのチャンネルしか設定できない。  `viewstate:(チャンネルID):(閲覧状態)` + チャンネルID: 対象のチャンネルID + 閲覧状態: `none`, `monitoring`, `editing`  最初の`viewstate`コマンドを送る前、または`viewstate:null`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。  ## 受信 SSEのイベントと同じものがTextMessageとして非同期に送られてくる。 `type`と`body`を持つJSONを受信。`type`はSSEのイベントタイプと同じ、`body`はSSEのデータと同じ。 例:  ```json {\"type\":\"USER_ONLINE\",\"body\":{\"id\":\"7dd8e07f-7f5d-4331-9176-b56a4299768b\"}} ```
     * @summary WebSocket通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    ws(options?: any): AxiosPromise<void>;
}
/**
 * Oauth2Api - axios parameter creator
 * @export
 */
export declare const Oauth2ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(postClientRequest?: PostClientRequest, options?: any): RequestArgs;
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientId: string, options?: any): RequestArgs;
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClient(clientId: string, patchClientRequest?: PatchClientRequest, options?: any): RequestArgs;
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(clientId: string, detail?: boolean, options?: any): RequestArgs;
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 全てのクライアントを取得する場合は、権限が必要です。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(all?: boolean, options?: any): RequestArgs;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): RequestArgs;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): RequestArgs;
};
/**
 * Oauth2Api - functional programming interface
 * @export
 */
export declare const Oauth2ApiFp: (configuration?: Configuration) => {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(postClientRequest?: PostClientRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2ClientDetail>;
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClient(clientId: string, patchClientRequest?: PatchClientRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(clientId: string, detail?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client | OAuth2ClientDetail>;
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 全てのクライアントを取得する場合は、権限が必要です。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(all?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Client[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * Oauth2Api - factory interface
 * @export
 */
export declare const Oauth2ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(postClientRequest?: PostClientRequest, options?: any): AxiosPromise<OAuth2ClientDetail>;
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClient(clientId: string, patchClientRequest?: PatchClientRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(clientId: string, detail?: boolean, options?: any): AxiosPromise<OAuth2Client | OAuth2ClientDetail>;
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 全てのクライアントを取得する場合は、権限が必要です。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(all?: boolean, options?: any): AxiosPromise<OAuth2Client[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyTokens(options?: any): AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void>;
};
/**
 * Oauth2Api - object-oriented interface
 * @export
 * @class Oauth2Api
 * @extends {BaseAPI}
 */
export declare class Oauth2Api extends BaseAPI {
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    createClient(postClientRequest?: PostClientRequest, options?: any): AxiosPromise<OAuth2ClientDetail>;
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    deleteClient(clientId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    editClient(clientId: string, patchClientRequest?: PatchClientRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    getClient(clientId: string, detail?: boolean, options?: any): AxiosPromise<OAuth2Client | OAuth2ClientDetail>;
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 全てのクライアントを取得する場合は、権限が必要です。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    getClients(all?: boolean, options?: any): AxiosPromise<OAuth2Client[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    getMyTokens(options?: any): AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void>;
}
/**
 * PinApi - axios parameter creator
 * @export
 */
export declare const PinApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): RequestArgs;
};
/**
 * PinApi - functional programming interface
 * @export
 */
export declare const PinApiFp: (configuration?: Configuration) => {
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * PinApi - factory interface
 * @export
 */
export declare const PinApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removePin(messageId: string, options?: any): AxiosPromise<void>;
};
/**
 * PinApi - object-oriented interface
 * @export
 * @class PinApi
 * @extends {BaseAPI}
 */
export declare class PinApi extends BaseAPI {
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    removePin(messageId: string, options?: any): AxiosPromise<void>;
}
/**
 * PublicApi - axios parameter creator
 * @export
 */
export declare const PublicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} username ユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicUserIcon(username: string, options?: any): RequestArgs;
    /**
     *
     * @summary バージョンを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerVersion(options?: any): RequestArgs;
};
/**
 * PublicApi - functional programming interface
 * @export
 */
export declare const PublicApiFp: (configuration?: Configuration) => {
    /**
     * ユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} username ユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicUserIcon(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary バージョンを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerVersion(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>;
};
/**
 * PublicApi - factory interface
 * @export
 */
export declare const PublicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} username ユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicUserIcon(username: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary バージョンを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getServerVersion(options?: any): AxiosPromise<InlineResponse200>;
};
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export declare class PublicApi extends BaseAPI {
    /**
     * ユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} username ユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getPublicUserIcon(username: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary バージョンを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getServerVersion(options?: any): AxiosPromise<InlineResponse200>;
}
/**
 * StampApi - axios parameter creator
 * @export
 */
export declare const StampApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): RequestArgs;
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStampImage(stampId: string, file: any, options?: any): RequestArgs;
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: any, options?: any): RequestArgs;
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStampPalette(postStampPaletteRequest?: PostStampPaletteRequest, options?: any): RequestArgs;
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampId: string, options?: any): RequestArgs;
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStampPalette(paletteId: string, options?: any): RequestArgs;
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(stampId: string, patchStampRequest?: PatchStampRequest, options?: any): RequestArgs;
    /**
     * 指定したスタンプパレットの情報を変更します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレット情報を変更
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPalette(paletteId: string, patchStampPaletteRequest?: PatchStampPaletteRequest, options?: any): RequestArgs;
    /**
     * 指定したスタンプパレットのスタンプを編集します。 対象のスタンプパレットの管理権限が必要です。
     * @summary パレット内のスタンプを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPaletteStamps(paletteId: string, requestBody?: string[], options?: any): RequestArgs;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageId: string, options?: any): RequestArgs;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(limit?: number, options?: any): RequestArgs;
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampId: string, options?: any): RequestArgs;
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampImage(stampId: string, options?: any): RequestArgs;
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalette(paletteId: string, options?: any): RequestArgs;
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalettes(options?: any): RequestArgs;
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(includeUnicode?: boolean, options?: any): RequestArgs;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): RequestArgs;
};
/**
 * StampApi - functional programming interface
 * @export
 */
export declare const StampApiFp: (configuration?: Configuration) => {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStampImage(stampId: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>;
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStampPalette(postStampPaletteRequest?: PostStampPaletteRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampPalette>;
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStampPalette(paletteId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(stampId: string, patchStampRequest?: PatchStampRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したスタンプパレットの情報を変更します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレット情報を変更
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPalette(paletteId: string, patchStampPaletteRequest?: PatchStampPaletteRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したスタンプパレットのスタンプを編集します。 対象のスタンプパレットの管理権限が必要です。
     * @summary パレット内のスタンプを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPaletteStamps(paletteId: string, requestBody?: string[], options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageStamp[]>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(limit?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampHistoryEntry[]>;
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>;
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampImage(stampId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalette(paletteId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampPalette>;
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalettes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampPalette[]>;
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(includeUnicode?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * StampApi - factory interface
 * @export
 */
export declare const StampApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeStampImage(stampId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStampPalette(postStampPaletteRequest?: PostStampPaletteRequest, options?: any): AxiosPromise<StampPalette>;
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStampPalette(paletteId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(stampId: string, patchStampRequest?: PatchStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットの情報を変更します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレット情報を変更
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPalette(paletteId: string, patchStampPaletteRequest?: PatchStampPaletteRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットのスタンプを編集します。 対象のスタンプパレットの管理権限が必要です。
     * @summary パレット内のスタンプを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStampPaletteStamps(paletteId: string, requestBody?: string[], options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageId: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStampHistory(limit?: number, options?: any): AxiosPromise<StampHistoryEntry[]>;
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampId: string, options?: any): AxiosPromise<Stamp>;
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampImage(stampId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalette(paletteId: string, options?: any): AxiosPromise<StampPalette>;
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampPalettes(options?: any): AxiosPromise<StampPalette[]>;
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(includeUnicode?: boolean, options?: any): AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): AxiosPromise<void>;
};
/**
 * StampApi - object-oriented interface
 * @export
 * @class StampApi
 * @extends {BaseAPI}
 */
export declare class StampApi extends BaseAPI {
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    changeStampImage(stampId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    createStamp(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    createStampPalette(postStampPaletteRequest?: PostStampPaletteRequest, options?: any): AxiosPromise<StampPalette>;
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    deleteStamp(stampId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    deleteStampPalette(paletteId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStamp(stampId: string, patchStampRequest?: PatchStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットの情報を変更します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレット情報を変更
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStampPalette(paletteId: string, patchStampPaletteRequest?: PatchStampPaletteRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットのスタンプを編集します。 対象のスタンプパレットの管理権限が必要です。
     * @summary パレット内のスタンプを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStampPaletteStamps(paletteId: string, requestBody?: Array<string>, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getMessageStamps(messageId: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getMyStampHistory(limit?: number, options?: any): AxiosPromise<StampHistoryEntry[]>;
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamp(stampId: string, options?: any): AxiosPromise<Stamp>;
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampImage(stampId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampPalette(paletteId: string, options?: any): AxiosPromise<StampPalette>;
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampPalettes(options?: any): AxiosPromise<StampPalette[]>;
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamps(includeUnicode?: boolean, options?: any): AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): AxiosPromise<void>;
}
/**
 * StarApi - axios parameter creator
 * @export
 */
export declare const StarApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): RequestArgs;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): RequestArgs;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): RequestArgs;
};
/**
 * StarApi - functional programming interface
 * @export
 */
export declare const StarApiFp: (configuration?: Configuration) => {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * StarApi - factory interface
 * @export
 */
export declare const StarApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): AxiosPromise<void>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyStars(options?: any): AxiosPromise<string[]>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyStar(channelId: string, options?: any): AxiosPromise<void>;
};
/**
 * StarApi - object-oriented interface
 * @export
 * @class StarApi
 * @extends {BaseAPI}
 */
export declare class StarApi extends BaseAPI {
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): AxiosPromise<void>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    getMyStars(options?: any): AxiosPromise<string[]>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    removeMyStar(channelId: string, options?: any): AxiosPromise<void>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserIcon(userId: string, file: any, options?: any): RequestArgs;
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword(userId: string, putUserPasswordRequest?: PutUserPasswordRequest, options?: any): RequestArgs;
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(postUserRequest?: PostUserRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser(userId: string, patchUserRequest?: PatchUserRequest, options?: any): RequestArgs;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: any): RequestArgs;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userId: string, options?: any): RequestArgs;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): RequestArgs;
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(includeSuspended?: boolean, options?: any): RequestArgs;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): RequestArgs;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(userId: string, tagId: string, options?: any): RequestArgs;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>;
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserIcon(userId: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword(userId: string, putUserPasswordRequest?: PutUserPasswordRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(postUserRequest?: PostUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser(userId: string, patchUserRequest?: PatchUserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag[]>;
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(includeSuspended?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User[]>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(userId: string, tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserIcon(userId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeUserPassword(userId: string, putUserPasswordRequest?: PutUserPasswordRequest, options?: any): AxiosPromise<void>;
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(postUserRequest?: PostUserRequest, options?: any): AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUser(userId: string, patchUserRequest?: PatchUserRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): AxiosPromise<UserTag[]>;
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(includeSuspended?: boolean, options?: any): AxiosPromise<User[]>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(userId: string, tagId: string, options?: any): AxiosPromise<void>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeUserIcon(userId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeUserPassword(userId: string, putUserPasswordRequest?: PutUserPasswordRequest, options?: any): AxiosPromise<void>;
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createUser(postUserRequest?: PostUserRequest, options?: any): AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    editUser(userId: string, patchUserRequest?: PatchUserRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(userId: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserIcon(userId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserTags(userId: string, options?: any): AxiosPromise<UserTag[]>;
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUsers(includeSuspended?: boolean, options?: any): AxiosPromise<User[]>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    removeUserTag(userId: string, tagId: string, options?: any): AxiosPromise<void>;
}
/**
 * UserTagApi - axios parameter creator
 * @export
 */
export declare const UserTagApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): RequestArgs;
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): RequestArgs;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): RequestArgs;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): RequestArgs;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): RequestArgs;
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagId: string, options?: any): RequestArgs;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): RequestArgs;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): RequestArgs;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(userId: string, tagId: string, options?: any): RequestArgs;
};
/**
 * UserTagApi - functional programming interface
 * @export
 */
export declare const UserTagApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>;
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag[]>;
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTag[]>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(userId: string, tagId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * UserTagApi - factory interface
 * @export
 */
export declare const UserTagApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyUserTags(options?: any): AxiosPromise<UserTag[]>;
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagId: string, options?: any): AxiosPromise<Tag>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userId: string, options?: any): AxiosPromise<UserTag[]>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeUserTag(userId: string, tagId: string, options?: any): AxiosPromise<void>;
};
/**
 * UserTagApi - object-oriented interface
 * @export
 * @class UserTagApi
 * @extends {BaseAPI}
 */
export declare class UserTagApi extends BaseAPI {
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getMyUserTags(options?: any): AxiosPromise<UserTag[]>;
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getTag(tagId: string, options?: any): AxiosPromise<Tag>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getUserTags(userId: string, options?: any): AxiosPromise<UserTag[]>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    removeUserTag(userId: string, tagId: string, options?: any): AxiosPromise<void>;
}
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export declare const WebhookApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Webhookのアイコンを変更します
     * @param {string} webhookId WebhookUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(webhookId: string, file: any, options?: any): RequestArgs;
    /**
     *
     * @summary Webhookを作成します
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook(postWebhookRequest?: PostWebhookRequest, options?: any): RequestArgs;
    /**
     *
     * @summary Webhookを削除します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Webhook情報を変更します
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(webhookId: string, patchWebhookRequest?: PatchWebhookRequest, options?: any): RequestArgs;
    /**
     *
     * @summary Webhook情報を取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Webhookのアイコンを取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookId: string, options?: any): RequestArgs;
    /**
     *
     * @summary Webhookが投稿したメッセージのリストを取得します
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookMessages(webhookId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(all?: boolean, options?: any): RequestArgs;
    /**
     *
     * @summary Webhookを送信します
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookId: string, xTRAQSignature?: string, xTRAQChannelId?: string, embed?: number, body?: string, options?: any): RequestArgs;
};
/**
 * WebhookApi - functional programming interface
 * @export
 */
export declare const WebhookApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Webhookのアイコンを変更します
     * @param {string} webhookId WebhookUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(webhookId: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary Webhookを作成します
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook(postWebhookRequest?: PostWebhookRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookを削除します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
    /**
     *
     * @summary Webhook情報を変更します
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(webhookId: string, patchWebhookRequest?: PatchWebhookRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhook情報を取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookのアイコンを取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     *
     * @summary Webhookが投稿したメッセージのリストを取得します
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookMessages(webhookId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(all?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook[]>;
    /**
     *
     * @summary Webhookを送信します
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookId: string, xTRAQSignature?: string, xTRAQChannelId?: string, embed?: number, body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>;
};
/**
 * WebhookApi - factory interface
 * @export
 */
export declare const WebhookApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Webhookのアイコンを変更します
     * @param {string} webhookId WebhookUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(webhookId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Webhookを作成します
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhook(postWebhookRequest?: PostWebhookRequest, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookを削除します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Webhook情報を変更します
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(webhookId: string, patchWebhookRequest?: PatchWebhookRequest, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhook情報を取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookId: string, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookのアイコンを取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookId: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Webhookが投稿したメッセージのリストを取得します
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookMessages(webhookId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(all?: boolean, options?: any): AxiosPromise<Webhook[]>;
    /**
     *
     * @summary Webhookを送信します
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookId: string, xTRAQSignature?: string, xTRAQChannelId?: string, embed?: number, body?: string, options?: any): AxiosPromise<void>;
};
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export declare class WebhookApi extends BaseAPI {
    /**
     *
     * @summary Webhookのアイコンを変更します
     * @param {string} webhookId WebhookUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    changeWebhookIcon(webhookId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Webhookを作成します
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    createWebhook(postWebhookRequest?: PostWebhookRequest, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookを削除します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    deleteWebhook(webhookId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Webhook情報を変更します
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    editWebhook(webhookId: string, patchWebhookRequest?: PatchWebhookRequest, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhook情報を取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhook(webhookId: string, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookのアイコンを取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhookIcon(webhookId: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Webhookが投稿したメッセージのリストを取得します
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhookMessages(webhookId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhooks(all?: boolean, options?: any): AxiosPromise<Webhook[]>;
    /**
     *
     * @summary Webhookを送信します
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    postWebhook(webhookId: string, xTRAQSignature?: string, xTRAQChannelId?: string, embed?: number, body?: string, options?: any): AxiosPromise<void>;
}
/**
 * WebrtcApi - axios parameter creator
 * @export
 */
export declare const WebrtcApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary WebRTC状態を取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebRTCState(options?: any): RequestArgs;
    /**
     *
     * @summary Skyway用認証API
     * @param {PostWebRTCAuthenticateRequest} [postWebRTCAuthenticateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebRTCAuthenticate(postWebRTCAuthenticateRequest?: PostWebRTCAuthenticateRequest, options?: any): RequestArgs;
};
/**
 * WebrtcApi - functional programming interface
 * @export
 */
export declare const WebrtcApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary WebRTC状態を取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebRTCState(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebRTCUserState[]>;
    /**
     *
     * @summary Skyway用認証API
     * @param {PostWebRTCAuthenticateRequest} [postWebRTCAuthenticateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebRTCAuthenticate(postWebRTCAuthenticateRequest?: PostWebRTCAuthenticateRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebRTCAuthenticateResult>;
};
/**
 * WebrtcApi - factory interface
 * @export
 */
export declare const WebrtcApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary WebRTC状態を取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebRTCState(options?: any): AxiosPromise<WebRTCUserState[]>;
    /**
     *
     * @summary Skyway用認証API
     * @param {PostWebRTCAuthenticateRequest} [postWebRTCAuthenticateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebRTCAuthenticate(postWebRTCAuthenticateRequest?: PostWebRTCAuthenticateRequest, options?: any): AxiosPromise<WebRTCAuthenticateResult>;
};
/**
 * WebrtcApi - object-oriented interface
 * @export
 * @class WebrtcApi
 * @extends {BaseAPI}
 */
export declare class WebrtcApi extends BaseAPI {
    /**
     *
     * @summary WebRTC状態を取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    getWebRTCState(options?: any): AxiosPromise<WebRTCUserState[]>;
    /**
     *
     * @summary Skyway用認証API
     * @param {PostWebRTCAuthenticateRequest} [postWebRTCAuthenticateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    postWebRTCAuthenticate(postWebRTCAuthenticateRequest?: PostWebRTCAuthenticateRequest, options?: any): AxiosPromise<WebRTCAuthenticateResult>;
}
export declare class Apis extends BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @summary アクテビティタイムラインを取得
     * @param {number} [limit] 取得する件数
     * @param {boolean} [subscribeOnly] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    getActivityTimeline(limit?: number, subscribeOnly?: boolean, options?: any): AxiosPromise<Message[]>;
    /**
     * 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
     * @summary オンラインユーザーリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    getOnlineUsers(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary 自分のログインセッションリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMySessions(options?: any): AxiosPromise<LoginSession[]>;
    /**
     * ログインします。
     * @summary ログイン
     * @param {string} [redirect] リダイレクト先
     * @param {PostLoginRequest} [postLoginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(redirect?: string, postLoginRequest?: PostLoginRequest, options?: any): AxiosPromise<void>;
    /**
     * ログアウトします。
     * @summary ログアウト
     * @param {string} [redirect] リダイレクト先
     * @param {boolean} [all] 全てのセッションでログアウトするかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logout(redirect?: string, all?: boolean, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary セッションを無効化します
     * @param {string} sessionId セッションUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    revokeMySession(sessionId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
     * @summary BOTをアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    activateBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
     * @summary BOTのアイコン画像を変更
     * @param {string} botId BOTUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotIcon(botId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * BOTを作成します。 作成後にアクティベーション・購読イベントの設定を行う必要があります。
     * @summary BOTを作成
     * @param {PostBotRequest} [postBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    createBot(postBotRequest?: PostBotRequest, options?: any): AxiosPromise<BotDetail>;
    /**
     * 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
     * @summary BOTを削除
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    deleteBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
     * @summary BOT情報を変更
     * @param {string} botId BOTUUID
     * @param {PatchBotRequest} [patchBotRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    editBot(botId: string, patchBotRequest?: PatchBotRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
     * @summary BOT情報を取得
     * @param {string} botId BOTUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBot(botId: string, detail?: boolean, options?: any): AxiosPromise<Bot | BotDetail>;
    /**
     * 指定したBOTのアイコン画像を取得を取得します。
     * @summary BOTのアイコン画像を取得
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotIcon(botId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
     * @summary BOTのイベントログを取得
     * @param {string} botId BOTUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotLogs(botId: string, limit?: number, offset?: number, options?: any): AxiosPromise<BotEventLog[]>;
    /**
     * BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
     * @summary BOTリストを取得
     * @param {boolean} [all] 全てのBOTを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBots(all?: boolean, options?: any): AxiosPromise<Bot[]>;
    /**
     * 指定したチャンネルに参加しているBOTのリストを取得します。
     * @summary チャンネル参加中のBOTのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelBots(channelId: string, options?: any): AxiosPromise<BotUser[]>;
    /**
     * 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
     * @summary BOTをインアクティベート
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    inactivateBot(botId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルに参加させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionJoinRequest} [postBotActionJoinRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    letBotJoinChannel(botId: string, postBotActionJoinRequest?: PostBotActionJoinRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
     * @summary BOTをチャンネルから退出させる
     * @param {string} botId BOTUUID
     * @param {PostBotActionLeaveRequest} [postBotActionLeaveRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    letBotLeaveChannel(botId: string, postBotActionLeaveRequest?: PostBotActionLeaveRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
     * @summary BOTのトークンを再発行
     * @param {string} botId BOTUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    reissueBot(botId: string, options?: any): AxiosPromise<BotTokens>;
    /**
     * チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
     * @summary チャンネルを作成
     * @param {PostChannelRequest} [postChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    createChannel(postChannelRequest?: PostChannelRequest, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
     * @summary チャンネル情報を変更
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelRequest} [patchChannelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannel(channelId: string, patchChannelRequest?: PatchChannelRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
     * @summary チャンネルの通知購読者を編集
     * @param {string} channelId チャンネルUUID
     * @param {PatchChannelSubscribersRequest} [patchChannelSubscribersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    editChannelSubscribers(channelId: string, patchChannelSubscribersRequest?: PatchChannelSubscribersRequest, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを編集します。
     * @summary チャンネルトピックを編集
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelTopicRequest} [putChannelTopicRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannelTopic(channelId: string, putChannelTopicRequest?: PutChannelTopicRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルの情報を取得します。
     * @summary チャンネル情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannel(channelId: string, options?: any): AxiosPromise<Channel>;
    /**
     * 指定したチャンネルのイベントリストを取得します。
     * @summary チャンネルイベントのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelEvents(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<ChannelEvent[]>;
    /**
     * 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
     * @summary チャンネルピンのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getChannelPins(channelId: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * 指定したチャンネルの統計情報を取得します。
     * @summary チャンネル統計情報を取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelStats(channelId: string, options?: any): AxiosPromise<ChannelStats>;
    /**
     * 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
     * @summary チャンネルの通知購読者のリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getChannelSubscribers(channelId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルのトピックを取得します。
     * @summary チャンネルトピックを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelTopic(channelId: string, options?: any): AxiosPromise<ChannelTopic>;
    /**
     * 指定したチャンネルの閲覧者のリストを取得します。
     * @summary チャンネル閲覧者リストを取得
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelViewers(channelId: string, options?: any): AxiosPromise<ChannelViewer[]>;
    /**
     * チャンネルのリストを取得します。
     * @summary チャンネルリストを取得
     * @param {boolean} [includeDm] ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannels(includeDm?: boolean, options?: any): AxiosPromise<ChannelList>;
    /**
     * 指定したチャンネルのメッセージのリストを取得します。
     * @summary チャンネルメッセージのリストを取得
     * @param {string} channelId チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessages(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。
     * @summary チャンネルにメッセージを投稿
     * @param {string} channelId チャンネルUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postMessage(channelId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの購読状態はオフになります。
     * @summary チャンネルの通知購読者を設定
     * @param {string} channelId チャンネルUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    setChannelSubscribers(channelId: string, requestBody?: Array<string>, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージを指定したクリップフォルダに追加します。
     * @summary メッセージをクリップフォルダに追加
     * @param {string} folderId クリップフォルダUUID
     * @param {PostClipFolderMessageRequest} [postClipFolderMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    clipMessage(folderId: string, postClipFolderMessageRequest?: PostClipFolderMessageRequest, options?: any): AxiosPromise<ClippedMessage>;
    /**
     * クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
     * @summary クリップフォルダを作成
     * @param {PostClipFolderRequest} [postClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    createClipFolder(postClipFolderRequest?: PostClipFolderRequest, options?: any): AxiosPromise<ClipFolder>;
    /**
     * 指定したクリップフォルダを削除します。
     * @summary クリップフォルダを削除
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    deleteClipFolder(folderId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を編集します。
     * @summary クリップフォルダ情報を編集
     * @param {string} folderId クリップフォルダUUID
     * @param {PatchClipFolderRequest} [patchClipFolderRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    editClipFolder(folderId: string, patchClipFolderRequest?: PatchClipFolderRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したクリップフォルダの情報を取得します。
     * @summary クリップフォルダ情報を取得
     * @param {string} folderId クリップフォルダUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolder(folderId: string, options?: any): AxiosPromise<ClipFolder>;
    /**
     * 自身が所有するクリップフォルダのリストを取得します。
     * @summary クリップフォルダのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolders(options?: any): AxiosPromise<ClipFolder[]>;
    /**
     * 指定したフォルダ内のクリップのリストを取得します。
     * @summary フォルダ内のクリップのリストを取得
     * @param {string} folderId クリップフォルダUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClips(folderId: string, limit?: number, offset?: number, options?: any): AxiosPromise<ClippedMessage[]>;
    /**
     * 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
     * @summary メッセージをクリップフォルダから除外
     * @param {string} folderId クリップフォルダUUID
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    unclipMessage(folderId: string, messageId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
     * @summary ファイルを削除
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    deleteFile(fileId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルをダウンロード
     * @param {string} fileId ファイルUUID
     * @param {number} [dl] 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFile(fileId: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary ファイルメタを取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFileMeta(fileId: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したクエリでファイルメタのリストを取得します。
     * @summary ファイルメタのリストを取得
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {string} [mime] MIMEタイプ
     * @param {string} [uploaderId] アップロード者UUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFiles(channelId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', mime?: string, uploaderId?: string, options?: any): AxiosPromise<FileInfo[]>;
    /**
     * 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
     * @summary サムネイル画像を取得
     * @param {string} fileId ファイルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getThumbnailImage(fileId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したチャンネルにファイルをアップロードします。
     * @summary ファイルをアップロード
     * @param {any} file ファイル本体
     * @param {string} channelId アップロード先チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    postFile(file: any, channelId: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループ管理者を追加
     * @param {string} groupId ユーザーグループUUID
     * @param {PostUserGroupAdminRequest} [postUserGroupAdminRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    addUserGroupAdmin(groupId: string, postUserGroupAdminRequest?: PostUserGroupAdminRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
     * @summary グループメンバーを追加
     * @param {string} groupId ユーザーグループUUID
     * @param {UserGroupMember} [userGroupMember]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    addUserGroupMember(groupId: string, userGroupMember?: UserGroupMember, options?: any): AxiosPromise<void>;
    /**
     * ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
     * @summary ユーザーグループを作成
     * @param {PostUserGroupRequest} [postUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    createUserGroup(postUserGroupRequest?: PostUserGroupRequest, options?: any): AxiosPromise<UserGroup>;
    /**
     * 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを削除
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    deleteUserGroup(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {PatchUserGroupRequest} [patchUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    editUserGroup(groupId: string, patchUserGroupRequest?: PatchUserGroupRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループメンバーを編集
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {PatchGroupMemberRequest} [patchGroupMemberRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    editUserGroupMember(groupId: string, userId: string, patchGroupMemberRequest?: PatchGroupMemberRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループの情報を取得します。
     * @summary ユーザーグループを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroup(groupId: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * 指定したグループの管理者のリストを取得します。
     * @summary グループ管理者を取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroupAdmins(groupId: string, options?: any): AxiosPromise<string[]>;
    /**
     * 指定したグループのメンバーのリストを取得します。
     * @summary グループメンバーを取得
     * @param {string} groupId ユーザーグループUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroupMembers(groupId: string, options?: any): AxiosPromise<UserGroupMember[]>;
    /**
     * ユーザーグループのリストを取得します。
     * @summary ユーザーグループのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    getUserGroups(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
     * @summary グループ管理者を削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    removeUserGroupAdmin(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーグループから指定したユーザーを削除します。 対象のユーザーグループの管理者権限が必要です。
     * @summary ユーザーグループから削除
     * @param {string} groupId ユーザーグループUUID
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    removeUserGroupMember(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したチャンネルをスターチャンネルに追加します。 不正なチャンネルIDを指定した場合、400を返します。
     * @summary チャンネルをスターに追加
     * @param {PostStarRequest} [postStarRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    addMyStar(postStarRequest?: PostStarRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分にタグを追加します
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    addMyUserTag(postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 自分のアイコン画像を変更します。
     * @summary 自分のアイコン画像を変更
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    changeMyIcon(file: any, options?: any): AxiosPromise<void>;
    /**
     * 自身のパスワードを変更します。
     * @summary 自分のパスワードを変更
     * @param {PutMyPasswordRequest} [putMyPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    changeMyPassword(putMyPasswordRequest?: PutMyPasswordRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身のユーザー情報を変更します。
     * @summary 自分のユーザー情報を変更
     * @param {PatchMeRequest} [patchMeRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    editMe(patchMeRequest?: PatchMeRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary 自分のタグを編集します
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    editMyUserTag(tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     * 自身のユーザー詳細情報を取得します。
     * @summary 自分のユーザー詳細を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMe(options?: any): AxiosPromise<MyUserDetail>;
    /**
     * 自身のチャンネル購読状態を取得します。
     * @summary 自分のチャンネル購読状態を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getMyChannelSubscriptions(options?: any): AxiosPromise<UserSubscribeState[]>;
    /**
     * 自分のアイコン画像を取得します。
     * @summary 自分のアイコン画像を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyIcon(options?: any): AxiosPromise<any>;
    /**
     * 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
     * @summary QRコードを取得
     * @param {boolean} [token] 画像でなくトークン文字列で返すかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeApi
     */
    getMyQRCode(token?: boolean, options?: any): AxiosPromise<any>;
    /**
     * 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
     * @summary スタンプ履歴を取得
     * @param {number} [limit] 件数
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getMyStampHistory(limit?: number, options?: any): AxiosPromise<StampHistoryEntry[]>;
    /**
     * 自分がスターしているチャンネルのUUIDの配列を取得します。
     * @summary スターチャンネルリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    getMyStars(options?: any): AxiosPromise<string[]>;
    /**
     *
     * @summary 有効なOAuth2トークンのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    getMyTokens(options?: any): AxiosPromise<ActiveOAuth2Token[]>;
    /**
     *
     * @summary 未読チャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getMyUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     *
     * @summary 自分のタグリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getMyUserTags(options?: any): AxiosPromise<UserTag[]>;
    /**
     *
     * @summary 未読チャンネルを既読にします
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    readChannel(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身のFCMデバイスを登録します。
     * @summary FCMデバイスを登録
     * @param {PostMyFCMDeviceRequest} [postMyFCMDeviceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    registerFCMDevice(postMyFCMDeviceRequest?: PostMyFCMDeviceRequest, options?: any): AxiosPromise<void>;
    /**
     * 既にスターから削除されているチャンネルを指定した場合は204を返します。
     * @summary チャンネルをスターから削除します
     * @param {string} channelId チャンネルUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    removeMyStar(channelId: string, options?: any): AxiosPromise<void>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary 自分からタグを削除します
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    removeMyUserTag(tagId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary トークンの認可を取り消します
     * @param {string} tokenId OAuth2トークンUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    revokeMyToken(tokenId: string, options?: any): AxiosPromise<void>;
    /**
     * 自身の指定したチャンネルの購読レベルを設定します。
     * @summary チャンネル購読レベルを設定
     * @param {string} channelId チャンネルUUID
     * @param {PutChannelSubscribeLevelRequest} [putChannelSubscribeLevelRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    setChannelSubscribeLevel(channelId: string, putChannelSubscribeLevelRequest?: PutChannelSubscribeLevelRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @summary スタンプを押す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {PostMessageStampRequest} [postMessageStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    addMessageStamp(messageId: string, stampId: string, postMessageStampRequest?: PostMessageStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージをピン留めします。
     * @summary ピン留めする
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    createPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したメッセージを削除します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ削除することができます。
     * @summary メッセージを削除
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    deleteMessage(messageId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージを編集します。 自身が投稿したメッセージと自身が管理権限を持つWebhookとBOTが投稿したメッセージのみ編集することができます。
     * @summary メッセージを編集
     * @param {string} messageId メッセージUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    editMessage(messageId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したユーザーとのダイレクトメッセージのリストを取得します。
     * @summary ダイレクトメッセージのリストを取得
     * @param {string} userId ユーザーUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getDirectMessages(userId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @summary メッセージを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessage(messageId: string, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージに押されているスタンプのリストを取得します。
     * @summary メッセージのスタンプリストを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getMessageStamps(messageId: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * 指定したメッセージのピン留め情報を取得します。
     * @summary ピン留めを取得
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getPin(messageId: string, options?: any): AxiosPromise<MessagePin>;
    /**
     * 指定したユーザーにダイレクトメッセージを送信します。
     * @summary ダイレクトメッセージを送信
     * @param {string} userId ユーザーUUID
     * @param {PostMessageRequest} [postMessageRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postDirectMessage(userId: string, postMessageRequest?: PostMessageRequest, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージから指定した自身が押したスタンプを削除します。
     * @summary スタンプを消す
     * @param {string} messageId メッセージUUID
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    removeMessageStamp(messageId: string, stampId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したメッセージのピン留めを外します。
     * @summary ピン留めを外す
     * @param {string} messageId メッセージUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    removePin(messageId: string, options?: any): AxiosPromise<void>;
    /**
     * # WebSocketプロトコル ## 送信 `コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。 ### `viewstate`コマンド このWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。 現時点では1つのセッションに対して1つのチャンネルしか設定できない。  `viewstate:(チャンネルID):(閲覧状態)` + チャンネルID: 対象のチャンネルID + 閲覧状態: `none`, `monitoring`, `editing`  最初の`viewstate`コマンドを送る前、または`viewstate:null`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。  ## 受信 SSEのイベントと同じものがTextMessageとして非同期に送られてくる。 `type`と`body`を持つJSONを受信。`type`はSSEのイベントタイプと同じ、`body`はSSEのデータと同じ。 例:  ```json {\"type\":\"USER_ONLINE\",\"body\":{\"id\":\"7dd8e07f-7f5d-4331-9176-b56a4299768b\"}} ```
     * @summary WebSocket通知ストリームに接続します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    ws(options?: any): AxiosPromise<void>;
    /**
     * OAuth2クライアントを作成します。
     * @summary OAuth2クライアントを作成
     * @param {PostClientRequest} [postClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    createClient(postClientRequest?: PostClientRequest, options?: any): AxiosPromise<OAuth2ClientDetail>;
    /**
     * 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
     * @summary OAuth2クライアントを削除
     * @param {string} clientId OAuth2クライアントUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    deleteClient(clientId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
     * @summary OAuth2クライアント情報を変更
     * @param {string} clientId OAuth2クライアントUUID
     * @param {PatchClientRequest} [patchClientRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    editClient(clientId: string, patchClientRequest?: PatchClientRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
     * @summary OAuth2クライアント情報を取得
     * @param {string} clientId OAuth2クライアントUUID
     * @param {boolean} [detail] 詳細情報を含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    getClient(clientId: string, detail?: boolean, options?: any): AxiosPromise<OAuth2Client | OAuth2ClientDetail>;
    /**
     * 自身が開発者のOAuth2クライアントのリストを取得します。 全てのクライアントを取得する場合は、権限が必要です。
     * @summary OAuth2クライアントのリストを取得
     * @param {boolean} [all] 全てのクライアントを取得するかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Oauth2Api
     */
    getClients(all?: boolean, options?: any): AxiosPromise<OAuth2Client[]>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} username ユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getPublicUserIcon(username: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary バージョンを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getServerVersion(options?: any): AxiosPromise<InlineResponse200>;
    /**
     * 指定したスタンプの画像を変更します。
     * @summary スタンプ画像を変更
     * @param {string} stampId スタンプUUID
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    changeStampImage(stampId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * スタンプを新規作成します。
     * @summary スタンプを作成
     * @param {string} name スタンプ名
     * @param {any} file スタンプ画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    createStamp(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプパレットを作成します。
     * @summary スタンプパレットを作成
     * @param {PostStampPaletteRequest} [postStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    createStampPalette(postStampPaletteRequest?: PostStampPaletteRequest, options?: any): AxiosPromise<StampPalette>;
    /**
     * 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
     * @summary スタンプを削除
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    deleteStamp(stampId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレットを削除
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    deleteStampPalette(paletteId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプの情報を変更します。
     * @summary スタンプ情報を変更
     * @param {string} stampId スタンプUUID
     * @param {PatchStampRequest} [patchStampRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStamp(stampId: string, patchStampRequest?: PatchStampRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットの情報を変更します。 対象のスタンプパレットの管理権限が必要です。
     * @summary スタンプパレット情報を変更
     * @param {string} paletteId スタンプパレットUUID
     * @param {PatchStampPaletteRequest} [patchStampPaletteRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStampPalette(paletteId: string, patchStampPaletteRequest?: PatchStampPaletteRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプパレットのスタンプを編集します。 対象のスタンプパレットの管理権限が必要です。
     * @summary パレット内のスタンプを編集
     * @param {string} paletteId スタンプパレットUUID
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStampPaletteStamps(paletteId: string, requestBody?: Array<string>, options?: any): AxiosPromise<void>;
    /**
     * 指定したスタンプの情報を取得します。
     * @summary スタンプ情報を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamp(stampId: string, options?: any): AxiosPromise<Stamp>;
    /**
     * 指定したIDのスタンプ画像を返します。
     * @summary スタンプ画像を取得
     * @param {string} stampId スタンプUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampImage(stampId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したスタンプパレットの情報を取得します。
     * @summary スタンプパレットを取得
     * @param {string} paletteId スタンプパレットUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampPalette(paletteId: string, options?: any): AxiosPromise<StampPalette>;
    /**
     * 自身が所有しているスタンプパレットのリストを取得します。
     * @summary スタンプパレットのリストを取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampPalettes(options?: any): AxiosPromise<StampPalette[]>;
    /**
     * スタンプのリストを取得します。
     * @summary スタンプリストを取得
     * @param {boolean} [includeUnicode] Unicode絵文字を含ませるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamps(includeUnicode?: boolean, options?: any): AxiosPromise<Stamp[]>;
    /**
     * 指定したユーザーに指定したタグを追加します。
     * @summary ユーザーにタグを追加
     * @param {string} userId ユーザーUUID
     * @param {PostUserTagRequest} [postUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    addUserTag(userId: string, postUserTagRequest?: PostUserTagRequest, options?: any): AxiosPromise<UserTag>;
    /**
     * 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
     * @summary ユーザーのアイコン画像を変更します
     * @param {string} userId ユーザーUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeUserIcon(userId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
     * @summary ユーザーのパスワードを変更
     * @param {string} userId ユーザーUUID
     * @param {PutUserPasswordRequest} [putUserPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeUserPassword(userId: string, putUserPasswordRequest?: PutUserPasswordRequest, options?: any): AxiosPromise<void>;
    /**
     * ユーザーを登録します。 管理者権限が必要です。
     * @summary ユーザーを登録
     * @param {PostUserRequest} [postUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    createUser(postUserRequest?: PostUserRequest, options?: any): AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーの情報を変更します。 管理者権限が必要です。
     * @summary ユーザー情報を変更
     * @param {string} userId ユーザーUUID
     * @param {PatchUserRequest} [patchUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    editUser(userId: string, patchUserRequest?: PatchUserRequest, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary ユーザーのタグを編集します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {PatchUserTagRequest} [patchUserTagRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    editUserTag(userId: string, tagId: string, patchUserTagRequest?: PatchUserTagRequest, options?: any): AxiosPromise<void>;
    /**
     * 指定したユーザーの詳細情報を取得します。
     * @summary ユーザー詳細情報を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(userId: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @summary ユーザーのアイコン画像を取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserIcon(userId: string, options?: any): AxiosPromise<any>;
    /**
     * 指定したユーザーのタグリストを取得します。
     * @summary ユーザーのタグリストを取得
     * @param {string} userId ユーザーUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getUserTags(userId: string, options?: any): AxiosPromise<UserTag[]>;
    /**
     * ユーザーのリストを取得します。 `include-suspended`を指定しない場合、レスポンスに非アクティブユーザーは含まれません。
     * @summary ユーザーのリストを取得
     * @param {boolean} [includeSuspended] アカウントがアクティブでないユーザーを含めるかどうか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUsers(includeSuspended?: boolean, options?: any): AxiosPromise<User[]>;
    /**
     * 既に存在しないタグを削除しようとした場合は204を返します。
     * @summary ユーザーからタグを削除します
     * @param {string} userId ユーザーUUID
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    removeUserTag(userId: string, tagId: string, options?: any): AxiosPromise<void>;
    /**
     * 指定したタグの情報を取得します。
     * @summary タグ情報を取得
     * @param {string} tagId タグUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getTag(tagId: string, options?: any): AxiosPromise<Tag>;
    /**
     *
     * @summary Webhookのアイコンを変更します
     * @param {string} webhookId WebhookUUID
     * @param {any} file アイコン画像(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    changeWebhookIcon(webhookId: string, file: any, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Webhookを作成します
     * @param {PostWebhookRequest} [postWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    createWebhook(postWebhookRequest?: PostWebhookRequest, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookを削除します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    deleteWebhook(webhookId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Webhook情報を変更します
     * @param {string} webhookId WebhookUUID
     * @param {PatchWebhookRequest} [patchWebhookRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    editWebhook(webhookId: string, patchWebhookRequest?: PatchWebhookRequest, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhook情報を取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhook(webhookId: string, options?: any): AxiosPromise<Webhook>;
    /**
     *
     * @summary Webhookのアイコンを取得します
     * @param {string} webhookId WebhookUUID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhookIcon(webhookId: string, options?: any): AxiosPromise<any>;
    /**
     *
     * @summary Webhookが投稿したメッセージのリストを取得します
     * @param {string} webhookId WebhookUUID
     * @param {number} [limit] 取得する件数
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhookMessages(webhookId: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * Webhookのリストを取得します。 allがtrueで無い場合は、自分がオーナーのWebhookのリストを返します。
     * @summary Webhook情報のリストを取得します
     * @param {boolean} [all] 全てのWebhookを取得します。権限が必要です。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhooks(all?: boolean, options?: any): AxiosPromise<Webhook[]>;
    /**
     *
     * @summary Webhookを送信します
     * @param {string} webhookId WebhookUUID
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ(Secretが設定されている場合は必須)
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {number} [embed] メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    postWebhook(webhookId: string, xTRAQSignature?: string, xTRAQChannelId?: string, embed?: number, body?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary WebRTC状態を取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    getWebRTCState(options?: any): AxiosPromise<WebRTCUserState[]>;
    /**
     *
     * @summary Skyway用認証API
     * @param {PostWebRTCAuthenticateRequest} [postWebRTCAuthenticateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    postWebRTCAuthenticate(postWebRTCAuthenticateRequest?: PostWebRTCAuthenticateRequest, options?: any): AxiosPromise<WebRTCAuthenticateResult>;
}
