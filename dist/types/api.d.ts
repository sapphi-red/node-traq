/**
 * traQ API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.6.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference path="../../bin/generated/custom.d.ts" />
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AddUserGroup
 */
export interface AddUserGroup {
    /**
     * 追加するユーザーのID
     * @type {string}
     * @memberof AddUserGroup
     */
    userId: string;
}
/**
 *
 * @export
 * @interface AllowedClientInfo
 */
export interface AllowedClientInfo {
    /**
     * OAuth2アクセストークンUUID
     * @type {string}
     * @memberof AllowedClientInfo
     */
    tokenId?: string;
    /**
     * クライアントID
     * @type {string}
     * @memberof AllowedClientInfo
     */
    clientId?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof AllowedClientInfo
     */
    name?: string;
    /**
     * クライアント説明
     * @type {string}
     * @memberof AllowedClientInfo
     */
    description?: string;
    /**
     * クライアント作成者UUID
     * @type {string}
     * @memberof AllowedClientInfo
     */
    creatorId?: string;
    /**
     * 要求スコープの配列
     * @type {Array<ClientScope>}
     * @memberof AllowedClientInfo
     */
    scopes?: Array<ClientScope>;
    /**
     * 承認日時
     * @type {Date}
     * @memberof AllowedClientInfo
     */
    approvedAt?: Date;
}
/**
 *
 * @export
 * @interface Bot
 */
export interface Bot {
    /**
     * BOT UUID
     * @type {string}
     * @memberof Bot
     */
    botId?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof Bot
     */
    botUserId?: string;
    /**
     * BOT説明
     * @type {string}
     * @memberof Bot
     */
    description?: string;
    /**
     * BOTが購読しているイベントの配列
     * @type {Array<string>}
     * @memberof Bot
     */
    subscribeEvents?: Array<string>;
    /**
     * BOT状態
     * @type {number}
     * @memberof Bot
     */
    state?: number;
    /**
     * BOT作成者UUID
     * @type {string}
     * @memberof Bot
     */
    creatorId?: string;
    /**
     * BOT作成日時
     * @type {Date}
     * @memberof Bot
     */
    createdAt?: Date;
    /**
     * BOT更新日時
     * @type {Date}
     * @memberof Bot
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface BotDetail
 */
export interface BotDetail {
    /**
     * BOT UUID
     * @type {string}
     * @memberof BotDetail
     */
    botId?: string;
    /**
     * BOTユーザーUUID
     * @type {string}
     * @memberof BotDetail
     */
    botUserId?: string;
    /**
     * BOT説明
     * @type {string}
     * @memberof BotDetail
     */
    description?: string;
    /**
     * BOTが購読しているイベントの配列
     * @type {Array<string>}
     * @memberof BotDetail
     */
    subscribeEvents?: Array<string>;
    /**
     * BOT状態
     * @type {number}
     * @memberof BotDetail
     */
    state?: number;
    /**
     * BOT作成者UUID
     * @type {string}
     * @memberof BotDetail
     */
    creatorId?: string;
    /**
     * BOT作成日時
     * @type {Date}
     * @memberof BotDetail
     */
    createdAt?: Date;
    /**
     * BOT更新日時
     * @type {Date}
     * @memberof BotDetail
     */
    updatedAt?: Date;
    /**
     * BOT認証コード
     * @type {string}
     * @memberof BotDetail
     */
    verificationCode?: string;
    /**
     * BOTアクセストークン
     * @type {string}
     * @memberof BotDetail
     */
    accessToken?: string;
    /**
     * BOTサーバーエンドポイント
     * @type {string}
     * @memberof BotDetail
     */
    postUrl?: string;
    /**
     * 権限昇格されているかどうか
     * @type {boolean}
     * @memberof BotDetail
     */
    privileged?: boolean;
    /**
     * BOTインストールコード
     * @type {string}
     * @memberof BotDetail
     */
    botCode?: string;
}
/**
 *
 * @export
 * @interface BotIdObject
 */
export interface BotIdObject {
    /**
     * 参加したBotのID
     * @type {string}
     * @memberof BotIdObject
     */
    botId?: string;
}
/**
 *
 * @export
 * @interface BotTokens
 */
export interface BotTokens {
    /**
     * Verification Token
     * @type {string}
     * @memberof BotTokens
     */
    verificationToken?: string;
    /**
     * BOTアクセストークン
     * @type {string}
     * @memberof BotTokens
     */
    accessToken?: string;
    /**
     * BOTインストールコード
     * @type {string}
     * @memberof BotTokens
     */
    botCode?: string;
}
/**
 *
 * @export
 * @interface ChangePassword
 */
export interface ChangePassword {
    /**
     * 現在のパスワード
     * @type {string}
     * @memberof ChangePassword
     */
    password: string;
    /**
     * 新しいパスワード(10文字以上32文字以下のアスキー文字)
     * @type {string}
     * @memberof ChangePassword
     */
    newPassword: string;
}
/**
 *
 * @export
 * @interface Channel
 */
export interface Channel {
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof Channel
     */
    channelId?: string;
    /**
     * チャンネル名
     * @type {string}
     * @memberof Channel
     */
    name?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof Channel
     */
    member?: Array<string>;
    /**
     * 親の階層のチャンネルUUID
     * @type {string}
     * @memberof Channel
     */
    parent?: string;
    /**
     * チャンネルトピック
     * @type {string}
     * @memberof Channel
     */
    topic?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof Channel
     */
    children?: Array<string>;
    /**
     * チャンネルの可視状態
     * @type {boolean}
     * @memberof Channel
     */
    visibility?: boolean;
    /**
     * 強制通知チャンネルか
     * @type {boolean}
     * @memberof Channel
     */
    force?: boolean;
    /**
     * プライベートチャンネルか
     * @type {boolean}
     * @memberof Channel
     */
    _private?: boolean;
    /**
     * ダイレクトメッセージチャンネルか
     * @type {boolean}
     * @memberof Channel
     */
    dm?: boolean;
}
/**
 *
 * @export
 * @interface ChannelBot
 */
export interface ChannelBot {
    /**
     * BotのID
     * @type {string}
     * @memberof ChannelBot
     */
    botId?: string;
    /**
     * BotのユーザーID
     * @type {string}
     * @memberof ChannelBot
     */
    botUserId?: string;
}
/**
 *
 * @export
 * @interface ChannelEvent
 */
export interface ChannelEvent {
    /**
     * イベントタイプ
     * @type {string}
     * @memberof ChannelEvent
     */
    type?: ChannelEventTypeEnum;
    /**
     * イベント詳細
     * @type {TopicChangedEvent | SubscribersChangedEvent | PinAddedEvent | PinRemovedEvent | NameChangedEvent | ParentChangedEvent | VisibilityChangedEvent | ForcedNotificationChangedEvent | ChildCreatedEvent | Event}
     * @memberof ChannelEvent
     */
    detail?: TopicChangedEvent | SubscribersChangedEvent | PinAddedEvent | PinRemovedEvent | NameChangedEvent | ParentChangedEvent | VisibilityChangedEvent | ForcedNotificationChangedEvent | ChildCreatedEvent | Event;
    /**
     * イベント発生日
     * @type {Date}
     * @memberof ChannelEvent
     */
    dateTime?: Date;
}
/**
    * @export
    * @enum {string}
    */
export declare enum ChannelEventTypeEnum {
    TopicChanged = "TopicChanged",
    SubscribersChanged = "SubscribersChanged",
    PinAdded = "PinAdded",
    PinRemoved = "PinRemoved",
    NameChanged = "NameChanged",
    ParentChanged = "ParentChanged",
    VisibilityChanged = "VisibilityChanged",
    ForcedNotificationChanged = "ForcedNotificationChanged",
    ChildCreated = "ChildCreated"
}
/**
 *
 * @export
 * @interface ChannelTopic
 */
export interface ChannelTopic {
    /**
     * チャンネルトピック
     * @type {string}
     * @memberof ChannelTopic
     */
    text?: string;
}
/**
 * ChildCreated
 * @export
 * @interface ChildCreatedEvent
 */
export interface ChildCreatedEvent {
    /**
     * 作成者UUID
     * @type {string}
     * @memberof ChildCreatedEvent
     */
    userId?: string;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof ChildCreatedEvent
     */
    channelId?: string;
}
/**
 *
 * @export
 * @interface ClientInfo
 */
export interface ClientInfo {
    /**
     * クライアントID
     * @type {string}
     * @memberof ClientInfo
     */
    clientId?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof ClientInfo
     */
    name?: string;
    /**
     * クライアント説明
     * @type {string}
     * @memberof ClientInfo
     */
    description?: string;
    /**
     * クライアント作成者UUID
     * @type {string}
     * @memberof ClientInfo
     */
    creatorId?: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum ClientScope {
    Read = "read",
    Write = "write",
    ManageBot = "manage_bot"
}
/**
 *
 * @export
 * @interface Clip
 */
export interface Clip {
    /**
     * フォルダID
     * @type {string}
     * @memberof Clip
     */
    folderId?: string;
    /**
     * クリップID
     * @type {string}
     * @memberof Clip
     */
    clipId?: string;
    /**
     * クリップ日時
     * @type {Date}
     * @memberof Clip
     */
    clippedAt?: Date;
    /**
     *
     * @type {Message}
     * @memberof Clip
     */
    message?: Message;
}
/**
 *
 * @export
 * @interface ClipIDObject
 */
export interface ClipIDObject {
    /**
     * クリップID
     * @type {string}
     * @memberof ClipIDObject
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ClipOfFolder
 */
export interface ClipOfFolder {
    /**
     * クリップID
     * @type {string}
     * @memberof ClipOfFolder
     */
    clipId?: string;
    /**
     * クリップ日時
     * @type {Date}
     * @memberof ClipOfFolder
     */
    clippedAt?: Date;
    /**
     *
     * @type {Message}
     * @memberof ClipOfFolder
     */
    message?: Message;
}
/**
 *
 * @export
 * @interface ClipsFolder
 */
export interface ClipsFolder {
    /**
     * フォルダUUID
     * @type {string}
     * @memberof ClipsFolder
     */
    id?: string;
    /**
     * フォルダ名
     * @type {string}
     * @memberof ClipsFolder
     */
    name?: string;
    /**
     * フォルダ作成日時
     * @type {Date}
     * @memberof ClipsFolder
     */
    createdAt?: Date;
}
/**
 *
 * @export
 * @interface ClipsFolderIDObject
 */
export interface ClipsFolderIDObject {
    /**
     * フォルダID
     * @type {string}
     * @memberof ClipsFolderIDObject
     */
    folderId: string;
}
/**
 *
 * @export
 * @interface ClipsFolderNameObject
 */
export interface ClipsFolderNameObject {
    /**
     * フォルダ名(30文字以内)
     * @type {string}
     * @memberof ClipsFolderNameObject
     */
    name: string;
}
/**
 *
 * @export
 * @interface CreateChannel
 */
export interface CreateChannel {
    /**
     * プライベートチャンネルかどうか
     * @type {boolean}
     * @memberof CreateChannel
     */
    _private?: boolean;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof CreateChannel
     */
    member?: Array<string>;
    /**
     * チャンネル名
     * @type {string}
     * @memberof CreateChannel
     */
    name?: string;
    /**
     * 親のチャンネルID
     * @type {string}
     * @memberof CreateChannel
     */
    parent?: string;
}
/**
 *
 * @export
 * @interface CreateChannelChild
 */
export interface CreateChannelChild {
    /**
     * チャンネル名
     * @type {string}
     * @memberof CreateChannelChild
     */
    name: string;
}
/**
 *
 * @export
 * @interface FCMToken
 */
export interface FCMToken {
    /**
     * FCMのデバイストークン
     * @type {string}
     * @memberof FCMToken
     */
    token: string;
}
/**
 *
 * @export
 * @interface FileInfo
 */
export interface FileInfo {
    /**
     * ファイルUUID
     * @type {string}
     * @memberof FileInfo
     */
    fileId?: string;
    /**
     * ファイル名
     * @type {string}
     * @memberof FileInfo
     */
    name?: string;
    /**
     * MIMEタイプ
     * @type {string}
     * @memberof FileInfo
     */
    mime?: string;
    /**
     * ファイルサイズ
     * @type {number}
     * @memberof FileInfo
     */
    size?: number;
    /**
     * MD5ハッシュ
     * @type {string}
     * @memberof FileInfo
     */
    md5?: string;
    /**
     * サムネイルがあるかどうか
     * @type {boolean}
     * @memberof FileInfo
     */
    hasThumb?: boolean;
    /**
     * サムネイル幅
     * @type {number}
     * @memberof FileInfo
     */
    thumbWidth?: number;
    /**
     * サムネイル高さ
     * @type {number}
     * @memberof FileInfo
     */
    thumbHeight?: number;
    /**
     * アップロード日時
     * @type {Date}
     * @memberof FileInfo
     */
    datetime?: Date;
}
/**
 * ForcedNotificationChanged
 * @export
 * @interface ForcedNotificationChangedEvent
 */
export interface ForcedNotificationChangedEvent {
    /**
     * 作成者UUID
     * @type {string}
     * @memberof ForcedNotificationChangedEvent
     */
    userId?: string;
    /**
     * 強制状態
     * @type {boolean}
     * @memberof ForcedNotificationChangedEvent
     */
    force?: boolean;
}
/**
 *
 * @export
 * @interface Heartbeat
 */
export interface Heartbeat {
    /**
     *
     * @type {HeartbeatStatus}
     * @memberof Heartbeat
     */
    status: HeartbeatStatus;
    /**
     * 現在いるチャンネルId
     * @type {string}
     * @memberof Heartbeat
     */
    channelId: string;
}
/**
 *
 * @export
 * @interface HeartbeatRes
 */
export interface HeartbeatRes {
    /**
     *
     * @type {Array<HeartbeatResUserStatuses>}
     * @memberof HeartbeatRes
     */
    userStatuses?: Array<HeartbeatResUserStatuses>;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof HeartbeatRes
     */
    channelId?: string;
}
/**
 *
 * @export
 * @interface HeartbeatResUserStatuses
 */
export interface HeartbeatResUserStatuses {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof HeartbeatResUserStatuses
     */
    userId?: string;
    /**
     *
     * @type {HeartbeatStatus}
     * @memberof HeartbeatResUserStatuses
     */
    status?: HeartbeatStatus;
}
/**
 * editing,monitoring,noneのユーザーの状態
 * @export
 * @enum {string}
 */
export declare enum HeartbeatStatus {
    None = "none",
    Monitoring = "monitoring",
    Editing = "editing"
}
/**
 *
 * @export
 * @interface Me
 */
export interface Me {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof Me
     */
    userId?: string;
    /**
     * traQ ID
     * @type {string}
     * @memberof Me
     */
    name?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof Me
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof Me
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof Me
     */
    bot?: boolean;
    /**
     * ツイッターID
     * @type {string}
     * @memberof Me
     */
    twitterId?: string;
    /**
     * 最終オンライン日時(オンラインに１度もなってない場合はnull)
     * @type {Date}
     * @memberof Me
     */
    lastOnline?: Date;
    /**
     * 現在オンラインかどうか
     * @type {boolean}
     * @memberof Me
     */
    isOnline?: boolean;
    /**
     * アカウントが停止中かどうか
     * @type {boolean}
     * @memberof Me
     */
    suspended?: boolean;
    /**
     *
     * @type {UserStatus}
     * @memberof Me
     */
    accountStatus?: UserStatus;
    /**
     * ユーザーロール
     * @type {string}
     * @memberof Me
     */
    role?: string;
    /**
     * 所有している権限の配列
     * @type {Array<string>}
     * @memberof Me
     */
    permissions?: Array<string>;
}
/**
 *
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * メッセージUUID
     * @type {string}
     * @memberof Message
     */
    messageId?: string;
    /**
     * 投稿者UUID
     * @type {string}
     * @memberof Message
     */
    userId?: string;
    /**
     * 投稿先チャンネルUUID
     * @type {string}
     * @memberof Message
     */
    parentChannelId?: string;
    /**
     * メッセージ本体
     * @type {string}
     * @memberof Message
     */
    content?: string;
    /**
     * メッセージ投稿日時
     * @type {Date}
     * @memberof Message
     */
    createdAt?: Date;
    /**
     * メッセージ更新日時
     * @type {Date}
     * @memberof Message
     */
    updatedAt?: Date;
    /**
     * ピン留めされているかどうか
     * @type {boolean}
     * @memberof Message
     */
    pin?: boolean;
    /**
     * 自分が通報しているかどうか
     * @type {boolean}
     * @memberof Message
     */
    reported?: boolean;
    /**
     * メッセージスタンプ配列
     * @type {Array<MessageStamp>}
     * @memberof Message
     */
    stampList?: Array<MessageStamp>;
}
/**
 *
 * @export
 * @interface MessageIDObject
 */
export interface MessageIDObject {
    /**
     * ピン留めするメッセージID
     * @type {string}
     * @memberof MessageIDObject
     */
    messageId: string;
}
/**
 *
 * @export
 * @interface MessageStamp
 */
export interface MessageStamp {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof MessageStamp
     */
    userId?: string;
    /**
     * スタンプUUID
     * @type {string}
     * @memberof MessageStamp
     */
    stampId?: string;
    /**
     * 押された個数
     * @type {number}
     * @memberof MessageStamp
     */
    count?: number;
    /**
     * 最初に押した日時
     * @type {Date}
     * @memberof MessageStamp
     */
    createdAt?: Date;
    /**
     * 最後に押した日時
     * @type {Date}
     * @memberof MessageStamp
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface MessageStampPost
 */
export interface MessageStampPost {
    /**
     * 押す個数(1-100)、100より大きい場合は100として受け取ります
     * @type {number}
     * @memberof MessageStampPost
     */
    count?: number;
}
/**
 * NameChanged
 * @export
 * @interface NameChangedEvent
 */
export interface NameChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof NameChangedEvent
     */
    userId?: string;
    /**
     * 変更前名前
     * @type {string}
     * @memberof NameChangedEvent
     */
    before?: string;
    /**
     * 変更後名前
     * @type {string}
     * @memberof NameChangedEvent
     */
    after?: string;
}
/**
 *
 * @export
 * @interface NotificationUsers
 */
export interface NotificationUsers {
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof NotificationUsers
     */
    on?: Array<string>;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof NotificationUsers
     */
    off?: Array<string>;
}
/**
 *
 * @export
 * @interface OAuth2Authorization
 */
export interface OAuth2Authorization {
    /**
     *
     * @type {OAuth2ResponseType}
     * @memberof OAuth2Authorization
     */
    responseType?: OAuth2ResponseType;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    redirectUri?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    scope?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    codeChallenge?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    codeChallengeMethod?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Authorization
     */
    nonce?: string;
    /**
     *
     * @type {OAuth2Prompt}
     * @memberof OAuth2Authorization
     */
    prompt?: OAuth2Prompt;
}
/**
 *
 * @export
 * @interface OAuth2Decide
 */
export interface OAuth2Decide {
    /**
     * 承諾する場合は\"approve\"
     * @type {string}
     * @memberof OAuth2Decide
     */
    submit: string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum OAuth2Prompt {
    None = "none"
}
/**
 *
 * @export
 * @enum {string}
 */
export declare enum OAuth2ResponseType {
    Code = "code",
    Token = "token",
    None = "none"
}
/**
 *
 * @export
 * @interface OAuth2Token
 */
export interface OAuth2Token {
    /**
     *
     * @type {string}
     * @memberof OAuth2Token
     */
    accessToken: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Token
     */
    tokenType: string;
    /**
     *
     * @type {number}
     * @memberof OAuth2Token
     */
    expiresIn?: number;
    /**
     *
     * @type {string}
     * @memberof OAuth2Token
     */
    refreshToken?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Token
     */
    scope?: string;
    /**
     *
     * @type {string}
     * @memberof OAuth2Token
     */
    idToken?: string;
}
/**
 *
 * @export
 * @interface OwnedClientInfo
 */
export interface OwnedClientInfo {
    /**
     * クライアントID
     * @type {string}
     * @memberof OwnedClientInfo
     */
    clientId?: string;
    /**
     * クライアント名
     * @type {string}
     * @memberof OwnedClientInfo
     */
    name?: string;
    /**
     * クライアント説明
     * @type {string}
     * @memberof OwnedClientInfo
     */
    description?: string;
    /**
     * クライアント作成者UUID
     * @type {string}
     * @memberof OwnedClientInfo
     */
    creatorId?: string;
    /**
     * 要求スコープの配列
     * @type {Array<ClientScope>}
     * @memberof OwnedClientInfo
     */
    scopes?: Array<ClientScope>;
    /**
     * OAuth2リダイレクトURL
     * @type {string}
     * @memberof OwnedClientInfo
     */
    redirectUri?: string;
    /**
     * クライアントSecret
     * @type {string}
     * @memberof OwnedClientInfo
     */
    secret?: string;
}
/**
 * ParentChanged
 * @export
 * @interface ParentChangedEvent
 */
export interface ParentChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof ParentChangedEvent
     */
    userId?: string;
    /**
     * 変更前親チャンネルUUID
     * @type {string}
     * @memberof ParentChangedEvent
     */
    before?: string;
    /**
     * 変更後親チャンネルUUID
     * @type {string}
     * @memberof ParentChangedEvent
     */
    after?: string;
}
/**
 *
 * @export
 * @interface PatchBot
 */
export interface PatchBot {
    /**
     * Bot表示名
     * @type {string}
     * @memberof PatchBot
     */
    displayName?: string;
    /**
     * Bot説明
     * @type {string}
     * @memberof PatchBot
     */
    description?: string;
    /**
     * privileged属性
     * @type {boolean}
     * @memberof PatchBot
     */
    privileged?: boolean;
    /**
     * BotのPOSTエンドポイント
     * @type {string}
     * @memberof PatchBot
     */
    webhookUrl?: string;
    /**
     * 移譲先のユーザーUUID
     * @type {string}
     * @memberof PatchBot
     */
    creatorId?: string;
}
/**
 *
 * @export
 * @interface PatchChannel
 */
export interface PatchChannel {
    /**
     * チャンネル名
     * @type {string}
     * @memberof PatchChannel
     */
    name?: string;
    /**
     * 変更後のvisibility
     * @type {boolean}
     * @memberof PatchChannel
     */
    visibility?: boolean;
    /**
     * 強制通知かどうか
     * @type {boolean}
     * @memberof PatchChannel
     */
    force?: boolean;
}
/**
 *
 * @export
 * @interface PatchClient
 */
export interface PatchClient {
    /**
     * クライアント名
     * @type {string}
     * @memberof PatchClient
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof PatchClient
     */
    description?: string;
    /**
     * リダイレクト先のURI
     * @type {string}
     * @memberof PatchClient
     */
    redirectUri?: string;
}
/**
 *
 * @export
 * @interface PatchUserGroup
 */
export interface PatchUserGroup {
    /**
     * グループ名
     * @type {string}
     * @memberof PatchUserGroup
     */
    name?: string;
    /**
     * 説明
     * @type {string}
     * @memberof PatchUserGroup
     */
    description?: string;
    /**
     * 管理ユーザー
     * @type {string}
     * @memberof PatchUserGroup
     */
    adminUserId?: string;
}
/**
 *
 * @export
 * @interface PatchWebhook
 */
export interface PatchWebhook {
    /**
     * webhookユーザーの表示名
     * @type {string}
     * @memberof PatchWebhook
     */
    name?: string;
    /**
     * webhookの説明
     * @type {string}
     * @memberof PatchWebhook
     */
    description?: string;
    /**
     * デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
     * @type {string}
     * @memberof PatchWebhook
     */
    channelId?: string;
    /**
     * webhookシークレット
     * @type {string}
     * @memberof PatchWebhook
     */
    secret?: string;
    /**
     * 移譲先のユーザーUUID
     * @type {string}
     * @memberof PatchWebhook
     */
    creatorId?: string;
}
/**
 *
 * @export
 * @interface Pin
 */
export interface Pin {
    /**
     * ピンUUID
     * @type {string}
     * @memberof Pin
     */
    pinId?: string;
    /**
     * チャンネルUUID
     * @type {string}
     * @memberof Pin
     */
    channelId?: string;
    /**
     * ピン留めしたユーザーのUUID
     * @type {string}
     * @memberof Pin
     */
    userId?: string;
    /**
     * ピン留めした日時
     * @type {Date}
     * @memberof Pin
     */
    dateTime?: Date;
    /**
     *
     * @type {Message}
     * @memberof Pin
     */
    message?: Message;
}
/**
 * PinAdded
 * @export
 * @interface PinAddedEvent
 */
export interface PinAddedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof PinAddedEvent
     */
    userId?: string;
    /**
     * メッセージUUID
     * @type {string}
     * @memberof PinAddedEvent
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface PinIDObject
 */
export interface PinIDObject {
    /**
     * ピンID
     * @type {string}
     * @memberof PinIDObject
     */
    id?: string;
}
/**
 * PinRemoved
 * @export
 * @interface PinRemovedEvent
 */
export interface PinRemovedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof PinRemovedEvent
     */
    userId?: string;
    /**
     * メッセージUUID
     * @type {string}
     * @memberof PinRemovedEvent
     */
    messageId?: string;
}
/**
 *
 * @export
 * @interface PostBot
 */
export interface PostBot {
    /**
     * botユーザーID。自動的に先頭に\"BOT_\"が付与されます
     * @type {string}
     * @memberof PostBot
     */
    name: string;
    /**
     * botユーザーの表示名
     * @type {string}
     * @memberof PostBot
     */
    displayName: string;
    /**
     * botの説明
     * @type {string}
     * @memberof PostBot
     */
    description: string;
    /**
     * botのPOSTエンドポイント
     * @type {string}
     * @memberof PostBot
     */
    postUrl: string;
}
/**
 *
 * @export
 * @interface PostBotChannel
 */
export interface PostBotChannel {
    /**
     * ボットコード
     * @type {string}
     * @memberof PostBotChannel
     */
    code: string;
}
/**
 *
 * @export
 * @interface PostClient
 */
export interface PostClient {
    /**
     * クライアント名
     * @type {string}
     * @memberof PostClient
     */
    name: string;
    /**
     * クライアントの説明
     * @type {string}
     * @memberof PostClient
     */
    description: string;
    /**
     * リダイレクト先のURI
     * @type {string}
     * @memberof PostClient
     */
    redirectUri: string;
    /**
     * 要求するスコープ(必ず１つ以上)
     * @type {Array<ClientScope>}
     * @memberof PostClient
     */
    scopes: Array<ClientScope>;
}
/**
 *
 * @export
 * @interface PostOAuth2Token
 */
export interface PostOAuth2Token {
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    grantType: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    redirectUri?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    clientId?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    codeVerifier?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    scope?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    refreshToken?: string;
    /**
     *
     * @type {string}
     * @memberof PostOAuth2Token
     */
    clientSecret?: string;
}
/**
 *
 * @export
 * @interface PostUserGroup
 */
export interface PostUserGroup {
    /**
     * グループ名
     * @type {string}
     * @memberof PostUserGroup
     */
    name: string;
    /**
     * 説明
     * @type {string}
     * @memberof PostUserGroup
     */
    description?: string;
}
/**
 *
 * @export
 * @interface PostWebhook
 */
export interface PostWebhook {
    /**
     * webhookユーザーの表示名
     * @type {string}
     * @memberof PostWebhook
     */
    name: string;
    /**
     * webhookの説明
     * @type {string}
     * @memberof PostWebhook
     */
    description: string;
    /**
     * デフォルトの投稿先チャンネル(パブリックチャンネルのみ)
     * @type {string}
     * @memberof PostWebhook
     */
    channelId: string;
    /**
     * webhookシークレット
     * @type {string}
     * @memberof PostWebhook
     */
    secret?: string;
}
/**
 *
 * @export
 * @interface PutBotEvents
 */
export interface PutBotEvents {
    /**
     * 購読するイベントの配列
     * @type {Array<string>}
     * @memberof PutBotEvents
     */
    events: Array<string>;
}
/**
 *
 * @export
 * @interface PutBotState
 */
export interface PutBotState {
    /**
     * activeまたはinactive
     * @type {string}
     * @memberof PutBotState
     */
    state: string;
}
/**
 *
 * @export
 * @interface PutParentChannel
 */
export interface PutParentChannel {
    /**
     * 変更後の親チャンネルID
     * @type {string}
     * @memberof PutParentChannel
     */
    parent: string;
}
/**
 *
 * @export
 * @interface PutWebRTCState
 */
export interface PutWebRTCState {
    /**
     * ユーザーの接続先チャンネルUUID(切断はnullを指定)
     * @type {string}
     * @memberof PutWebRTCState
     */
    channelId?: string;
    /**
     * ユーザーの状態の配列(切断は空配列を指定)
     * @type {Array<string>}
     * @memberof PutWebRTCState
     */
    state?: Array<string>;
}
/**
 *
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * 通報ID
     * @type {string}
     * @memberof Report
     */
    id?: string;
    /**
     * 通報対象のメッセージID
     * @type {string}
     * @memberof Report
     */
    messageId?: string;
    /**
     * 通報者ID
     * @type {string}
     * @memberof Report
     */
    reporter?: string;
    /**
     * 通報内容
     * @type {string}
     * @memberof Report
     */
    reason?: string;
    /**
     * 通報日時
     * @type {Date}
     * @memberof Report
     */
    createdAt?: Date;
}
/**
 *
 * @export
 * @interface ReportMessage
 */
export interface ReportMessage {
    /**
     * 通報理由(100文字以内)
     * @type {string}
     * @memberof ReportMessage
     */
    reason: string;
}
/**
 *
 * @export
 * @interface SendMessage
 */
export interface SendMessage {
    /**
     * Markdown形式のメッセージ本文
     * @type {string}
     * @memberof SendMessage
     */
    text: string;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
    /**
     *
     * @type {string}
     * @memberof Session
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    lastIP?: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    lastUserAgent?: string;
    /**
     *
     * @type {Date}
     * @memberof Session
     */
    lastAccess?: Date;
    /**
     *
     * @type {Date}
     * @memberof Session
     */
    createdAt?: Date;
}
/**
 *
 * @export
 * @interface SetChannelTopic
 */
export interface SetChannelTopic {
    /**
     * チャンネルの説明
     * @type {string}
     * @memberof SetChannelTopic
     */
    text: string;
}
/**
 *
 * @export
 * @interface SetClip
 */
export interface SetClip {
    /**
     * クリップするメッセージID
     * @type {string}
     * @memberof SetClip
     */
    messageId: string;
    /**
     * クリップフォルダ名
     * @type {string}
     * @memberof SetClip
     */
    folderId?: string;
}
/**
 *
 * @export
 * @interface SetTag
 */
export interface SetTag {
    /**
     * 追加するタグ
     * @type {string}
     * @memberof SetTag
     */
    tag: string;
}
/**
 *
 * @export
 * @interface SetTagLock
 */
export interface SetTagLock {
    /**
     * lockするときはtrue,解除するときはfalse
     * @type {boolean}
     * @memberof SetTagLock
     */
    isLocked: boolean;
}
/**
 *
 * @export
 * @interface Stamp
 */
export interface Stamp {
    /**
     * スタンプUUID
     * @type {string}
     * @memberof Stamp
     */
    id?: string;
    /**
     * スタンプ名
     * @type {string}
     * @memberof Stamp
     */
    name?: string;
    /**
     * スタンプ作成者UUID
     * @type {string}
     * @memberof Stamp
     */
    creatorId?: string;
    /**
     * スタンプファイルUUID
     * @type {string}
     * @memberof Stamp
     */
    fileId?: string;
    /**
     * スタンプ作成日時
     * @type {Date}
     * @memberof Stamp
     */
    createdAt?: Date;
    /**
     * スタンプ更新日時
     * @type {Date}
     * @memberof Stamp
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface StampHistory
 */
export interface StampHistory {
    /**
     * スタンプID
     * @type {string}
     * @memberof StampHistory
     */
    stampId?: string;
    /**
     * そのスタンプが最後に押された日時
     * @type {Date}
     * @memberof StampHistory
     */
    datetime?: Date;
}
/**
 * SubscribersChanged
 * @export
 * @interface SubscribersChangedEvent
 */
export interface SubscribersChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof SubscribersChangedEvent
     */
    userId?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof SubscribersChangedEvent
     */
    on?: Array<string>;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof SubscribersChangedEvent
     */
    off?: Array<string>;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * タグUUID
     * @type {string}
     * @memberof Tag
     */
    tagId?: string;
    /**
     * タグ文字列
     * @type {string}
     * @memberof Tag
     */
    tag?: string;
    /**
     * タグがロックされているかどうか
     * @type {boolean}
     * @memberof Tag
     */
    isLocked?: boolean;
    /**
     * タグ付与日時
     * @type {Date}
     * @memberof Tag
     */
    createdAt?: Date;
    /**
     * タグ更新日時
     * @type {Date}
     * @memberof Tag
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface TagUsers
 */
export interface TagUsers {
    /**
     *
     * @type {string}
     * @memberof TagUsers
     */
    tagId?: string;
    /**
     *
     * @type {string}
     * @memberof TagUsers
     */
    tag?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof TagUsers
     */
    users?: Array<string>;
}
/**
 * TopicChanged
 * @export
 * @interface TopicChangedEvent
 */
export interface TopicChangedEvent {
    /**
     * 変更者UUID
     * @type {string}
     * @memberof TopicChangedEvent
     */
    userId?: string;
    /**
     * 変更前トピック
     * @type {string}
     * @memberof TopicChangedEvent
     */
    before?: string;
    /**
     * 変更後トピック
     * @type {string}
     * @memberof TopicChangedEvent
     */
    after?: string;
}
/**
 *
 * @export
 * @interface UnreadChannel
 */
export interface UnreadChannel {
    /**
     * チャンネルID
     * @type {string}
     * @memberof UnreadChannel
     */
    channelId?: string;
    /**
     * そのチャンネルの未読メッセージ数
     * @type {number}
     * @memberof UnreadChannel
     */
    count?: number;
    /**
     * 自分にメンションされたメッセージを含んでいるかどうか
     * @type {boolean}
     * @memberof UnreadChannel
     */
    noticeable?: boolean;
    /**
     * そのチャンネルの最古の未読メッセージの日時
     * @type {Date}
     * @memberof UnreadChannel
     */
    since?: Date;
    /**
     * そのチャンネルの最新の未読メッセージの日時
     * @type {Date}
     * @memberof UnreadChannel
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof User
     */
    userId?: string;
    /**
     * traQ ID
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof User
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof User
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof User
     */
    bot?: boolean;
    /**
     * ツイッターID
     * @type {string}
     * @memberof User
     */
    twitterId?: string;
    /**
     * 最終オンライン日時(オンラインに１度もなってない場合はnull)
     * @type {Date}
     * @memberof User
     */
    lastOnline?: Date;
    /**
     * 現在オンラインかどうか
     * @type {boolean}
     * @memberof User
     */
    isOnline?: boolean;
    /**
     * アカウントが停止中かどうか
     * @type {boolean}
     * @memberof User
     */
    suspended?: boolean;
    /**
     *
     * @type {UserStatus}
     * @memberof User
     */
    accountStatus?: UserStatus;
}
/**
 *
 * @export
 * @interface UserData
 */
export interface UserData {
    /**
     * 新しい表示名(0-32文字)。変更しない場合は\"\"
     * @type {string}
     * @memberof UserData
     */
    displayName?: string;
    /**
     * TwitterID
     * @type {string}
     * @memberof UserData
     */
    twitterId?: string;
}
/**
 *
 * @export
 * @interface UserDetail
 */
export interface UserDetail {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof UserDetail
     */
    userId?: string;
    /**
     * traQ ID
     * @type {string}
     * @memberof UserDetail
     */
    name?: string;
    /**
     * 表示名
     * @type {string}
     * @memberof UserDetail
     */
    displayName?: string;
    /**
     * アイコンファイルUUID
     * @type {string}
     * @memberof UserDetail
     */
    iconFileId?: string;
    /**
     * BOTかどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    bot?: boolean;
    /**
     * ツイッターID
     * @type {string}
     * @memberof UserDetail
     */
    twitterId?: string;
    /**
     * 最終オンライン日時(オンラインに１度もなってない場合はnull)
     * @type {Date}
     * @memberof UserDetail
     */
    lastOnline?: Date;
    /**
     * 現在オンラインかどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    isOnline?: boolean;
    /**
     * アカウントが停止中かどうか
     * @type {boolean}
     * @memberof UserDetail
     */
    suspended?: boolean;
    /**
     *
     * @type {UserStatus}
     * @memberof UserDetail
     */
    accountStatus?: UserStatus;
    /**
     *
     * @type {Array<Tag>}
     * @memberof UserDetail
     */
    tagList?: Array<Tag>;
}
/**
 *
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * グループUUID
     * @type {string}
     * @memberof UserGroup
     */
    groupId?: string;
    /**
     * グループ名
     * @type {string}
     * @memberof UserGroup
     */
    name?: string;
    /**
     * グループ説明
     * @type {string}
     * @memberof UserGroup
     */
    description?: string;
    /**
     * グループタイプ
     * @type {string}
     * @memberof UserGroup
     */
    type?: string;
    /**
     * グループ管理者UUID
     * @type {string}
     * @memberof UserGroup
     */
    adminUserId?: string;
    /**
     * UUIDの配列
     * @type {Array<string>}
     * @memberof UserGroup
     */
    members?: Array<string>;
    /**
     * グループ作成日時
     * @type {Date}
     * @memberof UserGroup
     */
    createdAt?: Date;
    /**
     * グループ更新日時
     * @type {Date}
     * @memberof UserGroup
     */
    updatedAt?: Date;
}
/**
 *
 * @export
 * @interface UserLogin
 */
export interface UserLogin {
    /**
     *
     * @type {string}
     * @memberof UserLogin
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof UserLogin
     */
    pass: string;
}
/**
 *
 * @export
 * @interface UserRegister
 */
export interface UserRegister {
    /**
     * ユーザー名(半角英数字とアンダーバー(_)の1文字以上32文字以下)
     * @type {string}
     * @memberof UserRegister
     */
    name: string;
    /**
     * パスワード
     * @type {string}
     * @memberof UserRegister
     */
    password: string;
}
/**
 * アカウントの状態 (0:停止,1:有効,2:一時停止)
 * @export
 * @enum {string}
 */
export declare enum UserStatus {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2
}
/**
 * VisibilityChanged
 * @export
 * @interface VisibilityChangedEvent
 */
export interface VisibilityChangedEvent {
    /**
     * 作成者UUID
     * @type {string}
     * @memberof VisibilityChangedEvent
     */
    userId?: string;
    /**
     * 可視状態
     * @type {boolean}
     * @memberof VisibilityChangedEvent
     */
    visibility?: boolean;
}
/**
 *
 * @export
 * @interface WebRTCChannelState
 */
export interface WebRTCChannelState {
    /**
     * 接続ユーザーの状態の配列
     * @type {Array<WebRTCUserState>}
     * @memberof WebRTCChannelState
     */
    users?: Array<WebRTCUserState>;
}
/**
 *
 * @export
 * @interface WebRTCUserState
 */
export interface WebRTCUserState {
    /**
     * ユーザーUUID
     * @type {string}
     * @memberof WebRTCUserState
     */
    userId?: string;
    /**
     * ユーザーの接続先チャンネルUUID(未接続の場合は00000000-0000-0000-0000-000000000000)
     * @type {string}
     * @memberof WebRTCUserState
     */
    channelId?: string;
    /**
     * ユーザーの状態の配列(未接続の場合は空配列)
     * @type {Array<string>}
     * @memberof WebRTCUserState
     */
    state?: Array<string>;
}
/**
 *
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     * Webhook UUID
     * @type {string}
     * @memberof Webhook
     */
    webhookId?: string;
    /**
     * WebhookユーザーのUUID
     * @type {string}
     * @memberof Webhook
     */
    botUserId?: string;
    /**
     * Webhookユーザー表示名
     * @type {string}
     * @memberof Webhook
     */
    displayName?: string;
    /**
     * Webhook説明
     * @type {string}
     * @memberof Webhook
     */
    description?: string;
    /**
     * Secure Webhookかどうか
     * @type {boolean}
     * @memberof Webhook
     */
    secure?: boolean;
    /**
     * デフォルト投稿先チャンネルUUID
     * @type {string}
     * @memberof Webhook
     */
    channelId?: string;
    /**
     * Webhook作成者UUID
     * @type {string}
     * @memberof Webhook
     */
    creatorId?: string;
    /**
     * Webhook作成日時
     * @type {Date}
     * @memberof Webhook
     */
    createdAt?: Date;
    /**
     * Webhook更新日時
     * @type {Date}
     * @memberof Webhook
     */
    updatedAt?: Date;
}
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export declare const ActivityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivities(limit?: number, subscribe?: boolean, options?: any): RequestArgs;
};
/**
 * ActivityApi - functional programming interface
 * @export
 */
export declare const ActivityApiFp: (configuration?: Configuration) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivities(limit?: number, subscribe?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
};
/**
 * ActivityApi - factory interface
 * @export
 */
export declare const ActivityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActivities(limit?: number, subscribe?: boolean, options?: any): AxiosPromise<Message[]>;
};
/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export declare class ActivityApi extends BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    getActivities(limit?: number, subscribe?: boolean, options?: any): AxiosPromise<Message[]>;
}
/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export declare const AuthenticationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {UserLogin} [userLogin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(redirect?: string, userLogin?: UserLogin, options?: any): RequestArgs;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(redirect?: string, options?: any): RequestArgs;
};
/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export declare const AuthenticationApiFp: (configuration?: Configuration) => {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {UserLogin} [userLogin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(redirect?: string, userLogin?: UserLogin, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(redirect?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * AuthenticationApi - factory interface
 * @export
 */
export declare const AuthenticationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {UserLogin} [userLogin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(redirect?: string, userLogin?: UserLogin, options?: any): AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(redirect?: string, options?: any): AxiosPromise<Response>;
};
/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export declare class AuthenticationApi extends BaseAPI {
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {UserLogin} [userLogin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(redirect?: string, userLogin?: UserLogin, options?: any): AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logout(redirect?: string, options?: any): AxiosPromise<Response>;
}
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export declare const AuthorizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): RequestArgs;
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): RequestArgs;
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2AuthorizeDecide(submit: string, options?: any): RequestArgs;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2Token(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): RequestArgs;
};
/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export declare const AuthorizationApiFp: (configuration?: Configuration) => {
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2AuthorizeDecide(submit: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2Token(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuth2Token>;
};
/**
 * AuthorizationApi - factory interface
 * @export
 */
export declare const AuthorizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2AuthorizeDecide(submit: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOauth2Token(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): AxiosPromise<OAuth2Token>;
};
/**
 * AuthorizationApi - object-oriented interface
 * @export
 * @class AuthorizationApi
 * @extends {BaseAPI}
 */
export declare class AuthorizationApi extends BaseAPI {
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    getOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    postOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    postOauth2AuthorizeDecide(submit: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    postOauth2Token(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): AxiosPromise<OAuth2Token>;
}
/**
 * BotApi - axios parameter creator
 * @export
 */
export declare const BotApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PostBotChannel} [postBotChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addChannelBot(channelID: string, postBotChannel?: PostBotChannel, options?: any): RequestArgs;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotEvents} [putBotEvents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotEvents(botID: string, putBotEvents?: PutBotEvents, options?: any): RequestArgs;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(botID: string, file?: any, options?: any): RequestArgs;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotState} [putBotState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotState(botID: string, putBotState?: PutBotState, options?: any): RequestArgs;
    /**
     * Botを作成します。
     * @param {PostBot} [postBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBots(postBot?: PostBot, options?: any): RequestArgs;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botID: string, options?: any): RequestArgs;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PatchBot} [patchBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(botID: string, patchBot?: PatchBot, options?: any): RequestArgs;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(botID: string, options?: any): RequestArgs;
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotChannels(botID: string, options?: any): RequestArgs;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotDetail(botID: string, options?: any): RequestArgs;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botID: string, options?: any): RequestArgs;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(options?: any): RequestArgs;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelID: string, options?: any): RequestArgs;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBotTokens(botID: string, options?: any): RequestArgs;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeChannelBot(channelID: string, botID: string, options?: any): RequestArgs;
};
/**
 * BotApi - functional programming interface
 * @export
 */
export declare const BotApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PostBotChannel} [postBotChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addChannelBot(channelID: string, postBotChannel?: PostBotChannel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotIdObject>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotEvents} [putBotEvents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotEvents(botID: string, putBotEvents?: PutBotEvents, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(botID: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotState} [putBotState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotState(botID: string, putBotState?: PutBotState, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Botを作成します。
     * @param {PostBot} [postBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBots(postBot?: PostBot, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotDetail>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PatchBot} [patchBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(botID: string, patchBot?: PatchBot, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot>;
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotChannels(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotDetail(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotDetail>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bot[]>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelBot[]>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBotTokens(botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BotTokens>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeChannelBot(channelID: string, botID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * BotApi - factory interface
 * @export
 */
export declare const BotApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PostBotChannel} [postBotChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addChannelBot(channelID: string, postBotChannel?: PostBotChannel, options?: any): AxiosPromise<BotIdObject>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotEvents} [putBotEvents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotEvents(botID: string, putBotEvents?: PutBotEvents, options?: any): AxiosPromise<Response>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotIcon(botID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotState} [putBotState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeBotState(botID: string, putBotState?: PutBotState, options?: any): AxiosPromise<Response>;
    /**
     * Botを作成します。
     * @param {PostBot} [postBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBots(postBot?: PostBot, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBot(botID: string, options?: any): AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PatchBot} [patchBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editBot(botID: string, patchBot?: PatchBot, options?: any): AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBot(botID: string, options?: any): AxiosPromise<Bot>;
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotChannels(botID: string, options?: any): AxiosPromise<string[]>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotDetail(botID: string, options?: any): AxiosPromise<BotDetail>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBotIcon(botID: string, options?: any): AxiosPromise<any>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBots(options?: any): AxiosPromise<Bot[]>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelBots(channelID: string, options?: any): AxiosPromise<ChannelBot[]>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reissueBotTokens(botID: string, options?: any): AxiosPromise<BotTokens>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeChannelBot(channelID: string, botID: string, options?: any): AxiosPromise<Response>;
};
/**
 * BotApi - object-oriented interface
 * @export
 * @class BotApi
 * @extends {BaseAPI}
 */
export declare class BotApi extends BaseAPI {
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PostBotChannel} [postBotChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    addChannelBot(channelID: string, postBotChannel?: PostBotChannel, options?: any): AxiosPromise<BotIdObject>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotEvents} [putBotEvents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotEvents(botID: string, putBotEvents?: PutBotEvents, options?: any): AxiosPromise<Response>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotIcon(botID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotState} [putBotState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotState(botID: string, putBotState?: PutBotState, options?: any): AxiosPromise<Response>;
    /**
     * Botを作成します。
     * @param {PostBot} [postBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    createBots(postBot?: PostBot, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    deleteBot(botID: string, options?: any): AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PatchBot} [patchBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    editBot(botID: string, patchBot?: PatchBot, options?: any): AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBot(botID: string, options?: any): AxiosPromise<Bot>;
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotChannels(botID: string, options?: any): AxiosPromise<string[]>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotDetail(botID: string, options?: any): AxiosPromise<BotDetail>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotIcon(botID: string, options?: any): AxiosPromise<any>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBots(options?: any): AxiosPromise<Bot[]>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getChannelBots(channelID: string, options?: any): AxiosPromise<ChannelBot[]>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    reissueBotTokens(botID: string, options?: any): AxiosPromise<BotTokens>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    removeChannelBot(channelID: string, botID: string, options?: any): AxiosPromise<Response>;
}
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const ChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PutParentChannel} [putParentChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeChannelParent(channelID: string, putParentChannel?: PutParentChannel, options?: any): RequestArgs;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SetChannelTopic} [setChannelTopic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeChannelTopic(channelID: string, setChannelTopic?: SetChannelTopic, options?: any): RequestArgs;
    /**
     * チャンネルを作成します。
     * @param {CreateChannel} [createChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(createChannel?: CreateChannel, options?: any): RequestArgs;
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {CreateChannelChild} [createChannelChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannelChild(channelID: string, createChannelChild?: CreateChannelChild, options?: any): RequestArgs;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannel(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PatchChannel} [patchChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(channelID: string, patchChannel?: PatchChannel, options?: any): RequestArgs;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルイベントのリストを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(channelID: string, options?: any): RequestArgs;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(options?: any): RequestArgs;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const ChannelApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PutParentChannel} [putParentChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeChannelParent(channelID: string, putParentChannel?: PutParentChannel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SetChannelTopic} [setChannelTopic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeChannelTopic(channelID: string, setChannelTopic?: SetChannelTopic, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルを作成します。
     * @param {CreateChannel} [createChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(createChannel?: CreateChannel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {CreateChannelChild} [createChannelChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannelChild(channelID: string, createChannelChild?: CreateChannelChild, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannel(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PatchChannel} [patchChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(channelID: string, patchChannel?: PatchChannel, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel>;
    /**
     * チャンネルイベントのリストを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelEvent[]>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelTopic>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Channel[]>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const ChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PutParentChannel} [putParentChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeChannelParent(channelID: string, putParentChannel?: PutParentChannel, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SetChannelTopic} [setChannelTopic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeChannelTopic(channelID: string, setChannelTopic?: SetChannelTopic, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルを作成します。
     * @param {CreateChannel} [createChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannel(createChannel?: CreateChannel, options?: any): AxiosPromise<Channel>;
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {CreateChannelChild} [createChannelChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChannelChild(channelID: string, createChannelChild?: CreateChannelChild, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PatchChannel} [patchChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editChannel(channelID: string, patchChannel?: PatchChannel, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannel(channelID: string, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルイベントのリストを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelEvents(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<ChannelEvent[]>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelTopic(channelID: string, options?: any): AxiosPromise<ChannelTopic>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannels(options?: any): AxiosPromise<Channel[]>;
};
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI {
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PutParentChannel} [putParentChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    changeChannelParent(channelID: string, putParentChannel?: PutParentChannel, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SetChannelTopic} [setChannelTopic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    changeChannelTopic(channelID: string, setChannelTopic?: SetChannelTopic, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルを作成します。
     * @param {CreateChannel} [createChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    createChannel(createChannel?: CreateChannel, options?: any): AxiosPromise<Channel>;
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {CreateChannelChild} [createChannelChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    createChannelChild(channelID: string, createChannelChild?: CreateChannelChild, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    deleteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PatchChannel} [patchChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannel(channelID: string, patchChannel?: PatchChannel, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannel(channelID: string, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルイベントのリストを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelEvents(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<ChannelEvent[]>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelTopic(channelID: string, options?: any): AxiosPromise<ChannelTopic>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannels(options?: any): AxiosPromise<Channel[]>;
}
/**
 * ClientApi - axios parameter creator
 * @export
 */
export declare const ClientApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * クライアントを登録します。
     * @param {PostClient} [postClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(postClient?: PostClient, options?: any): RequestArgs;
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientID: string, options?: any): RequestArgs;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(oauth2TokenID: string, options?: any): RequestArgs;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(clientID: string, options?: any): RequestArgs;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientDetail(clientID: string, options?: any): RequestArgs;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(options?: any): RequestArgs;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokens(options?: any): RequestArgs;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {PatchClient} [patchClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchClient(clientID: string, patchClient?: PatchClient, options?: any): RequestArgs;
};
/**
 * ClientApi - functional programming interface
 * @export
 */
export declare const ClientApiFp: (configuration?: Configuration) => {
    /**
     * クライアントを登録します。
     * @param {PostClient} [postClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(postClient?: PostClient, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(oauth2TokenID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(clientID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientInfo>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientDetail(clientID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OwnedClientInfo[]>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokens(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {PatchClient} [patchClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchClient(clientID: string, patchClient?: PatchClient, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * ClientApi - factory interface
 * @export
 */
export declare const ClientApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * クライアントを登録します。
     * @param {PostClient} [postClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClient(postClient?: PostClient, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClient(clientID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteToken(oauth2TokenID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClient(clientID: string, options?: any): AxiosPromise<ClientInfo>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClientDetail(clientID: string, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClients(options?: any): AxiosPromise<OwnedClientInfo[]>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokens(options?: any): AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {PatchClient} [patchClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchClient(clientID: string, patchClient?: PatchClient, options?: any): AxiosPromise<Response>;
};
/**
 * ClientApi - object-oriented interface
 * @export
 * @class ClientApi
 * @extends {BaseAPI}
 */
export declare class ClientApi extends BaseAPI {
    /**
     * クライアントを登録します。
     * @param {PostClient} [postClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    createClient(postClient?: PostClient, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    deleteClient(clientID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    deleteToken(oauth2TokenID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getClient(clientID: string, options?: any): AxiosPromise<ClientInfo>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getClientDetail(clientID: string, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getClients(options?: any): AxiosPromise<OwnedClientInfo[]>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getTokens(options?: any): AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {PatchClient} [patchClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    patchClient(clientID: string, patchClient?: PatchClient, options?: any): AxiosPromise<Response>;
}
/**
 * ClipApi - axios parameter creator
 * @export
 */
export declare const ClipApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {ClipsFolderIDObject} [clipsFolderIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeClipsFolder(clipID: string, clipsFolderIDObject?: ClipsFolderIDObject, options?: any): RequestArgs;
    /**
     * 新しくメッセージをクリップします。
     * @param {SetClip} [setClip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(setClip?: SetClip, options?: any): RequestArgs;
    /**
     * クリップフォルダを作成します。
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(clipsFolderNameObject?: ClipsFolderNameObject, options?: any): RequestArgs;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderID: string, options?: any): RequestArgs;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(folderID: string, clipsFolderNameObject?: ClipsFolderNameObject, options?: any): RequestArgs;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClip(clipID: string, options?: any): RequestArgs;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderID: string, options?: any): RequestArgs;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): RequestArgs;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(options?: any): RequestArgs;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipsFolder(clipID: string, options?: any): RequestArgs;
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(clipID: string, options?: any): RequestArgs;
};
/**
 * ClipApi - functional programming interface
 * @export
 */
export declare const ClipApiFp: (configuration?: Configuration) => {
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {ClipsFolderIDObject} [clipsFolderIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeClipsFolder(clipID: string, clipsFolderIDObject?: ClipsFolderIDObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 新しくメッセージをクリップします。
     * @param {SetClip} [setClip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(setClip?: SetClip, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipIDObject>;
    /**
     * クリップフォルダを作成します。
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(clipsFolderNameObject?: ClipsFolderNameObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipsFolder>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(folderID: string, clipsFolderNameObject?: ClipsFolderNameObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClip(clipID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipOfFolder[]>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipsFolder[]>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Clip[]>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipsFolder(clipID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(clipID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * ClipApi - factory interface
 * @export
 */
export declare const ClipApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {ClipsFolderIDObject} [clipsFolderIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeClipsFolder(clipID: string, clipsFolderIDObject?: ClipsFolderIDObject, options?: any): AxiosPromise<Response>;
    /**
     * 新しくメッセージをクリップします。
     * @param {SetClip} [setClip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clipMessage(setClip?: SetClip, options?: any): AxiosPromise<ClipIDObject>;
    /**
     * クリップフォルダを作成します。
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createClipFolder(clipsFolderNameObject?: ClipsFolderNameObject, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteClipFolder(folderID: string, options?: any): AxiosPromise<Response>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editClipFolder(folderID: string, clipsFolderNameObject?: ClipsFolderNameObject, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClip(clipID: string, options?: any): AxiosPromise<Message>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolder(folderID: string, options?: any): AxiosPromise<ClipOfFolder[]>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipFolders(options?: any): AxiosPromise<ClipsFolder[]>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClips(options?: any): AxiosPromise<Clip[]>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getClipsFolder(clipID: string, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unclipMessage(clipID: string, options?: any): AxiosPromise<Response>;
};
/**
 * ClipApi - object-oriented interface
 * @export
 * @class ClipApi
 * @extends {BaseAPI}
 */
export declare class ClipApi extends BaseAPI {
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {ClipsFolderIDObject} [clipsFolderIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    changeClipsFolder(clipID: string, clipsFolderIDObject?: ClipsFolderIDObject, options?: any): AxiosPromise<Response>;
    /**
     * 新しくメッセージをクリップします。
     * @param {SetClip} [setClip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    clipMessage(setClip?: SetClip, options?: any): AxiosPromise<ClipIDObject>;
    /**
     * クリップフォルダを作成します。
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    createClipFolder(clipsFolderNameObject?: ClipsFolderNameObject, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    deleteClipFolder(folderID: string, options?: any): AxiosPromise<Response>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    editClipFolder(folderID: string, clipsFolderNameObject?: ClipsFolderNameObject, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClip(clipID: string, options?: any): AxiosPromise<Message>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolder(folderID: string, options?: any): AxiosPromise<ClipOfFolder[]>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolders(options?: any): AxiosPromise<ClipsFolder[]>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClips(options?: any): AxiosPromise<Clip[]>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipsFolder(clipID: string, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    unclipMessage(clipID: string, options?: any): AxiosPromise<Response>;
}
/**
 * FileApi - axios parameter creator
 * @export
 */
export declare const FileApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileID: string, options?: any): RequestArgs;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileID: string, dl?: number, options?: any): RequestArgs;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileID: string, options?: any): RequestArgs;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileThumbnail(fileID: string, options?: any): RequestArgs;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(file: any, aclReadable?: string, options?: any): RequestArgs;
};
/**
 * FileApi - functional programming interface
 * @export
 */
export declare const FileApiFp: (configuration?: Configuration) => {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileID: string, dl?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileThumbnail(fileID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(file: any, aclReadable?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>;
};
/**
 * FileApi - factory interface
 * @export
 */
export declare const FileApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(fileID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFile(fileID: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileMeta(fileID: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileThumbnail(fileID: string, options?: any): AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFile(file: any, aclReadable?: string, options?: any): AxiosPromise<FileInfo>;
};
/**
 * FileApi - object-oriented interface
 * @export
 * @class FileApi
 * @extends {BaseAPI}
 */
export declare class FileApi extends BaseAPI {
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    deleteFile(fileID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFile(fileID: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFileMeta(fileID: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFileThumbnail(fileID: string, options?: any): AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    uploadFile(file: any, aclReadable?: string, options?: any): AxiosPromise<FileInfo>;
}
/**
 * HeartbeatApi - axios parameter creator
 * @export
 */
export declare const HeartbeatApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHeartbeat(channelId: string, options?: any): RequestArgs;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {Heartbeat} [heartbeat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postHeartbeat(heartbeat?: Heartbeat, options?: any): RequestArgs;
};
/**
 * HeartbeatApi - functional programming interface
 * @export
 */
export declare const HeartbeatApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHeartbeat(channelId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {Heartbeat} [heartbeat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postHeartbeat(heartbeat?: Heartbeat, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * HeartbeatApi - factory interface
 * @export
 */
export declare const HeartbeatApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHeartbeat(channelId: string, options?: any): AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {Heartbeat} [heartbeat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postHeartbeat(heartbeat?: Heartbeat, options?: any): AxiosPromise<Response>;
};
/**
 * HeartbeatApi - object-oriented interface
 * @export
 * @class HeartbeatApi
 * @extends {BaseAPI}
 */
export declare class HeartbeatApi extends BaseAPI {
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    getHeartbeat(channelId: string, options?: any): AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {Heartbeat} [heartbeat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    postHeartbeat(heartbeat?: Heartbeat, options?: any): AxiosPromise<Response>;
}
/**
 * MessageApi - axios parameter creator
 * @export
 */
export declare const MessageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageID: string, options?: any): RequestArgs;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(messageID: string, sendMessage?: SendMessage, options?: any): RequestArgs;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageID: string, options?: any): RequestArgs;
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): RequestArgs;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(p?: number, options?: any): RequestArgs;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userID: string, sendMessage?: SendMessage, options?: any): RequestArgs;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelID: string, sendMessage?: SendMessage, options?: any): RequestArgs;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {ReportMessage} [reportMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportMessage(messageID: string, reportMessage?: ReportMessage, options?: any): RequestArgs;
};
/**
 * MessageApi - functional programming interface
 * @export
 */
export declare const MessageApiFp: (configuration?: Configuration) => {
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(messageID: string, sendMessage?: SendMessage, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message[]>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(p?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userID: string, sendMessage?: SendMessage, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelID: string, sendMessage?: SendMessage, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Message>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {ReportMessage} [reportMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportMessage(messageID: string, reportMessage?: ReportMessage, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * MessageApi - factory interface
 * @export
 */
export declare const MessageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteMessage(messageID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editMessage(messageID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Response>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDirectMessages(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessage(messageID: string, options?: any): AxiosPromise<Message>;
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessages(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: "desc" | "asc", options?: any): AxiosPromise<Message[]>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReports(p?: number, options?: any): AxiosPromise<Report[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDirectMessage(userID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Message>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postMessage(channelID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {ReportMessage} [reportMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reportMessage(messageID: string, reportMessage?: ReportMessage, options?: any): AxiosPromise<Response>;
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export declare class MessageApi extends BaseAPI {
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    deleteMessage(messageID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    editMessage(messageID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Response>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getDirectMessages(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessage(messageID: string, options?: any): AxiosPromise<Message>;
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessages(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getReports(p?: number, options?: any): AxiosPromise<Report[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postDirectMessage(userID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Message>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postMessage(channelID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {ReportMessage} [reportMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    reportMessage(messageID: string, reportMessage?: ReportMessage, options?: any): AxiosPromise<Response>;
}
/**
 * MuteApi - axios parameter creator
 * @export
 */
export declare const MuteApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMutedChannels(options?: any): RequestArgs;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteChannel(channelID: string, options?: any): RequestArgs;
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteChannel(channelID: string, options?: any): RequestArgs;
};
/**
 * MuteApi - functional programming interface
 * @export
 */
export declare const MuteApiFp: (configuration?: Configuration) => {
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMutedChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteChannel(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteChannel(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * MuteApi - factory interface
 * @export
 */
export declare const MuteApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMutedChannels(options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteChannel(channelID: string, options?: any): AxiosPromise<Response>;
};
/**
 * MuteApi - object-oriented interface
 * @export
 * @class MuteApi
 * @extends {BaseAPI}
 */
export declare class MuteApi extends BaseAPI {
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    getMutedChannels(options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    muteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    unmuteChannel(channelID: string, options?: any): AxiosPromise<Response>;
}
/**
 * NotificationApi - axios parameter creator
 * @export
 */
export declare const NotificationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {NotificationUsers} [notificationUsers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSubscribers(channelID: string, notificationUsers?: NotificationUsers, options?: any): RequestArgs;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectNotification(options?: any): RequestArgs;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySubscribeChannels(options?: any): RequestArgs;
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscribers(channelID: string, options?: any): RequestArgs;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSubscribeChannels(userID: string, options?: any): RequestArgs;
    /**
     * FCMデバイスを登録します。
     * @param {FCMToken} [fCMToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNotificationDevice(fCMToken?: FCMToken, options?: any): RequestArgs;
};
/**
 * NotificationApi - functional programming interface
 * @export
 */
export declare const NotificationApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {NotificationUsers} [notificationUsers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSubscribers(channelID: string, notificationUsers?: NotificationUsers, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectNotification(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySubscribeChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscribers(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSubscribeChannels(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * FCMデバイスを登録します。
     * @param {FCMToken} [fCMToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNotificationDevice(fCMToken?: FCMToken, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * NotificationApi - factory interface
 * @export
 */
export declare const NotificationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {NotificationUsers} [notificationUsers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSubscribers(channelID: string, notificationUsers?: NotificationUsers, options?: any): AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectNotification(options?: any): AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMySubscribeChannels(options?: any): AxiosPromise<string[]>;
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscribers(channelID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSubscribeChannels(userID: string, options?: any): AxiosPromise<string[]>;
    /**
     * FCMデバイスを登録します。
     * @param {FCMToken} [fCMToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerNotificationDevice(fCMToken?: FCMToken, options?: any): AxiosPromise<Response>;
};
/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export declare class NotificationApi extends BaseAPI {
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {NotificationUsers} [notificationUsers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    changeSubscribers(channelID: string, notificationUsers?: NotificationUsers, options?: any): AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    connectNotification(options?: any): AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getMySubscribeChannels(options?: any): AxiosPromise<string[]>;
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getSubscribers(channelID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getUserSubscribeChannels(userID: string, options?: any): AxiosPromise<string[]>;
    /**
     * FCMデバイスを登録します。
     * @param {FCMToken} [fCMToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    registerNotificationDevice(fCMToken?: FCMToken, options?: any): AxiosPromise<Response>;
}
/**
 * PinApi - axios parameter creator
 * @export
 */
export declare const PinApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPinnedMessage(pinID: string, options?: any): RequestArgs;
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPinnedMessages(channelID: string, options?: any): RequestArgs;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {MessageIDObject} [messageIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinMessage(messageIDObject?: MessageIDObject, options?: any): RequestArgs;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unpinMessage(pinID: string, options?: any): RequestArgs;
};
/**
 * PinApi - functional programming interface
 * @export
 */
export declare const PinApiFp: (configuration?: Configuration) => {
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPinnedMessage(pinID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin>;
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPinnedMessages(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Pin[]>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {MessageIDObject} [messageIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinMessage(messageIDObject?: MessageIDObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PinIDObject>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unpinMessage(pinID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * PinApi - factory interface
 * @export
 */
export declare const PinApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPinnedMessage(pinID: string, options?: any): AxiosPromise<Pin>;
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPinnedMessages(channelID: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {MessageIDObject} [messageIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinMessage(messageIDObject?: MessageIDObject, options?: any): AxiosPromise<PinIDObject>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unpinMessage(pinID: string, options?: any): AxiosPromise<Response>;
};
/**
 * PinApi - object-oriented interface
 * @export
 * @class PinApi
 * @extends {BaseAPI}
 */
export declare class PinApi extends BaseAPI {
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getPinnedMessage(pinID: string, options?: any): AxiosPromise<Pin>;
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getPinnedMessages(channelID: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {MessageIDObject} [messageIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinMessage(messageIDObject?: MessageIDObject, options?: any): AxiosPromise<PinIDObject>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    unpinMessage(pinID: string, options?: any): AxiosPromise<Response>;
}
/**
 * PublicApi - axios parameter creator
 * @export
 */
export declare const PublicApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicUserIcon(username: string, options?: any): RequestArgs;
};
/**
 * PublicApi - functional programming interface
 * @export
 */
export declare const PublicApiFp: (configuration?: Configuration) => {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicUserIcon(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
};
/**
 * PublicApi - factory interface
 * @export
 */
export declare const PublicApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPublicUserIcon(username: string, options?: any): AxiosPromise<any>;
};
/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export declare class PublicApi extends BaseAPI {
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getPublicUserIcon(username: string, options?: any): AxiosPromise<any>;
}
/**
 * SessionsApi - axios parameter creator
 * @export
 */
export declare const SessionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(referenceID: string, options?: any): RequestArgs;
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSessions(options?: any): RequestArgs;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessions(options?: any): RequestArgs;
};
/**
 * SessionsApi - functional programming interface
 * @export
 */
export declare const SessionsApiFp: (configuration?: Configuration) => {
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(referenceID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSessions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session[]>;
};
/**
 * SessionsApi - factory interface
 * @export
 */
export declare const SessionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(referenceID: string, options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSessions(options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessions(options?: any): AxiosPromise<Session[]>;
};
/**
 * SessionsApi - object-oriented interface
 * @export
 * @class SessionsApi
 * @extends {BaseAPI}
 */
export declare class SessionsApi extends BaseAPI {
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    deleteSession(referenceID: string, options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    deleteSessions(options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    getSessions(options?: any): AxiosPromise<Session[]>;
}
/**
 * StampApi - axios parameter creator
 * @export
 */
export declare const StampApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: any, options?: any): RequestArgs;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampID: string, options?: any): RequestArgs;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(stampID: string, name?: string, file?: any, options?: any): RequestArgs;
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageID: string, options?: any): RequestArgs;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampID: string, options?: any): RequestArgs;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampHistory(options?: any): RequestArgs;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(options?: any): RequestArgs;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {MessageStampPost} [messageStampPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampMessage(messageID: string, stampID: string, messageStampPost?: MessageStampPost, options?: any): RequestArgs;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstampMessage(messageID: string, stampID: string, options?: any): RequestArgs;
};
/**
 * StampApi - functional programming interface
 * @export
 */
export declare const StampApiFp: (configuration?: Configuration) => {
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(stampID: string, name?: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageStamp[]>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampHistory(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StampHistory[]>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {MessageStampPost} [messageStampPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampMessage(messageID: string, stampID: string, messageStampPost?: MessageStampPost, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstampMessage(messageID: string, stampID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * StampApi - factory interface
 * @export
 */
export declare const StampApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStamp(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStamp(stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editStamp(stampID: string, name?: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMessageStamps(messageID: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamp(stampID: string, options?: any): AxiosPromise<Stamp>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStampHistory(options?: any): AxiosPromise<StampHistory[]>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStamps(options?: any): AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {MessageStampPost} [messageStampPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stampMessage(messageID: string, stampID: string, messageStampPost?: MessageStampPost, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstampMessage(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
};
/**
 * StampApi - object-oriented interface
 * @export
 * @class StampApi
 * @extends {BaseAPI}
 */
export declare class StampApi extends BaseAPI {
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    createStamp(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    deleteStamp(stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStamp(stampID: string, name?: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getMessageStamps(messageID: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamp(stampID: string, options?: any): AxiosPromise<Stamp>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampHistory(options?: any): AxiosPromise<StampHistory[]>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamps(options?: any): AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {MessageStampPost} [messageStampPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampMessage(messageID: string, stampID: string, messageStampPost?: MessageStampPost, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    unstampMessage(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
}
/**
 * StarApi - axios parameter creator
 * @export
 */
export declare const StarApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStaredChannels(options?: any): RequestArgs;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starChannel(channelID: string, options?: any): RequestArgs;
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarChannel(channelID: string, options?: any): RequestArgs;
};
/**
 * StarApi - functional programming interface
 * @export
 */
export declare const StarApiFp: (configuration?: Configuration) => {
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStaredChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starChannel(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarChannel(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * StarApi - factory interface
 * @export
 */
export declare const StarApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStaredChannels(options?: any): AxiosPromise<string[]>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    starChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unstarChannel(channelID: string, options?: any): AxiosPromise<Response>;
};
/**
 * StarApi - object-oriented interface
 * @export
 * @class StarApi
 * @extends {BaseAPI}
 */
export declare class StarApi extends BaseAPI {
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    getStaredChannels(options?: any): AxiosPromise<string[]>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    starChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    unstarChannel(channelID: string, options?: any): AxiosPromise<Response>;
}
/**
 * UnreadApi - axios parameter creator
 * @export
 */
export declare const UnreadApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnreadChannels(options?: any): RequestArgs;
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMessages(channelID: string, options?: any): RequestArgs;
};
/**
 * UnreadApi - functional programming interface
 * @export
 */
export declare const UnreadApiFp: (configuration?: Configuration) => {
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnreadChannels(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnreadChannel[]>;
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMessages(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * UnreadApi - factory interface
 * @export
 */
export declare const UnreadApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    readMessages(channelID: string, options?: any): AxiosPromise<Response>;
};
/**
 * UnreadApi - object-oriented interface
 * @export
 * @class UnreadApi
 * @extends {BaseAPI}
 */
export declare class UnreadApi extends BaseAPI {
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    getUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    readMessages(channelID: string, options?: any): AxiosPromise<Response>;
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 自分のユーザー情報を変更します。
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMe(userData?: UserData, options?: any): RequestArgs;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file?: any, options?: any): RequestArgs;
    /**
     * 自分のパスワードを変更します。
     * @param {ChangePassword} [changePassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePassword?: ChangePassword, options?: any): RequestArgs;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): RequestArgs;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): RequestArgs;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQrCode(options?: any): RequestArgs;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userID: string, options?: any): RequestArgs;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userID: string, options?: any): RequestArgs;
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): RequestArgs;
    /**
     * ユーザー登録します
     * @param {UserRegister} [userRegister]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(userRegister?: UserRegister, options?: any): RequestArgs;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: Configuration) => {
    /**
     * 自分のユーザー情報を変更します。
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMe(userData?: UserData, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {ChangePassword} [changePassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePassword?: ChangePassword, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQrCode(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User[]>;
    /**
     * ユーザー登録します
     * @param {UserRegister} [userRegister]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(userRegister?: UserRegister, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * UserApi - factory interface
 * @export
 */
export declare const UserApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 自分のユーザー情報を変更します。
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMe(userData?: UserData, options?: any): AxiosPromise<Response>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeMyIcon(file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {ChangePassword} [changePassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePassword(changePassword?: ChangePassword, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMe(options?: any): AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyIcon(options?: any): AxiosPromise<any>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQrCode(options?: any): AxiosPromise<any>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userID: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserIcon(userID: string, options?: any): AxiosPromise<any>;
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<User[]>;
    /**
     * ユーザー登録します
     * @param {UserRegister} [userRegister]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerUser(userRegister?: UserRegister, options?: any): AxiosPromise<Response>;
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI {
    /**
     * 自分のユーザー情報を変更します。
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeMe(userData?: UserData, options?: any): AxiosPromise<Response>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeMyIcon(file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {ChangePassword} [changePassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changePassword(changePassword?: ChangePassword, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getMe(options?: any): AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getMyIcon(options?: any): AxiosPromise<any>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getQrCode(options?: any): AxiosPromise<any>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(userID: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserIcon(userID: string, options?: any): AxiosPromise<any>;
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUsers(options?: any): AxiosPromise<User[]>;
    /**
     * ユーザー登録します
     * @param {UserRegister} [userRegister]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    registerUser(userRegister?: UserRegister, options?: any): AxiosPromise<Response>;
}
/**
 * UserGroupApi - axios parameter creator
 * @export
 */
export declare const UserGroupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {AddUserGroup} [addUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroupMember(groupID: string, addUserGroup?: AddUserGroup, options?: any): RequestArgs;
    /**
     * ユーザーグループを作成します
     * @param {PostUserGroup} [postUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(postUserGroup?: PostUserGroup, options?: any): RequestArgs;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(groupID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupMember(groupID: string, userID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {PatchUserGroup} [patchUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editGroup(groupID: string, patchUserGroup?: PatchUserGroup, options?: any): RequestArgs;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(groupID: string, options?: any): RequestArgs;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupMembers(groupID: string, options?: any): RequestArgs;
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(options?: any): RequestArgs;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyGroups(options?: any): RequestArgs;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(userID: string, options?: any): RequestArgs;
};
/**
 * UserGroupApi - functional programming interface
 * @export
 */
export declare const UserGroupApiFp: (configuration?: Configuration) => {
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {AddUserGroup} [addUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroupMember(groupID: string, addUserGroup?: AddUserGroup, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {PostUserGroup} [postUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(postUserGroup?: PostUserGroup, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(groupID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupMember(groupID: string, userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {PatchUserGroup} [patchUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editGroup(groupID: string, patchUserGroup?: PatchUserGroup, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(groupID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupMembers(groupID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGroup[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyGroups(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string[]>;
};
/**
 * UserGroupApi - factory interface
 * @export
 */
export declare const UserGroupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {AddUserGroup} [addUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addGroupMember(groupID: string, addUserGroup?: AddUserGroup, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {PostUserGroup} [postUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createGroup(postUserGroup?: PostUserGroup, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroup(groupID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteGroupMember(groupID: string, userID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {PatchUserGroup} [patchUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editGroup(groupID: string, patchUserGroup?: PatchUserGroup, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroup(groupID: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroupMembers(groupID: string, options?: any): AxiosPromise<string[]>;
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGroups(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMyGroups(options?: any): AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserGroups(userID: string, options?: any): AxiosPromise<string[]>;
};
/**
 * UserGroupApi - object-oriented interface
 * @export
 * @class UserGroupApi
 * @extends {BaseAPI}
 */
export declare class UserGroupApi extends BaseAPI {
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {AddUserGroup} [addUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    addGroupMember(groupID: string, addUserGroup?: AddUserGroup, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {PostUserGroup} [postUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    createGroup(postUserGroup?: PostUserGroup, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    deleteGroup(groupID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    deleteGroupMember(groupID: string, userID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {PatchUserGroup} [patchUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    editGroup(groupID: string, patchUserGroup?: PatchUserGroup, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getGroup(groupID: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getGroupMembers(groupID: string, options?: any): AxiosPromise<string[]>;
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getGroups(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getMyGroups(options?: any): AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getUserGroups(userID: string, options?: any): AxiosPromise<string[]>;
}
/**
 * UserTagApi - axios parameter creator
 * @export
 */
export declare const UserTagApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SetTag} [setTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userID: string, setTag?: SetTag, options?: any): RequestArgs;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {SetTagLock} [setTagLock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeLockUserTag(userID: string, tagID: string, setTagLock?: SetTagLock, options?: any): RequestArgs;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserTag(userID: string, tagID: string, options?: any): RequestArgs;
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagID: string, options?: any): RequestArgs;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userID: string, options?: any): RequestArgs;
};
/**
 * UserTagApi - functional programming interface
 * @export
 */
export declare const UserTagApiFp: (configuration?: Configuration) => {
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SetTag} [setTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userID: string, setTag?: SetTag, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {SetTagLock} [setTagLock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeLockUserTag(userID: string, tagID: string, setTagLock?: SetTagLock, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserTag(userID: string, tagID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagUsers>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag[]>;
};
/**
 * UserTagApi - factory interface
 * @export
 */
export declare const UserTagApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SetTag} [setTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserTag(userID: string, setTag?: SetTag, options?: any): AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {SetTagLock} [setTagLock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeLockUserTag(userID: string, tagID: string, setTagLock?: SetTagLock, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserTag(userID: string, tagID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTag(tagID: string, options?: any): AxiosPromise<TagUsers>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserTags(userID: string, options?: any): AxiosPromise<Tag[]>;
};
/**
 * UserTagApi - object-oriented interface
 * @export
 * @class UserTagApi
 * @extends {BaseAPI}
 */
export declare class UserTagApi extends BaseAPI {
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SetTag} [setTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    addUserTag(userID: string, setTag?: SetTag, options?: any): AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {SetTagLock} [setTagLock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    changeLockUserTag(userID: string, tagID: string, setTagLock?: SetTagLock, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    deleteUserTag(userID: string, tagID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getTag(tagID: string, options?: any): AxiosPromise<TagUsers>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getUserTags(userID: string, options?: any): AxiosPromise<Tag[]>;
}
/**
 * WebhookApi - axios parameter creator
 * @export
 */
export declare const WebhookApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(webhookID: string, file?: any, options?: any): RequestArgs;
    /**
     * webhookを作成します。
     * @param {PostWebhook} [postWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhooks(postWebhook?: PostWebhook, options?: any): RequestArgs;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookID: string, options?: any): RequestArgs;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {PatchWebhook} [patchWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(webhookID: string, patchWebhook?: PatchWebhook, options?: any): RequestArgs;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookID: string, options?: any): RequestArgs;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookID: string, options?: any): RequestArgs;
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(options?: any): RequestArgs;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGitHubWebhook(webhookID: string, body?: object, options?: any): RequestArgs;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): RequestArgs;
};
/**
 * WebhookApi - functional programming interface
 * @export
 */
export declare const WebhookApiFp: (configuration?: Configuration) => {
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(webhookID: string, file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookを作成します。
     * @param {PostWebhook} [postWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhooks(postWebhook?: PostWebhook, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {PatchWebhook} [patchWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(webhookID: string, patchWebhook?: PatchWebhook, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>;
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Webhook[]>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGitHubWebhook(webhookID: string, body?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * WebhookApi - factory interface
 * @export
 */
export declare const WebhookApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeWebhookIcon(webhookID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * webhookを作成します。
     * @param {PostWebhook} [postWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWebhooks(postWebhook?: PostWebhook, options?: any): AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWebhook(webhookID: string, options?: any): AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {PatchWebhook} [patchWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editWebhook(webhookID: string, patchWebhook?: PatchWebhook, options?: any): AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhook(webhookID: string, options?: any): AxiosPromise<Webhook>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhookIcon(webhookID: string, options?: any): AxiosPromise<any>;
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebhooks(options?: any): AxiosPromise<Webhook[]>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postGitHubWebhook(webhookID: string, body?: object, options?: any): AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWebhook(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): AxiosPromise<Response>;
};
/**
 * WebhookApi - object-oriented interface
 * @export
 * @class WebhookApi
 * @extends {BaseAPI}
 */
export declare class WebhookApi extends BaseAPI {
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    changeWebhookIcon(webhookID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * webhookを作成します。
     * @param {PostWebhook} [postWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    createWebhooks(postWebhook?: PostWebhook, options?: any): AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    deleteWebhook(webhookID: string, options?: any): AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {PatchWebhook} [patchWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    editWebhook(webhookID: string, patchWebhook?: PatchWebhook, options?: any): AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhook(webhookID: string, options?: any): AxiosPromise<Webhook>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhookIcon(webhookID: string, options?: any): AxiosPromise<any>;
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhooks(options?: any): AxiosPromise<Webhook[]>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    postGitHubWebhook(webhookID: string, body?: object, options?: any): AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    postWebhook(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): AxiosPromise<Response>;
}
/**
 * WebrtcApi - axios parameter creator
 * @export
 */
export declare const WebrtcApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * チャンネルのWebRTC状態を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelWebRTCState(channelID: string, options?: any): RequestArgs;
    /**
     * 自身のWebRTCの状態を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebRTCState(options?: any): RequestArgs;
    /**
     * 自身のWebRTCの状態を変更します。
     * @param {PutWebRTCState} [putWebRTCState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWebRTCState(putWebRTCState?: PutWebRTCState, options?: any): RequestArgs;
};
/**
 * WebrtcApi - functional programming interface
 * @export
 */
export declare const WebrtcApiFp: (configuration?: Configuration) => {
    /**
     * チャンネルのWebRTC状態を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelWebRTCState(channelID: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebRTCChannelState>;
    /**
     * 自身のWebRTCの状態を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebRTCState(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebRTCUserState>;
    /**
     * 自身のWebRTCの状態を変更します。
     * @param {PutWebRTCState} [putWebRTCState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWebRTCState(putWebRTCState?: PutWebRTCState, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>;
};
/**
 * WebrtcApi - factory interface
 * @export
 */
export declare const WebrtcApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * チャンネルのWebRTC状態を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChannelWebRTCState(channelID: string, options?: any): AxiosPromise<WebRTCChannelState>;
    /**
     * 自身のWebRTCの状態を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWebRTCState(options?: any): AxiosPromise<WebRTCUserState>;
    /**
     * 自身のWebRTCの状態を変更します。
     * @param {PutWebRTCState} [putWebRTCState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWebRTCState(putWebRTCState?: PutWebRTCState, options?: any): AxiosPromise<Response>;
};
/**
 * WebrtcApi - object-oriented interface
 * @export
 * @class WebrtcApi
 * @extends {BaseAPI}
 */
export declare class WebrtcApi extends BaseAPI {
    /**
     * チャンネルのWebRTC状態を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    getChannelWebRTCState(channelID: string, options?: any): AxiosPromise<WebRTCChannelState>;
    /**
     * 自身のWebRTCの状態を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    getWebRTCState(options?: any): AxiosPromise<WebRTCUserState>;
    /**
     * 自身のWebRTCの状態を変更します。
     * @param {PutWebRTCState} [putWebRTCState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    putWebRTCState(putWebRTCState?: PutWebRTCState, options?: any): AxiosPromise<Response>;
}
export declare class Apis extends BaseAPI {
    /**
     * 各チャンネルの最新のメッセージ１件をメッセージ作成日時の降順で取得します。
     * @param {number} [limit] 取得する件数 1-50
     * @param {boolean} [subscribe] 購読チャンネルのみを取得する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    getActivities(limit?: number, subscribe?: boolean, options?: any): AxiosPromise<Message[]>;
    /**
     * ログインを行います。リダイレクトパラメーターが存在する場合はログイン後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {UserLogin} [userLogin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    login(redirect?: string, userLogin?: UserLogin, options?: any): AxiosPromise<Response>;
    /**
     * ログアウトを行います。リダイレクトパラメーターが存在する場合はログアウト後にリダイレクトします
     * @param {string} [redirect] リダイレクト先
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    logout(redirect?: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    getOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可エンドポイント
     * @param {OAuth2ResponseType} [responseType]
     * @param {string} [clientId]
     * @param {string} [redirectUri]
     * @param {string} [scope]
     * @param {string} [state]
     * @param {string} [codeChallenge]
     * @param {string} [codeChallengeMethod]
     * @param {string} [nonce]
     * @param {OAuth2Prompt} [prompt]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    postOauth2Authorize(responseType?: OAuth2ResponseType, clientId?: string, redirectUri?: string, scope?: string, state?: string, codeChallenge?: string, codeChallengeMethod?: string, nonce?: string, prompt?: OAuth2Prompt, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 認可承諾
     * @param {string} submit 承諾する場合は\\\&quot;approve\\\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    postOauth2AuthorizeDecide(submit: string, options?: any): AxiosPromise<Response>;
    /**
     * OAuth2 トークンエンドポイント
     * @param {string} grantType
     * @param {string} [code]
     * @param {string} [redirectUri]
     * @param {string} [clientId]
     * @param {string} [codeVerifier]
     * @param {string} [username]
     * @param {string} [password]
     * @param {string} [scope]
     * @param {string} [refreshToken]
     * @param {string} [clientSecret]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApi
     */
    postOauth2Token(grantType: string, code?: string, redirectUri?: string, clientId?: string, codeVerifier?: string, username?: string, password?: string, scope?: string, refreshToken?: string, clientSecret?: string, options?: any): AxiosPromise<OAuth2Token>;
    /**
     * チャンネルにBotを参加させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PostBotChannel} [postBotChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    addChannelBot(channelID: string, postBotChannel?: PostBotChannel, options?: any): AxiosPromise<BotIdObject>;
    /**
     * Botの購読イベントを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotEvents} [putBotEvents]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotEvents(botID: string, putBotEvents?: PutBotEvents, options?: any): AxiosPromise<Response>;
    /**
     * 指定したBotのアイコンを変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {any} [file] Botユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotIcon(botID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * Botの状態を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PutBotState} [putBotState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    changeBotState(botID: string, putBotState?: PutBotState, options?: any): AxiosPromise<Response>;
    /**
     * Botを作成します。
     * @param {PostBot} [postBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    createBots(postBot?: PostBot, options?: any): AxiosPromise<BotDetail>;
    /**
     * Botを削除します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    deleteBot(botID: string, options?: any): AxiosPromise<Response>;
    /**
     * Bot情報を変更します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {PatchBot} [patchBot]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    editBot(botID: string, patchBot?: PatchBot, options?: any): AxiosPromise<Response>;
    /**
     * Botを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBot(botID: string, options?: any): AxiosPromise<Bot>;
    /**
     * Botが参加しているチャンネルのUUIDの配列を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotChannels(botID: string, options?: any): AxiosPromise<string[]>;
    /**
     * Botの詳細を取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotDetail(botID: string, options?: any): AxiosPromise<BotDetail>;
    /**
     * 指定したBotのアイコンを取得します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBotIcon(botID: string, options?: any): AxiosPromise<any>;
    /**
     * 自分が作成したBotの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getBots(options?: any): AxiosPromise<Bot[]>;
    /**
     * チャンネルに参加しているBot一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    getChannelBots(channelID: string, options?: any): AxiosPromise<ChannelBot[]>;
    /**
     * Botの各種トークンを再発行します。
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    reissueBotTokens(botID: string, options?: any): AxiosPromise<BotTokens>;
    /**
     * Botをチャンネルから退出させます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {string} botID 操作の対象となるBotのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BotApi
     */
    removeChannelBot(channelID: string, botID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの親チャンネルを変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PutParentChannel} [putParentChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    changeChannelParent(channelID: string, putParentChannel?: PutParentChannel, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの説明を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SetChannelTopic} [setChannelTopic]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    changeChannelTopic(channelID: string, setChannelTopic?: SetChannelTopic, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルを作成します。
     * @param {CreateChannel} [createChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    createChannel(createChannel?: CreateChannel, options?: any): AxiosPromise<Channel>;
    /**
     * 子チャンネルを作成します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {CreateChannelChild} [createChannelChild]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    createChannelChild(channelID: string, createChannelChild?: CreateChannelChild, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルを削除します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    deleteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を変更します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {PatchChannel} [patchChannel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    editChannel(channelID: string, patchChannel?: PatchChannel, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの情報を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannel(channelID: string, options?: any): AxiosPromise<Channel>;
    /**
     * チャンネルイベントのリストを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelEvents(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<ChannelEvent[]>;
    /**
     * チャンネルの説明を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannelTopic(channelID: string, options?: any): AxiosPromise<ChannelTopic>;
    /**
     * (すべての)チャンネルのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    getChannels(options?: any): AxiosPromise<Channel[]>;
    /**
     * クライアントを登録します。
     * @param {PostClient} [postClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    createClient(postClient?: PostClient, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 指定したクライアントIDのクライアントを削除します。 正常に削除された場合、このクライアントを通じての認可は全て取り消されます。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    deleteClient(clientID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したトークンの認可を取り消します。
     * @param {string} oauth2TokenID 操作の対象となるTokenのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    deleteToken(oauth2TokenID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクライアントIDのクライアントの情報を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getClient(clientID: string, options?: any): AxiosPromise<ClientInfo>;
    /**
     * クライアントの詳細を取得します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getClientDetail(clientID: string, options?: any): AxiosPromise<OwnedClientInfo>;
    /**
     * 自分が登録しているクライアントの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getClients(options?: any): AxiosPromise<OwnedClientInfo[]>;
    /**
     * 自分が許可しているクライアントの一覧とトークン情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    getTokens(options?: any): AxiosPromise<AllowedClientInfo[]>;
    /**
     * 指定したクライアントIDのクライアントの情報を変更します。
     * @param {string} clientID 操作の対象となるclientのID
     * @param {PatchClient} [patchClient]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientApi
     */
    patchClient(clientID: string, patchClient?: PatchClient, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのフォルダを変更します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {ClipsFolderIDObject} [clipsFolderIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    changeClipsFolder(clipID: string, clipsFolderIDObject?: ClipsFolderIDObject, options?: any): AxiosPromise<Response>;
    /**
     * 新しくメッセージをクリップします。
     * @param {SetClip} [setClip]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    clipMessage(setClip?: SetClip, options?: any): AxiosPromise<ClipIDObject>;
    /**
     * クリップフォルダを作成します。
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    createClipFolder(clipsFolderNameObject?: ClipsFolderNameObject, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * クリップフォルダを削除します。フォルダ内のクリップは全て削除されます。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    deleteClipFolder(folderID: string, options?: any): AxiosPromise<Response>;
    /**
     * クリップフォルダ名を変更します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {ClipsFolderNameObject} [clipsFolderNameObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    editClipFolder(folderID: string, clipsFolderNameObject?: ClipsFolderNameObject, options?: any): AxiosPromise<Response>;
    /**
     * 指定したクリップのメッセージを取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClip(clipID: string, options?: any): AxiosPromise<Message>;
    /**
     * フォルダ内のクリップ一覧を取得します。
     * @param {string} folderID 操作の対象となるクリップフォルダのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolder(folderID: string, options?: any): AxiosPromise<ClipOfFolder[]>;
    /**
     * クリップフォルダ一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipFolders(options?: any): AxiosPromise<ClipsFolder[]>;
    /**
     * 全てのクリップを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClips(options?: any): AxiosPromise<Clip[]>;
    /**
     * 指定したクリップのフォルダ情報を取得します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    getClipsFolder(clipID: string, options?: any): AxiosPromise<ClipsFolder>;
    /**
     * 指定したクリップを削除します。
     * @param {string} clipID 捜査の対象となるクリップのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipApi
     */
    unclipMessage(clipID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルを削除します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    deleteFile(fileID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したファイルの中身を取得します。
     * @param {string} fileID 操作の対象となるファイルID
     * @param {number} [dl] ファイルをダウンロードする場合に1を指定する
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFile(fileID: string, dl?: number, options?: any): AxiosPromise<any>;
    /**
     * 指定したファイルのメタデータを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFileMeta(fileID: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * 指定したファイルのサムネイルを取得します
     * @param {string} fileID 操作の対象となるファイルID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    getFileThumbnail(fileID: string, options?: any): AxiosPromise<any>;
    /**
     * ファイルをアップロードします
     * @param {any} file ファイル本体
     * @param {string} [aclReadable] ファイルにアクセスすることが可能なユーザーのUUIDの文字列表現をカンマ区切りで連結した文字列、または\\\&#39;all\\\&#39;(デフォルト)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileApi
     */
    uploadFile(file: any, aclReadable?: string, options?: any): AxiosPromise<FileInfo>;
    /**
     * チャンネルを現在見ている人・編集している人を取得します。
     * @param {string} channelId 現在いるチャンネルId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    getHeartbeat(channelId: string, options?: any): AxiosPromise<HeartbeatRes>;
    /**
     * どのチャンネルを見ているか・編集しているかを送信します。
     * @param {Heartbeat} [heartbeat]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HeartbeatApi
     */
    postHeartbeat(heartbeat?: Heartbeat, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを削除します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    deleteMessage(messageID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージを編集します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    editMessage(messageID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Response>;
    /**
     * DMチャンネルに存在するメッセージを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getDirectMessages(userID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * 指定したメッセージを取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessage(messageID: string, options?: any): AxiosPromise<Message>;
    /**
     * チャンネルに存在するメッセージを取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {number} [limit] 取得する件数 1-200
     * @param {number} [offset] 取得するオフセット
     * @param {Date} [since] 取得する時間範囲の開始日時
     * @param {Date} [until] 取得する時間範囲の終了日時
     * @param {boolean} [inclusive] 範囲の端を含めるかどうか
     * @param {'asc' | 'desc'} [order] 昇順か降順か
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessages(channelID: string, limit?: number, offset?: number, since?: Date, until?: Date, inclusive?: boolean, order?: 'asc' | 'desc', options?: any): AxiosPromise<Message[]>;
    /**
     * メッセージ通報を最大50件取得します。
     * @param {number} [p] ページ番号(ゼロオリジン)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getReports(p?: number, options?: any): AxiosPromise<Report[]>;
    /**
     * DMチャンネルにメッセージを投稿します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postDirectMessage(userID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Message>;
    /**
     * チャンネルにメッセージを投稿します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {SendMessage} [sendMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    postMessage(channelID: string, sendMessage?: SendMessage, options?: any): AxiosPromise<Message>;
    /**
     * 指定したメッセージを通報します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {ReportMessage} [reportMessage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    reportMessage(messageID: string, reportMessage?: ReportMessage, options?: any): AxiosPromise<Response>;
    /**
     * ミュートしているチャンネルのIDの配列を返します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    getMutedChannels(options?: any): AxiosPromise<string[]>;
    /**
     * 指定したチャンネルをミュートします。ただし、強制通知チャンネルはミュートできません。既にミュートしていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    muteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したチャンネルのミュートを解除します。既に解除されていた場合は204を返します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MuteApi
     */
    unmuteChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルの通知状況を変更します。 リクエストに含めなかったユーザーIDのユーザーの通知状況は変更しません。 また、存在しないユーザーのIDを指定した場合は無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {NotificationUsers} [notificationUsers]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    changeSubscribers(channelID: string, notificationUsers?: NotificationUsers, options?: any): AxiosPromise<Response>;
    /**
     * 通知ストリーム(Server Sent Events)に接続します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    connectNotification(options?: any): AxiosPromise<Response>;
    /**
     * 自分が通知を入れているチャンネルのリストを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getMySubscribeChannels(options?: any): AxiosPromise<string[]>;
    /**
     * 通知を点けているユーザーのIDの配列を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getSubscribers(channelID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーが通知を入れているチャンネルのリストを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    getUserSubscribeChannels(userID: string, options?: any): AxiosPromise<string[]>;
    /**
     * FCMデバイスを登録します。
     * @param {FCMToken} [fCMToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    registerNotificationDevice(fCMToken?: FCMToken, options?: any): AxiosPromise<Response>;
    /**
     * ピン留めを取得します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getPinnedMessage(pinID: string, options?: any): AxiosPromise<Pin>;
    /**
     * チャンネルのピン留め一覧を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    getPinnedMessages(channelID: string, options?: any): AxiosPromise<Pin[]>;
    /**
     * チャンネルにメッセージをピン留めします。
     * @param {MessageIDObject} [messageIDObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    pinMessage(messageIDObject?: MessageIDObject, options?: any): AxiosPromise<PinIDObject>;
    /**
     * ピン留めを外します。
     * @param {string} pinID 操作の対象となるピン留めID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PinApi
     */
    unpinMessage(pinID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定したユーザーのアイコン画像を取得します。
     * @param {string} username 画像を取得するユーザーのユーザー名
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    getPublicUserIcon(username: string, options?: any): AxiosPromise<any>;
    /**
     * 対象のセッションをログアウトします。
     * @param {string} referenceID 操作の対象となるセッションの参照ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    deleteSession(referenceID: string, options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションを全てログアウトします。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    deleteSessions(options?: any): AxiosPromise<Response>;
    /**
     * 自分のログインセッションリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApi
     */
    getSessions(options?: any): AxiosPromise<Session[]>;
    /**
     * スタンプを新規作成します。
     * @param {string} name スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} file 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    createStamp(name: string, file: any, options?: any): AxiosPromise<Stamp>;
    /**
     * スタンプを削除します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    deleteStamp(stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * スタンプを修正します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {string} [name] スタンプ名(半角英数字と-+_のみを含む32文字以内の文字列)
     * @param {any} [file] 1MBまでのpng, jpeg, gif, svg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    editStamp(stampID: string, name?: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージに押されているスタンプを全て取得します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getMessageStamps(messageID: string, options?: any): AxiosPromise<MessageStamp[]>;
    /**
     * スタンプの情報を取得します。
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamp(stampID: string, options?: any): AxiosPromise<Stamp>;
    /**
     * 自分のスタンプ履歴を最大50件取得します。結果は降順で返されます。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStampHistory(options?: any): AxiosPromise<StampHistory[]>;
    /**
     * 全スタンプのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    getStamps(options?: any): AxiosPromise<Stamp[]>;
    /**
     * 指定したメッセージに指定したスタンプを押します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {MessageStampPost} [messageStampPost]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    stampMessage(messageID: string, stampID: string, messageStampPost?: MessageStampPost, options?: any): AxiosPromise<Response>;
    /**
     * 指定したメッセージから指定したスタンプを外します。
     * @param {string} messageID 操作の対象となるメッセージID
     * @param {string} stampID 操作の対象となるスタンプID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StampApi
     */
    unstampMessage(messageID: string, stampID: string, options?: any): AxiosPromise<Response>;
    /**
     * お気に入りチャンネルリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    getStaredChannels(options?: any): AxiosPromise<string[]>;
    /**
     * お気に入りチャンネルリストにチャンネルを追加します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    starChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * +| お気に入りチャンネルリストから削除します。 既にお気に入りチャンネルリストに無いチャンネルを指定した場合は無視されます(204)。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StarApi
     */
    unstarChannel(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 未読チャンネル情報のリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    getUnreadChannels(options?: any): AxiosPromise<UnreadChannel[]>;
    /**
     * 指定されたチャンネルの未読メッセージを既読にします。存在しないチャンネルIDを指定した場合は、無視されます。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnreadApi
     */
    readMessages(channelID: string, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を変更します。
     * @param {UserData} [userData]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeMe(userData?: UserData, options?: any): AxiosPromise<Response>;
    /**
     * 自分のアイコンを更新します。
     * @param {any} [file] 1MBまでのpng, jpeg, gif
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changeMyIcon(file?: any, options?: any): AxiosPromise<Response>;
    /**
     * 自分のパスワードを変更します。
     * @param {ChangePassword} [changePassword]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    changePassword(changePassword?: ChangePassword, options?: any): AxiosPromise<Response>;
    /**
     * 自分のユーザー情報を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getMe(options?: any): AxiosPromise<Me>;
    /**
     * 自分のアイコン画像を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getMyIcon(options?: any): AxiosPromise<any>;
    /**
     * 自分のQRコードを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getQrCode(options?: any): AxiosPromise<any>;
    /**
     * ユーザーの詳細を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(userID: string, options?: any): AxiosPromise<UserDetail>;
    /**
     * ユーザーのアイコン画像を取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserIcon(userID: string, options?: any): AxiosPromise<any>;
    /**
     * 全ユーザーのリストを取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUsers(options?: any): AxiosPromise<User[]>;
    /**
     * ユーザー登録します
     * @param {UserRegister} [userRegister]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    registerUser(userRegister?: UserRegister, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループにメンバーを追加します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {AddUserGroup} [addUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    addGroupMember(groupID: string, addUserGroup?: AddUserGroup, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを作成します
     * @param {PostUserGroup} [postUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    createGroup(postUserGroup?: PostUserGroup, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    deleteGroup(groupID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループからメンバーを削除します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    deleteGroupMember(groupID: string, userID: string, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループの情報を変更します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {PatchUserGroup} [patchUserGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    editGroup(groupID: string, patchUserGroup?: PatchUserGroup, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーグループを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getGroup(groupID: string, options?: any): AxiosPromise<UserGroup>;
    /**
     * ユーザーグループのメンバーのIDを取得します
     * @param {string} groupID 操作の対象となるユーザーグループID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getGroupMembers(groupID: string, options?: any): AxiosPromise<string[]>;
    /**
     * 全てのユーザーグループを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getGroups(options?: any): AxiosPromise<UserGroup[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getMyGroups(options?: any): AxiosPromise<string[]>;
    /**
     * 所属するユーザーグループのIDを取得します
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApi
     */
    getUserGroups(userID: string, options?: any): AxiosPromise<string[]>;
    /**
     * ユーザーにタグを追加します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {SetTag} [setTag]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    addUserTag(userID: string, setTag?: SetTag, options?: any): AxiosPromise<Response>;
    /**
     * タグのロック、アンロックを変更します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {SetTagLock} [setTagLock]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    changeLockUserTag(userID: string, tagID: string, setTagLock?: SetTagLock, options?: any): AxiosPromise<Response>;
    /**
     * ユーザーから指定したタグを削除します。既に存在しないタグを削除しようとした場合は無視されます(204)。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    deleteUserTag(userID: string, tagID: string, options?: any): AxiosPromise<Response>;
    /**
     * 指定されたタグの情報を取得します。
     * @param {string} tagID 操作の対象となるタグID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getTag(tagID: string, options?: any): AxiosPromise<TagUsers>;
    /**
     * ユーザーのタグのリストを取得します。
     * @param {string} userID 操作の対象となるユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTagApi
     */
    getUserTags(userID: string, options?: any): AxiosPromise<Tag[]>;
    /**
     * 指定したwebhookのアイコンを変更します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {any} [file] webhookユーザーのアイコン(1MBまでのpng, jpeg, gif)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    changeWebhookIcon(webhookID: string, file?: any, options?: any): AxiosPromise<Response>;
    /**
     * webhookを作成します。
     * @param {PostWebhook} [postWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    createWebhooks(postWebhook?: PostWebhook, options?: any): AxiosPromise<Webhook>;
    /**
     * webhookを削除します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    deleteWebhook(webhookID: string, options?: any): AxiosPromise<Response>;
    /**
     * webhookを修正します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {PatchWebhook} [patchWebhook]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    editWebhook(webhookID: string, patchWebhook?: PatchWebhook, options?: any): AxiosPromise<Response>;
    /**
     * webhookの詳細を取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhook(webhookID: string, options?: any): AxiosPromise<Webhook>;
    /**
     * 指定したWebhookのアイコンを取得します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhookIcon(webhookID: string, options?: any): AxiosPromise<any>;
    /**
     * 自分が作成したwebhookの一覧を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    getWebhooks(options?: any): AxiosPromise<Webhook[]>;
    /**
     * Github-Compatibleなwebhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    postGitHubWebhook(webhookID: string, body?: object, options?: any): AxiosPromise<Response>;
    /**
     * webhookを送信します。
     * @param {string} webhookID 操作の対象となるWebhookのID
     * @param {string} [xTRAQChannelId] 投稿先のチャンネルID(変更する場合)
     * @param {string} [xTRAQSignature] リクエストボディシグネチャ。Secretが設定されている場合は必須
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookApi
     */
    postWebhook(webhookID: string, xTRAQChannelId?: string, xTRAQSignature?: string, body?: string, options?: any): AxiosPromise<Response>;
    /**
     * チャンネルのWebRTC状態を取得します。
     * @param {string} channelID 操作の対象となるチャンネルのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    getChannelWebRTCState(channelID: string, options?: any): AxiosPromise<WebRTCChannelState>;
    /**
     * 自身のWebRTCの状態を取得します。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    getWebRTCState(options?: any): AxiosPromise<WebRTCUserState>;
    /**
     * 自身のWebRTCの状態を変更します。
     * @param {PutWebRTCState} [putWebRTCState]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebrtcApi
     */
    putWebRTCState(putWebRTCState?: PutWebRTCState, options?: any): AxiosPromise<Response>;
}
